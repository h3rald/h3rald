'hastysite import

{} :TAGS
{} :TAG-COLUMNS
{} :ARCHIVES
() :ARCHIVE-COLUMNS
() :ARTICLES
{} :HOME
() :PROJECTS


; Utility operator to format a timestamp into a date
(
  integer "dddd, d MMMM yyyy" tformat
) ^to-date


; Create the Archives page.
(
  {}
  "archives/index"    %id
  "archives.html"     %path
  ".html"             %ext
  "Articles"          %title
  "page"              %content-type
  ARCHIVES dvalues (/code :a /code :b a b >) sort %archives
  ARCHIVE-COLUMNS   %archive-columns
  dup "_archives" swap mustache %contents
  dup "page" swap mustache %contents
  output-fwrite
) ^create-archives-page

(
  {}
  "articles/index"    %id
  "articles.html"     %path
  ".html"             %ext
  "Articles"          %title
  "page"              %content-type
  ARCHIVES dvalues (/code :a /code :b a b >) sort %archives
  ARCHIVE-COLUMNS   %archive-columns
  dup "_archives" swap mustache %contents
  dup "page" swap mustache %contents
  output-fwrite
) ^create-articles-page

; Create the Projects page
(
  {}
  "projects/index"                                    %id
  "projects.html"                                     %path
  ".html"                                             %ext
  "Projects"                                          %title
  "page"                                              %content-type
  PROJECTS ('active dhas?) filter (/id swap /id <) sort     %active-projects
  PROJECTS ('active dhas? not) filter (/id swap /id <) sort %inactive-projects
  dup "projects" swap mustache %contents
  output-fwrite
) ^create-projects-page


0 :count ;....

; Group articles by month
(
  (dict) expect -> :content
  (content 'timestamp dhas?)
  (
    content /timestamp :ts
    ts to-date :date 
    ts integer "yyyyMM" tformat :code
    ts integer "MMMM yyyy" tformat :month
    ts integer "MMMM-yyyy" tformat lowercase :id
    ; Add to articles
    content date %date @content
    content ARTICLES append @ARTICLES
    (ARCHIVES code dhas?)
    (
      ; Add article to existing archive
      content ("id" "title" "timestamp" "date") dpick :article
      ARCHIVES code dget :archivedata
      archivedata /articles :articles
      article articles append @articles
      archivedata articles %articles :archivedata
      ARCHIVES archivedata code dset @ARCHIVES
    )
    (
      ; Create new monthly archive
      content ("id" "title" "timestamp" "date") dpick :article
      {}
      month         %month
      code          %code
      article quote %articles
      id            %id
      :archive
      ARCHIVES archive code dset @ARCHIVES
    ) if
  ) when
  content
) ^process-timestamp


; Group articles by tags (not used)
(
  (dict) expect -> :content
  (((content 'tags dhas?) (content /tags "" !=)) &&)
  (
    content /tags "\|" split :tags
    tags (
      :tag
      (TAGS tag dhas?)
      (
        ; Add article to existing tag
        content ("id" "title" "timestamp") dpick :article
        TAGS tag dget :tagdata
        article tagdata append @tagdata
        TAGS tagdata tag dset @TAGS
      )
      (
        ; Create new tag
        content ("id" "title" "timestamp") dpick :article
        TAGS article quote tag dset @TAGS
      ) if
    ) foreach
  ) when
  content
) ^process-tags


; Copy PDF files saved in asset folder
; to the corresponding article output folder.
(
  (dict) expect -> :asset
  asset /id :id
  id "^pdf\/(.+)$" search 1 get :name
  asset "output/articles/$1/$1" (name) => % %id @asset
  asset output-cp
) ^copy-pdf-article-asset


; Process a content file applying the appropriate template
; and compiling markdown to HTML if necessary.
(
  (dict) expect -> :content
  content /id :id
  content /content-type :ct
  "page" :tpl
  (ct "article" ==) ("article" @tpl) when
  (ct "project" ==) ("project" @tpl) when
  (id "index" ==) (content @HOME "home" @tpl) when
  "" :page
  "" :contents
  content input-fread @contents
  (content /ext ".md" ==) (contents content markdown @contents) when
  content contents %contents @content
  tpl content mustache @page
  content page %contents @content
  (
      ((id "^(glyph|ruby-compendium)\/book" match?) ()) ;Do not add index.html
      ((id "index" !=)(
        content 
          "$1/index" (id) =% %id 
          ".html" %ext 
          ; ID must be preserved for links on home page.
          id %rawid
        @content
      ))
  ) case
  content
) ^process-content


; Process and generate home page
(
  ; Sort articles by timestamp
  ARTICLES (/timestamp swap /timestamp >) sort @ARTICLES
  ARTICLES first        :latest
  ARTICLES 1 5 slice    :recents
  ; Process summary
  latest input-fread "(?ms)(.+)?<hr" search 1 get latest markdown :summary
  latest summary %summary @latest
  latest dup /timestamp to-date %date @latest
  #|
  ; Process top tags
  TAGS dkeys (
    :tag
    TAGS tag dget size :total
    (tag total) => 
  ) map
  (last swap last >) sort 
  0 9 slice
  (
    :data
    {}
    data first %tag
    data last  %total
  ) map
  :tags
  |#
  HOME
  latest %latest
  recents %recents
  ;tags %tags
  dup "home" swap mustache %contents
  output-fwrite
) ^generate-home

;; Pre-process CSS assets
(
  (dict) expect -> :meta
  "" :contents
  meta (
    (input-fread @contents meta)
    (:temp contents preprocess-css @contents temp)
    (contents %contents)
  ) tap
  output-fwrite
) ^process-css-asset


;;;;; MAIN ;;;;;

; Process all contents
contents (
  :content
  (((content 'draft dhas? not) (content 'content-type dhas?)) &&)
  (
    content /id :id
    (content /content-type "project" ==) (content PROJECTS append @PROJECTS) when
    content
    ;process-tags 
    "." print!
    process-timestamp 
    process-content 
    @content 
    (id "index" !=) (content output-fwrite) when
  ) when
) foreach
"" puts!

; Create aggregator pages
create-projects-page
create-archives-page
create-articles-page

; Generate home page
generate-home

; Process all assets.
assets (
  dup
  (
    ((/id "^pdf\/" match?) (copy-pdf-article-asset))
    ((/ext ".css" match?) (process-css-asset))
    ((true) (output-cp))
  ) case
) foreach
