'hastysite import

() =TAGS
() =TAG-COLUMNS
() =ARCHIVES
() =ARCHIVE-COLUMNS
() =ARTICLES
() =HOME
() =PROJECTS


; Utility operator to format a timestamp into a date
(
  int "dddd, d MMMM yyyy" tformat
) :to-date


; Create the Archives page.
(
  ()
  "archives/index"    %id
  "archives.html"     %path
  ".html"             %ext
  "Articles"          %title
  "page"              %content-type
  ARCHIVES 'last map (/code :a /code :b a b >) sort %archives
  ;ARCHIVE-COLUMNS   %archive-columns
  dup "_archives" swap mustache %contents
  dup "page" swap mustache %contents
  output-fwrite
) :create-archives-page

; Create the Projects page
(
  ()
  "projects/index"                                    %id
  "projects.html"                                     %path
  ".html"                                             %ext
  "Projects"                                          %title
  "page"                                              %content-type
  PROJECTS (?active) filter (/id swap /id <) sort     %active-projects
  PROJECTS (?active not) filter (/id swap /id <) sort %inactive-projects
  dup "projects" swap mustache %contents
  output-fwrite
) :create-projects-page

; Group articles by month
(
  (dict) expect -> =content
  (content ?timestamp)
  (
    content /timestamp :ts
    ts to-date :date 
    ts int "yyyyMM" tformat :code
    ts int "MMMM yyyy" tformat :month
    ts int "MMMM-yyyy" tformat lowercase :id
    ; Add to articles
    content date %date #content
    content ARTICLES  append #ARTICLES
    (ARCHIVES code dhas?)
    (
      ; Add article to existing archive
      content ("id" "title" "timestamp" "date") dpick =article
      ARCHIVES code dget =archivedata
      archivedata /articles =articles
      article articles append #articles
      archivedata articles %articles #archivedata
      ARCHIVES archivedata code dset #ARCHIVES
    )
    (
      ; Create new monthly archive
      content ("id" "title" "timestamp" "date") dpick ' =article
      ()
      month   %month
      code    %code
      article %articles
      id      %id
      =archive
      ARCHIVES archive code dset #ARCHIVES
    ) if
  ) when
  content
) :process-timestamp


; Group articles by tags
(
  (dict) expect -> =content
  (content ?tags)
  (
    content /tags "|" split =tags
    tags (
      :tag
      (TAGS tag dhas?)
      (
        ; Add article to existing tag
        content ("id" "title" "timestamp") dpick =article
        TAGS tag dget =tagdata
        article tagdata append #tagdata
        TAGS tagdata tag dset #TAGS
      )
      (
        ; Create new tag
        content ("id" "title" "timestamp") dpick ' =article
        TAGS article tag dset #TAGS
      ) if
    ) foreach
  ) when
  content
) :process-tags


; Copy PDF files saved in asset folder
; to the corresponding article output folder.
(
  (dict) expect -> =asset
  asset /id :id
  id "^pdf\/(.+)$" search 1 get :name
  asset "output/articles/$1/$1" (name) => % %id #asset
  asset output-cp
) :copy-pdf-article-asset


; Process a content file applying the appropriate template
; and compiling markdown to HTML if necessary.
(
  (dict) expect -> =content
  content /id :id
  content /content-type :ct
  "page" :tpl
  (ct "article" ==) ("article" @tpl) when
  (ct "project" ==) ("project" @tpl) when
  (id "index" ==) (content #HOME "home" @tpl) when
  "" :page
  "" :contents
  content (
    (input-fread @contents content)
    ((/ext ".md" ==) (=temp contents temp markdown @contents temp) when)
    (contents %contents)
    (=temp tpl temp mustache @page temp)
    (page %contents)
    ((
      ((id "^(glyph|ruby-compendium)\/book" match) ()) ;Do not add index.html
      ((id "index" !=)("$1/index" (id) => % %id ".html" %ext))
    ) case)
  ) tap
) :process-content


; Process and generate home page
(
  ; Sort articles by timestamp
  ARTICLES (/timestamp swap /timestamp >) sort #ARTICLES
  ARTICLES first        =latest
  ARTICLES 1 4 slice    =recents
  ; Process summary
  latest input-fread "/(.+)?<hr/ms" regex 1 get latest markdown :summary
  latest summary %summary #latest
  latest dup /timestamp to-date %date #latest
  ; Process top tags
  TAGS (
    dup first :tag
    last size :total
    (tag total) => 
  ) map
  (last swap last >) sort 
  0 9 slice
  (
    =data
    ()
    data first %tag
    data last  %total
  ) map
  =tags
  HOME (
    (latest   %latest)
    (recents  %recents)
    (tags     %tags)
    (=temp temp "home" temp mustache %contents)
    (output-fwrite)
  ) tap!
) :generate-home

;;;;; MAIN ;;;;;

; Process all contents
contents (
  =content
  ((content ?draft not) (content ?content-type) dequote-and)
  (
    content /id :id
    content
    (/content-type "project" ==) (content PROJECTS append #PROJECTS content) when
    process-tags 
    process-timestamp 
    process-content
    (id "index" !=) 'output-fwrite when
  ) when
) foreach

; Create aggregator pages
create-projects-page
create-archives-page

; Generate home page
generate-home



; Process all assets.
assets (
  dup
  (
    ((/id "^pdf\/" match) (copy-pdf-article-asset))
    ((true) (output-cp))
  ) case
) foreach
