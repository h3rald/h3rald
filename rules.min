'hastysite import

{} :ARCHIVES
() :ARTICLES
{} :HOME
() :PROJECTS
() :SPELLS

"contents/articles" ls size :articles-count
17 :projects-count
"contents/grimoire" ls size :grimoire-count

(
  symbol to-date
  (int :timestamp ==> str :result)
  (
    timestamp integer "dddd, d MMMM yyyy" tformat @result
  )
) ::
;; Utility operator to format a timestamp into a date


(
  symbol create-articles-page
  (==>)
  (
    {}
    "articles/index"    %id
    "articles.html"     %path
    ".html"             %ext
    "ARTICLES"          %title
    "page"              %content-type
    ARCHIVES dvalues (/code :a /code :b a b >) sort %archives
    projects-count %projects-count
    articles-count %articles-count
    grimoire-count %grimoire-count
    ; TODO: why processing twice??
    dup "_archives" swap mustache %contents
    dup "page" swap mustache :page
    "articles" page process-icons
    %contents
    output-fwrite
  )
) ::
;; Create articles page

(
  symbol create-projects-page
  (==>)
  (
    {}
    "projects/index"                                    %id
    "projects.html"                                     %path
    ".html"                                             %ext
    "PROJECTS"                                          %title
    "page"                                              %content-type
    PROJECTS ('active dhas?) filter (/id swap /id <) sort     %active-projects
    PROJECTS ('active dhas? not) filter (/id swap /id <) sort %inactive-projects
    projects-count %projects-count
    articles-count %articles-count
    grimoire-count %grimoire-count
    dup "projects" swap mustache :page
    "projects" page process-icons
    %contents
    output-fwrite
  )
) ::
;; Create the Projects page

(
  symbol create-grimoire-page
  (==>)
  (
    {}
    "grimoire/index"                                    %id
    "grimoire.html"                                     %path
    ".html"                                             %ext
    "GRIMOIRE"                                          %title
    "page"                                              %content-type
    SPELLS (/id swap /id <) sort                        %spells
    projects-count %projects-count
    articles-count %articles-count
    grimoire-count %grimoire-count
    dup "grimoire" swap mustache :page
    "grimoire" page process-icons
    %contents
    output-fwrite
  )
) ::
;; Create the Grimoire page

(
  symbol process-timestamp
  (dict :content ==> dict :result)
  (
    (content 'timestamp dhas?)
    (
      content /timestamp :ts
      ts to-date :date 
      ts integer "yyyyMM" tformat :code
      ts integer "MMMM yyyy" tformat :month
      ts integer "MMMM-yyyy" tformat lowercase :id
      ; Add to articles
      content date %date @content
      content ARTICLES append @ARTICLES
      (ARCHIVES code dhas?)
      (
        ; Add article to existing archive
        content ("id" "title" "timestamp" "date") dpick :article
        ARCHIVES code dget :archivedata
        archivedata /articles :articles
        article articles append @articles
        archivedata articles %articles :archivedata
        ARCHIVES archivedata code dset @ARCHIVES
      )
      (
        ; Create new monthly archive
        content ("id" "title" "timestamp" "date") dpick :article
        {}
        month         %month
        code          %code
        article quote %articles
        id            %id
        :archive
        ARCHIVES archive code dset @ARCHIVES
      ) if
    ) when
    content @result
  )
) ::
;; Group articles by month

(
  symbol copy-pdf-article-asset
  (dict :asset ==>)
  (
    asset /id :id
    id "^pdf\/(.+)$" search 1 get :name
    asset "output/articles/$1/$1" (name) => % %id @asset
    asset output-cp
  )
) ::
; Copy PDF files saved in asset folder
; to the corresponding article output folder.

; Syntax highlighting
(
  symbol process-code
  (str :text ==> str :result)
  (
    "temp/highlight" :tmpfile
    "chroma $# $#--html --html-only --html-prevent-surrounding-pre" :cmd
    text "<pre>\s*<code[^>]*?(?:class=\"([a-z0-1]+)\")?>([\s\S]+?)</code></pre>" (
      :match
      match 2 get :code
      match 1 get :lang
      "" :lexer
      (lang "" !=) 
        ("--lexer $# " (lang) =% @lexer)
      when
      ; Unescape HTML entities
      code "(&gt;|&lt;|&quot;|&amp;)" (
        :match
        match 1 get :ntt
        (ntt "&gt;" ==)
          (">")
        when
        (ntt "&lt;" ==)
          ("<")
        when
        (ntt "&quot;" ==)
          ("\"")
        when
        (ntt "&amp;" ==)
          ("&")
        when
      ) replace-apply @code
      code tmpfile fwrite
      cmd (tmpfile lexer) =% run /output :out
      "<pre class=\"chroma\"><code>$#</code></pre>" (out) =%
    ) replace-apply @result
  )
) ::

; Process :icon: markup
(
  symbol process-icons
  (str :id str :text ==> str :result)
  ( 
    ; whitelist of common false positives for icon markup
    ("borrow", "http", "cakephp") :whitelist
    text ":([a-z]+[a-z0-9-]+)(?:\|([a-zA-Z0-9 ]+))?:" (
      :match
      match 0 get :content
      match 1 get :icon
      match 2 get :explicit-title
      "assets/images/icons/$#.svg" (icon) =% :path
      (path file?)
        (
          path fread from-xml "svg" xquery :svgx
          icon :title
          (explicit-title "" !=)
            (explicit-title @title)
          when
          ; Add title tag
          "<title>$#</title>" (title) =% from-xml :svg-title
          svgx dup /children svg-title swap prepend %children @svgx
          ; Add role="img"
          svgx /attributes :svg-attrs
          svgx svg-attrs "img" %role %attributes @svgx
          svgx to-xml :svg
          "<span class=\"icon\">$#</span>" (svg) =% @content
        )
        (
          (whitelist icon in? not)
            ("$# - Icon not found: $#" (id icon) =% warn)
          when
        )
      if
      content
    ) replace-apply @result
  ) 
) ::

(
  symbol process-content
  (dict :content ==> dict :result)
  (
    content /id :id
    content /content-type :ct
    "page" :tpl
    (ct "article" ==) ("article" @tpl) when
    (ct "project" ==) ("project" @tpl) when
    (id "index" ==) (content @HOME "home" @tpl) when
    "" :page
    "" :contents
    content input-fread @contents
    (content /ext ".md" ==) (contents content markdown @contents) when
    content contents %contents @content
    tpl content mustache @page
    id page process-icons @page
    id page process-code @page
    content page %contents @content
    (
        ((id "^(glyph|ruby-compendium)(\/|\\\\)book" match?) ()) ;Do not add index.html due to the way book internal links work.
        ((id "index" !=)(
          content 
            "$1/index" (id) =% %id 
            ".html" %ext 
            ; ID must be preserved for links on home page.
            id %rawid
          @content
        ))
    ) case
    content @result
  )
) ::
;; Process a content file applying the appropriate template
;; and compiling markdown to HTML if necessary.


(
  symbol generate-home
  (==>)
  (
    ; Sort articles by timestamp
    ARTICLES (/timestamp swap /timestamp >) sort @ARTICLES
    ARTICLES first        :latest
    ARTICLES 1 5 slice    :recents
    ; Process summary
    latest input-fread "(?ms)(.+)?<hr" search 1 get latest markdown :summary
    latest summary %summary @latest
    latest dup /timestamp to-date %date @latest
    HOME
    latest %latest
    recents %recents
    projects-count %projects-count
    articles-count %articles-count
    grimoire-count %grimoire-count
    ;tags %tags
    dup "home" swap mustache :page
    "home" page process-icons
    %contents
    output-fwrite
  )
) ::
;; Process and generate home page


(
  symbol process-css-asset
  (dict :meta ==>)
  (
    "" :contents
    meta (
      (input-fread @contents meta)
      (:temp contents @contents temp)
      (contents %contents)
    ) tap
    output-fwrite
  )
) ::
;; Process CSS assets

;;;;; MAIN ;;;;;

true :enable-content-processing

(opts 'no-contents dhas?)
  (false @enable-content-processing)
when 

(enable-content-processing)
(
  ; Process all contents
  contents (
    :content
    (((content 'draft dhas? not) (content 'content-type dhas?)) &&)
    (
      content /id :id
      (content /content-type "project" ==) (content PROJECTS append @PROJECTS) when
      (content /content-type "spell" ==) (content SPELLS append @SPELLS) when
      content
      projects-count %projects-count
      articles-count %articles-count
      grimoire-count %grimoire-count
      process-timestamp 
      process-content 
      @content 
      (id "index" !=) (content output-fwrite) when
    ) when
  ) foreach

  ; Create aggregator pages
  create-projects-page
  create-grimoire-page
  create-articles-page

  ; Generate home page
  generate-home
)
when

; Process all assets.
assets (
  dup
  (
    ((/id "^pdf\/" match?) (copy-pdf-article-asset))
    ((/ext ".css" match?) (process-css-asset))
    ((true) (output-cp))
  ) case
) foreach
