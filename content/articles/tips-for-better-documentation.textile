----- 
:type: article
:tags: [writing]
:date: 2009-12-18 15:37:33.045000 +01:00
:permalink: tipcs-for-better-documentation
:title: "10 tips for writing better documentation"
:toc: true
-----

When I started working as a Technical Writer, I thought writing documentation was no different than writing tutorials or informative blog posts. Now, three years later, I admit I was wrong: "technical communication":http://en.wikipedia.org/wiki/Technical_communication is craft (not an art), and it takes time and experience to master it.

Although I'm far from being an expert (some of my colleagues have 10+ years of experience in the field), I decided to share what I learnt so far, hoping that it may be useful to someone: being able to write good technical documents can be a useful skill nowadays, especially considering the amount of open source project in desperate need of good documentation.

If you have no plans to write technical documentation in the near future, you should read on anyway: some of the following tips may become useful when writing your next blog post or thesis, as they can be applied to many forms of writing where _clarity_ and _completeness_ are a key requirement.

h3. #1 &ndash; Know your audience

Before writing a single word you must know who you're writing for. There's nothing worse than writing a document that nobody can understand or that doesn't tell the reader anything he or she already knows. If you're writing a developer guide, it is assumed that the average reader knows how to program already, so explaining how to create a new project in Visual Studio is totally pointless. The more you narrow down your audience, the more your document is going to be useful to your readers.

As a general good practice, consider spending some time writing profiles for your potential readers, outlining their skills, their professional responsabilities and even their personal traits. This is called _Audience Analysis_, and it focuses on identifying a set of _personas_, i.e. group of similar users who may end up reading your document. Some documentation departments even made huge posters depicting a _grumpy system administrator_ or an _arrogant programmer_: as extreme as it sounds, they claimed it helped them a lot to identify what kind of people they were writing for.

h4. Example

The following is a very short profile for "John, the system integrator":

<div class="block">
John is a system integrator. He was hired by a company to "install _ProductX_ oand make it work". He knows his way around computers, and he's familiar with Microsoft technology in general. He's used to install software on all known flavours of Windows OS and he deals with SQL Server on a daily basis. Normally he doesn't read manuals unless things go wrong. 
</div>

Even by reading this simple description you have a basic idea on how to write your next installation manual. More specifically:
* The installation wizard will be described, but not in great detail (e.g. no _Click *next* to proceed_ or similar)
* The troubleshooting section should be prominent and to-the-point, with references to exact error codes or messages logged by the system.
* There's no need to explain what a Stored Procedure is or how to Start SQL Server Management Studio, it is sufficient to explain _what to do_, not _how_.
* Any manual post-installation task to perform on _ProductX_ should be detailed as necessary.
* Concepts and terminology specific to _ProductX_ should be avoided, unless strictly necessary.
* An introduction on the main features offered by _ProductX_ is not required.

h4. Further reading

* "Online Technical Writing: Audience Analysis":http://www.io.com/~hcexres/textbook/aud.html
* "Know your audience. | CommunicateBetter.org":http://www.communicatebetter.org/2007/05/06/technical-communication-know-your-audience/
* "Elements of Audience Analysis":http://core.ecu.edu/engl/henzeb/5780/audanal.htm
* "Ad-Hoc Personas & Empathetic Focus":http://www.jnd.org/dn.mss/personas_empath.html
* "English Composition 1: Audience Analysis":http://papyr.com/hypertextbooks/comp1/audience.htm
* "Personas: Setting the Stage for Building Usable Information Sites":http://www.infotoday.com/online/jul03/head.shtml
* "Making Personas More Powerful: Details to Drive Strategic and Tactical Design":http://www.boxesandarrows.com/view/making_personas_more_powerful_details_to_drive_strategic_and_tactical_design
* "Technical writing audience":http://en.wikiversity.org/wiki/Technical_writing_audience

h3. #2 &ndash; Omit needless words

bq. "Vigorous writing is concise. A sentence should contain no unnecessary words, a paragraph no unnecessary sentences, for the same reason that a drawing should have no unnecessary lines and a machine no unnecessary parts. This requires not that the writer make all his sentences short, or that he avoid all detail and treat his subjects only in outline, but that every word tell"

p((((. &mdash; William Strunk Jr., ??"The Elements of Style":http://www.bartleby.com/141/??

* Simplified English

h4. Example

Consider the following excerpt taken from "Introduction To Linux, §3.3: Manipulating files":http://tldp.org/LDP/intro-linux/html/sect_03_03.html:

<blockquote>
Besides the name of the file, *ls* can give a lot of other information, such as the file type, as we already discussed. It can also show permissions on a file, file size, inode number, creation date and time, owners and amount of links to the file. With the -a option to ls, files that are normally hidden from view can be displayed as well. These are files that have a name starting with a dot. A couple of typical examples include the configuration files in your home directory. When you've worked with a certain system for a while, you will notice that tens of files and directories have been created that are not automatically listed in a directory index. Next to that, every directory contains a file named just dot (.) and one with two dots (..), which are used in combination with their inode number to determine the directory's position in the file system's tree structure.
</blockquote>

It is certainly informative, but it can be made easier to understand by _omitting needless words_, as follows:

<div class="block">
*ls* can display the following information about a file, besides its name: type, size, inode number, creation date and time, owners and the numbers of links to it.
Use *ls -a* to display hidden files, such as the configuration files in your home directory. When you use this option, *ls* displays also two special files named "." and "..", used to determine the position of a directory within the file system structure.
</div>

h4. Further reading


h3. #3 &ndash; Infomap your topics

h4. Example

See my own article on "information mapping":http://www.h3rald.com/articles/33/

h4. Further reading


h3. #4 &ndash; An example is better than a thousand rules

h4. Example

h4. Further reading


h3. #5 &ndash; Use images wisely

h4. Example

h4. Further reading


h3. #6 &ndash; Structure your documents with accessibility in mind

* index and toc
* links

h4. Example

h4. Further reading


h3. #7 &ndash; Be minimalist

* Ikea docs
* Lego documentation test

h4. Example

h4. Further reading


h3. #8 &ndash; Be consistent

h4. Example

h4. Further reading


h3. #9 &ndash; Test and Refactor

* peer review
* rewrite

h4. Example

h4. Further reading


h3. #10 &ndash; Aid your readers memory

* cheat sheets
* diagrams

h4. Example

h4. Further reading
