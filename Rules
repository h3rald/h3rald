#!/usr/bin/env ruby

compile /^\/archives\// do
	rep.filter :erb
	layout 'default'
end

compile /^\/(home|projects|about)/ do
	rep.filter :erb
	rep.filter :redcloth
	layout 'default'
end

compile /(rss|atom)/ do
	rep.filter :erb unless rep.binary?
end

compile '/styles/_*/' do 
end 

compile '/styles/*' do
	if item[:extension] == "scss" && item.identifier.match(/style\/$/) then
		filter :sass, {
    	:load_paths => [Dir.pwd+"/content/styles"],
			:syntax => :scss,
			:style => :compact
 	 	}
	end
end

compile "sitemap" do
	rep.filter :erb
end

compile /^\/(js\/.+?)/ do
	# do nothing
end

compile '/glyph/book/*' do
	# do nothing
end

compile '*' do
	if item[:filters_pre] && !item[:filters_pre].empty? then
		item[:filters_pre].each do |f|
			rep.filter f.to_sym
		end
		layout 'default'
	else
		unless rep.binary? then
			case item[:extension]
			when 'textile' then
				rep.filter :redcloth
				layout 'default'
			when 'md','markdown' then
				rep.filter :bluecloth
				layout 'default'
			when 'bbcode' then
				rep.filter :bbcode
				layout 'default'
			when 'glyph' then
				pdf_file = Pathname.new "#{Dir.pwd}/output#{item.identifier.gsub(/\/$/, '')}.pdf"
				unless pdf_file.exist? then
				# Create the PDF file
					f = Pathname.new "#{Dir.pwd}/output#{item.identifier.gsub(/\/$/, '')}.glyph"
					f.parent.mkpath
					doc = %{
					include[#{f.parent.parent.parent}/lib/data]
					h3rald_article[
						@identifier[#{item.identifier}]
						@content[section[#{item.raw_content}]]
					]
					}
					# Write the new raw file using Glyph's file_write method
					file_write f, doc
					# Now compile the PDF (works if Prince is installed)
					target = Glyph['document.output']
					Glyph['document.output'] = 'pdf'
					Glyph['document.author'] = "Fabio Cevasco"
					Glyph['output.pdf.generator'] = "prince"
					Glyph['site.root'] = ".."
					Glyph['document.date'] = item[:date].strftime "%A, %d %B %Y"
					Glyph['document.title'] = item[:title]
					Glyph['document.subtitle'] = ""
					Glyph.compile f.to_s
					begin
						f.unlink
						Pathname.new(f.to_s.gsub(/\.glyph$/, '.html')).unlink
					rescue
					end
				end
				Glyph['site.root'] = ""
				# Filter text rep
				rep.filter :glyph
				layout 'default'
				Glyph.reset
			end
		end
	end
end

route /^\/tags\/.+?-(atom|rss)/ do
	item.identifier.gsub(/(.+)-(rss|atom)\/$/, '\1/\2') + '.xml'
end

route '/(atom|rss)/' do
	item.identifier.chop + '.xml'
end

route '/css/*' do
	item.identifier.chop + '.css'
end

route '/styles/_*/' do 
   nil 
end 

route '/styles/*' do
	item.identifier.chop + '.css' 
end

route '/glyph/book/' do
	'/glyph/book/index.html'
end

route '/glyph/book/*' do
	item.identifier.chop+'.html'
end

route '/sitemap' do
	item.identifier.chop + '.xml'
end

route "/htaccess" do
	"/.htaccess"
end

route /\/(images|img|files|favicon|robots)\// do
	item.identifier.chop + ".#{item[:extension]}"
end

route '/js/*' do
	item.identifier.chop + '.js'
end

route '/fonts/*' do
	item.identifier.chop + '.ttf'
end

route '*' do
  item.identifier + 'index.html'
end

layout '*', :erb
