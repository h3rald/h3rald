<!doctype html>
<html lang="en">
<head>
  <title>mn Language Developer Guide</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="author" content="Fabio Cevasco">
  <meta name="generator" content="HastyScribe">
  <style>/*! normalize.css v2.1.3 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}
/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block;
}
/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}
/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}
/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  text-size-adjust: 100%;
  /* 2 */
}
/**
 * Remove default margin.
 */
body {
  margin: 0;
}
/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent;
}
/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted;
}
/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}
/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}
/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}
/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}
/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}
/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}
/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}
/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}
/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap;
}
/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019";
}
/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}
/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}
/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}
/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}
/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0;
}
/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}
/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}
/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
}
/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}
/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}
/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  cursor: pointer;
  /* 3 */
}
/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}
/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}
/**
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  box-sizing: content-box;
}
/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}
/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}
/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}
/* Fonts */
/* Colors */
.mix-monospace {
  font-family: monospace;
  font-weight: 400;
}
.mix-no-border-radius {
  border-radius: 0px;
}
@media screen and (max-width: 639px) {
  .mix-responsive {
    overflow-y: hidden;
    overflow-x: auto;
  }
  .mix-responsive td {
    white-space: nowrap;
  }
}
body {
  background-color: #fff;
  margin: 0 auto;
  height: 100%;
  zoom: 1;
  font-weight: 400;
  letter-spacing: normal;
  word-spacing: normal;
  color: #333;
  font: 15px sans-serif;
  line-height: 1.4;
  -webkit-font-smoothing: antialiased;
  width: 960px;
  hyphens: auto;
  text-align: justify;
}
@media screen and (max-width: 659px) {
  body {
    width: 100%;
  }
}
@media screen and (min-width: 660px) {
  body {
    width: 660px;
  }
}
@media screen and (min-width: 880px) {
  body {
    width: 880px;
  }
}
#main,
#footer,
#header {
  width: 94%;
  margin: auto;
}
#footer {
  border-top: 1px solid #ddd;
  text-align: center;
  font-size: 75%;
}
#footer p {
  line-height: 0.6em;
}
#toc {
  margin-top: -10px;
}
#toc ul {
  list-style-type: none;
  padding-left: 20px;
}
#toc > ul {
  padding-left: 0;
}
/* Lists */
ul,
ol {
  padding-left: 30px;
}
li p {
  margin: 0 auto;
}
.unstyled li {
  list-style-type: none;
}
dl dt {
  font-weight: 700;
}
dl dd {
  padding: 0 0 0.2em 0;
}
/* Headings */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 700;
  color: #111;
  border-bottom: 1px solid #ddd;
}
h1 {
  text-align: center;
}
/* Blocks */
blockquote {
  border-left: 3px solid #dedede;
  padding: 0px 10px;
  margin: 10px 0;
  font-style: italic;
}
pre {
  font-family: monospace;
  font-weight: 400;
  color: #222;
  white-space: pre-wrap;
  margin: auto;
  padding: 0;
}
@media screen and (max-width: 639px) {
  pre {
    overflow-y: hidden;
    overflow-x: auto;
  }
  pre td {
    white-space: nowrap;
  }
}
pre code {
  box-shadow: none;
  border: none;
  line-height: 1.2em;
}
.responsive {
  width: 100%;
}
@media screen and (max-width: 639px) {
  .responsive {
    overflow-y: hidden;
    overflow-x: auto;
  }
  .responsive td {
    white-space: nowrap;
  }
}
table {
  border-collapse: collapse;
  margin: 15px auto;
  border-spacing: 0;
  empty-cells: show;
  min-width: 100%;
}
table thead {
  background: #f8f8f8;
  color: #222;
  text-align: left;
  vertical-align: bottom;
}
table td,
table th {
  background-color: transparent;
  border: 1px solid #999;
  font-size: inherit;
  margin: 0;
  overflow: visible;
  padding: 6px 12px;
}
address {
  font-style: italic;
  color: #999;
}
hr {
  border: 0;
  height: 1px;
  background: #333;
  background-image: linear-gradient(to right, #ccc, #333, #ccc);
}
.center {
  margin: auto;
  text-align: center;
}
/* Inline */
[class^="fa-"]:before,
[href^=http]:before,
[href^=mailto]:before,
[href^=git]:before,
[href^=tel]:before,
[href^=magnet]:before,
[href='#document-top']:before,
[class^="badge-"]:before {
  width: 15px;
  height: 15px;
  background-repeat: no-repeat;
  box-sizing: border-box;
  content: ' ';
  display: inline-block;
  vertical-align: text-top;
}
.tip > p:first-child:before,
.warning > p:first-child:before,
.sidebar > p:first-child:before,
.note > p:first-child:before {
  width: 15px;
  height: 15px;
  background-repeat: no-repeat;
  box-sizing: border-box;
  content: ' ';
  display: inline-block;
  vertical-align: text-top;
  margin-right: 2px;
}
[href^=http]:before,
[href^=mailto]:before,
[href^=git]:before,
[href^=tel]:before,
[href^=magnet]:before {
  margin-right: 2px;
}
[href='#document-top'] {
  float: right;
}
[href='#document-top']:before {
  width: 12px;
  height: 12px;
}
#footer a:before {
  background: none;
}
#footer a:hover {
  text-decoration: none;
}
#footer a:after {
  content: none;
}
code,
span.code {
  font-family: monospace;
  font-weight: 400;
  hyphens: none;
  color: #B2361E;
  font-size: 85%;
}
strong code,
b code {
  font-weight: 700;
}
kbd,
span.kbd {
  color: #222;
  background-color: #f8f8f8;
  padding: 0 3px 0;
  display: inline-block;
  width: auto;
  margin: 1px;
  border-radius: 2px;
  background-clip: padding-box;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  font-family: monospace;
  font-weight: 700;
  border-right: 1px solid #bbb;
  border-bottom: 1px solid #bbb;
  line-height: 1em;
  font-size: 80%;
  hyphens: none;
}
mark,
span.mark {
  padding: 0 1px;
  color: #222;
}
abbr,
span.abbr {
  font-variant: small-caps;
  font-weight: 700;
  hyphens: none;
}
abbr:hover,
span.abbr:hover {
  cursor: help;
}
samp,
span.samp {
  font-size: 90%;
  color: #222;
  background-color: transparent;
  padding: 0 3px 0;
  display: inline-block;
  width: auto;
  margin: 1px;
  border-radius: 2px;
  background-clip: padding-box;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  hyphens: none;
}
var,
span.var {
  font-size: 90%;
  font-family: monospace;
  font-weight: 700;
  font-style: normal;
  hyphens: none;
}
cite,
span.cite {
  font-weight: 700;
  font-style: italic;
  hyphens: none;
}
q,
span.q {
  font-style: italic;
  color: #666;
  hyphens: none;
}
span.tt,
span.cmd,
span.opt,
span.arg,
span.kwd,
span.ext,
span.file,
span.dir {
  font-size: 90%;
  font-family: monospace;
  font-weight: 400;
  hyphens: none;
}
span.ext,
span.kwd {
  font-weight: 700;
}
img {
  max-width: 100%;
}
/* Links */
a,
a:visited {
  color: #4183c4;
  text-decoration: none;
}
a:hover,
a:visited:hover {
  text-decoration: underline;
}
a.hastyscribe-logo:before {
  display: inline;
}
a.hastyscribe-logo img {
  vertical-align: middle;
}
/* Checkboxes */
li.github_checkbox {
  list-style-type: none;
}
.note {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #264c72;
  background-color: #d8ebf8;
  border: 1px solid #A4D1EF;
  font-size: 95%;
}
.note code,
.note samp,
.note pre {
  color: #264c72;
}
.note a {
  color: #264c72;
}
.note p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .note {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.note > p {
  margin: 0 auto;
}
.note > p:first-child {
  font-weight: 700;
  color: #264c72;
}
.note pre,
.note code {
  color: #19324c;
}
.note a {
  color: #132639;
}
.tip {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #009926;
  background-color: #d8f5cd;
  border: 1px solid #B0EB99;
  font-size: 95%;
}
.tip code,
.tip samp,
.tip pre {
  color: #009926;
}
.tip a {
  color: #264c72;
}
.tip p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .tip {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.tip > p {
  margin: 0 auto;
}
.tip > p:first-child {
  font-weight: 700;
  color: #009926;
}
.tip pre,
.tip code {
  color: #006619;
}
.tip a {
  color: #004d13;
}
.warning {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #705400;
  background-color: #FFEBAD;
  border: 1px solid #FFDB70;
  font-size: 95%;
}
.warning code,
.warning samp,
.warning pre {
  color: #705400;
}
.warning a {
  color: #264c72;
}
.warning p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .warning {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.warning > p {
  margin: 0 auto;
}
.warning > p:first-child {
  font-weight: 700;
  color: #705400;
}
.warning pre,
.warning code {
  color: #3d2e00;
}
.warning a {
  color: #241b00;
}
.blank-sidebar {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #555;
  background-color: #fefefe;
  border: 1px solid #fefefe;
  font-size: 95%;
}
.blank-sidebar code,
.blank-sidebar samp,
.blank-sidebar pre {
  color: #555;
}
.blank-sidebar a {
  color: #264c72;
}
.blank-sidebar p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .blank-sidebar {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.blank-sidebar > p {
  margin: 0 auto;
}
.blank-sidebar > p:first-child {
  font-weight: 700;
  color: #555;
}
.blank-sidebar pre,
.blank-sidebar code {
  color: #3b3b3b;
}
.blank-sidebar a {
  color: #2f2f2f;
}
.sidebar {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #555;
  background-color: #f8f8f8;
  border: 1px solid #f8f8f8;
  font-size: 95%;
}
.sidebar code,
.sidebar samp,
.sidebar pre {
  color: #555;
}
.sidebar a {
  color: #264c72;
}
.sidebar p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .sidebar {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.sidebar > p {
  margin: 0 auto;
}
.sidebar > p:first-child {
  font-weight: 700;
  color: #555;
}
.sidebar pre,
.sidebar code {
  color: #3b3b3b;
}
.sidebar a {
  color: #2f2f2f;
}
.output {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #555;
  background-color: #f8f8f8;
  border: 1px solid #f8f8f8;
}
.output code,
.output samp,
.output pre {
  color: #555;
}
.output a {
  color: #264c72;
}
.output p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .output {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.terminal {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #eee;
  background-color: #222;
  border: 1px solid #ccc;
  hyphens: none;
  padding: 0 3px;
  border: 2px solid #999;
  white-space: pre-wrap;
  border-top: 10px solid #999;
}
.terminal code,
.terminal samp,
.terminal pre {
  color: #eee;
}
.terminal a {
  color: #264c72;
}
.terminal p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .terminal {
    margin-left: 80px;
    margin-right: 80px;
  }
}
@media screen and (max-width: 639px) {
  .terminal {
    overflow-y: hidden;
    overflow-x: auto;
  }
  .terminal td {
    white-space: nowrap;
  }
}
.terminal > p,
.terminal > p:first-child {
  margin-top: -40px;
  margin-bottom: 0;
  text-shadow: none;
  font-weight: 400;
  font-family: monospace;
  font-size: 85%;
  color: #eee;
}
.terminal > p code,
.terminal > p:first-child code,
.terminal > p pre,
.terminal > p:first-child pre,
.terminal > p samp,
.terminal > p:first-child samp {
  font-size: 100%;
}
.terminal > p:first-child,
.terminal > p:first-child:first-child {
  margin-top: 0px;
}
.terminal > p:before,
.terminal > p:first-child:before {
  font-family: monospace;
  font-style: normal;
  font-weight: 700;
  color: #009926;
  content: "$ ";
}
.terminal-su {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #eee;
  background-color: #222;
  border: 1px solid #ccc;
  hyphens: none;
  padding: 0 3px;
  border: 2px solid #999;
  white-space: pre-wrap;
  border-top: 10px solid #999;
}
.terminal-su code,
.terminal-su samp,
.terminal-su pre {
  color: #eee;
}
.terminal-su a {
  color: #264c72;
}
.terminal-su p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .terminal-su {
    margin-left: 80px;
    margin-right: 80px;
  }
}
@media screen and (max-width: 639px) {
  .terminal-su {
    overflow-y: hidden;
    overflow-x: auto;
  }
  .terminal-su td {
    white-space: nowrap;
  }
}
.terminal-su > p,
.terminal-su > p:first-child {
  margin-top: -40px;
  margin-bottom: 0;
  text-shadow: none;
  font-weight: 400;
  font-family: monospace;
  font-size: 85%;
  color: #eee;
}
.terminal-su > p code,
.terminal-su > p:first-child code,
.terminal-su > p pre,
.terminal-su > p:first-child pre,
.terminal-su > p samp,
.terminal-su > p:first-child samp {
  font-size: 100%;
}
.terminal-su > p:first-child,
.terminal-su > p:first-child:first-child {
  margin-top: 0px;
}
.terminal-su > p:before,
.terminal-su > p:first-child:before {
  font-family: monospace;
  font-style: normal;
  font-weight: 700;
  color: #009926;
  content: "$ ";
}
.terminal-su > p:before,
.terminal-su > p:first-child:before {
  color: #CC3300;
  content: "# ";
}
div .terminal {
  margin: 2px auto;
}
@media screen and (min-width: 880px) {
  div .terminal {
    margin-left: 80px;
    margin-right: 80px;
  }
}
details {
  font-size: 95%;
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #555;
  background-color: #f8f8f8;
  border: 1px solid #fefefe;
  display: block;
}
details code,
details samp,
details pre {
  color: #555;
}
details a {
  color: #264c72;
}
details p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  details {
    margin-left: 80px;
    margin-right: 80px;
  }
}
details > summary::before {
  content: url("data:image/svg+xml,%3Csvg viewBox='0 0 448 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z' /%3E %3C/svg%3E");
  display: inline-block;
  margin-right: 2px;
  vertical-align: text-top;
  height: 11px;
  width: 11px;
}
details[open] > summary::before {
  content: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M169.4 470.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 370.8 224 64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 306.7L54.6 265.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z' /%3E %3C/svg%3E");
}
summary {
  cursor: pointer;
  font-weight: bold;
}
summary > * {
  display: inline;
}
.headings h1 {
  font-size: 2em;
}
.headings h2 {
  font-size: 1.5em;
  counter-reset: h3;
  counter-increment: h2;
}
.headings h2::before {
  content: counter(h2) "\00A0\00A0";
}
.headings h3 {
  font-size: 1.2em;
  counter-reset: h4;
  counter-increment: h3;
}
.headings h3::before {
  content: counter(h2) "." counter(h3) "\00A0\00A0";
}
.headings h4 {
  font-size: 1.1em;
  counter-reset: h5;
  counter-increment: h4;
}
.headings h4::before {
  content: counter(h2) "." counter(h3) "." counter(h4) "\00A0\00A0";
}
.headings h5 {
  font-size: 1em;
  counter-reset: h6;
  counter-increment: h5;
}
.headings h5::before {
  content: counter(h2) "." counter(h3) "." counter(h4) "." counter(h5) "\00A0\00A0";
}
.headings h6 {
  font-size: 1em;
  counter-increment: h6;
}
.headings h6::before {
  content: counter(h2) "." counter(h3) "." counter(h4) "." counter(h5) "." counter(h6) "\00A0\00A0";
}
/***************/
.headings #toc {
  counter-reset: toc2;
}
#toc > ul > li > ul > li > a {
  font-weight: 700;
}
.headings #toc li li a {
  counter-reset: toc3;
  counter-increment: toc2;
}
.headings #toc li li a::before {
  content: counter(toc2) "\00A0\00A0";
}
.headings #toc li li li a {
  counter-reset: toc4;
  counter-increment: toc3;
}
.headings #toc li li li a::before {
  content: counter(toc2) "." counter(toc3) "\00A0\00A0";
}
.headings #toc li li li li a {
  counter-reset: toc5;
  counter-increment: toc4;
}
.headings #toc li li li li a::before {
  content: counter(toc2) "." counter(toc3) "." counter(toc4) "\00A0\00A0";
}
.headings #toc li li li li li a {
  counter-reset: toc6;
  counter-increment: toc5;
}
.headings #toc li li li li li a::before {
  content: counter(toc2) "." counter(toc3) "." counter(toc4) "." counter(toc5) "\00A0\00A0";
}
.headings #toc li li li li li li a {
  counter-increment: toc6;
}
.headings #toc li li li li li li a::before {
  content: counter(toc2) "." counter(toc3) "." counter(toc4) "." counter(toc5) "." counter(toc6) "\00A0\00A0";
}
@media print {
  body {
    width: 700px;
  }
  /* Table of Contents */
  #toc {
    width: 650px;
    list-style-type: none;
  }
  #toc ul {
    list-style-type: none;
    padding-left: 20px;
    margin-left: 0;
  }
  #toc li {
    padding-left: 0;
    margin-left: 0;
    padding-bottom: 0.2em;
  }
  #toc a {
    text-decoration: none;
  }
  #toc a::after {
    content: leader(".") target-counter(attr(href), page);
  }
  #toc a[href="#preface"]::after {
    content: leader(".") target-counter(attr(href), page, lower-roman);
  }
  #toc a {
    color: #000;
  }
  #toc > li {
    margin: 0.2em 0;
    line-height: 1.2em;
    font-weight: bold;
    padding-bottom: 0.4em;
    font-size: 110%;
  }
  #toc > li > ul > li {
    font-weight: normal;
    font-size: 100%;
  }
  #toc li li li li li li {
    display: none;
    /* None sane of mind would EVER want more than five TOC levels. */
  }
  #toc > li {
    counter-increment: toc1;
    counter-reset: toc2;
  }
  #toc > li > a::before {
    content: counter(toc1) " ";
  }
  #toc > li > a[href="#preface"]::before {
    counter-reset: toc1;
    content: "";
  }
  #toc > li > ul > li {
    counter-increment: toc2;
    counter-reset: toc3;
  }
  #toc > li > ul > li > a::before {
    content: counter(toc1) "." counter(toc2) " ";
  }
  #toc > li > ul > li > ul > li {
    counter-increment: toc3;
    counter-reset: toc4;
  }
  #toc > li > ul > li > ul > li > a::before {
    content: counter(toc1) "." counter(toc2) "." counter(toc3) " ";
  }
  #toc > li > ul > li > ul > li > ul > li {
    counter-increment: toc4;
    counter-reset: toc5;
  }
  #toc > li > ul > li > ul > li > ul > li > a::before {
    content: counter(toc1) "." counter(toc2) "." counter(toc3) "." counter(toc4) " ";
  }
  #toc > li > ul > li > ul > li > ul > li > ul > li {
    counter-increment: toc5;
    counter-reset: toc6;
  }
  #toc > li > ul > li > ul > li > ul > li > ul > li > a::before {
    content: counter(toc1) "." counter(toc2) "." counter(toc3) "." counter(toc4) "." counter(toc5) " ";
  }
  a[href="#document-top"] {
    display: none;
  }
  h1 {
    margin-bottom: 50px;
    border-bottom: 0;
  }
  h2 {
    margin-bottom: 30px;
    page-break-before: always;
    border-bottom: 0;
  }
  h2,
  h3,
  h4,
  h5,
  h6 {
    page-break-after: avoid;
  }
  @page {
    size: A4;
    margin: 50pt 30pt 50pt 30pt;
    padding-top: 20pt;
    @bottom-right {
      content: counter(page);
      font-family: 'sans-serif';
      font-size: 0.8em;
    }
  }
}
</style>
  <style>.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }a[href^='#document-top']:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 448 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%234183c4' d='M246.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 109.3 361.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160zm160 352l-160-160c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 301.3 361.4 438.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3z' /%3E %3C/svg%3E") }
a[href^='http']:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%234183c4' d='M352 256c0 22.2-1.2 43.6-3.3 64H163.3c-2.2-20.4-3.3-41.8-3.3-64s1.2-43.6 3.3-64H348.7c2.2 20.4 3.3 41.8 3.3 64zm28.8-64H503.9c5.3 20.5 8.1 41.9 8.1 64s-2.8 43.5-8.1 64H380.8c2.1-20.6 3.2-42 3.2-64s-1.1-43.4-3.2-64zm112.6-32H376.7c-10-63.9-29.8-117.4-55.3-151.6c78.3 20.7 142 77.5 171.9 151.6zm-149.1 0H167.7c6.1-36.4 15.5-68.6 27-94.7c10.5-23.6 22.2-40.7 33.5-51.5C239.4 3.2 248.7 0 256 0s16.6 3.2 27.8 13.8c11.3 10.8 23 27.9 33.5 51.5c11.6 26 20.9 58.2 27 94.7zm-209 0H18.6C48.6 85.9 112.2 29.1 190.6 8.4C165.1 42.6 145.3 96.1 135.3 160zM8.1 192H131.2c-2.1 20.6-3.2 42-3.2 64s1.1 43.4 3.2 64H8.1C2.8 299.5 0 278.1 0 256s2.8-43.5 8.1-64zM194.7 446.6c-11.6-26-20.9-58.2-27-94.6H344.3c-6.1 36.4-15.5 68.6-27 94.6c-10.5 23.6-22.2 40.7-33.5 51.5C272.6 508.8 263.3 512 256 512s-16.6-3.2-27.8-13.8c-11.3-10.8-23-27.9-33.5-51.5zM135.3 352c10 63.9 29.8 117.4 55.3 151.6C112.2 482.9 48.6 426.1 18.6 352H135.3zm358.1 0c-30 74.1-93.6 130.9-171.9 151.6c25.5-34.2 45.2-87.7 55.3-151.6H493.4z' /%3E %3C/svg%3E") }
a[href*='github.com']:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 496 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%234183c4' d='M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z' /%3E %3C/svg%3E") }
a[href$='.zip']:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%234183c4' d='M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM96 48c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16zm-6.3 71.8c3.7-14 16.4-23.8 30.9-23.8h14.8c14.5 0 27.2 9.7 30.9 23.8l23.5 88.2c1.4 5.4 2.1 10.9 2.1 16.4c0 35.2-28.8 63.7-64 63.7s-64-28.5-64-63.7c0-5.5 .7-11.1 2.1-16.4l23.5-88.2zM112 336c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H112z' /%3E %3C/svg%3E") }</style>
  
  <style>
.reference-title {
  font-size: 120%;  
  font-weight: 600;
}
.mn-terminal {
    -moz-background-clip: padding;
    -webkit-background-clip: padding-box;
    background-clip: padding-box;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    border-radius: 3px;
    margin: 10px auto;
    padding: 2px 4px 0 4px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
    color: #eee;
    background-color: #222;
    border: 1px solid #ccc;
    white-space: pre;
    padding: 0 3px;
    border: 2px solid #999;
    border-top: 10px solid #999;
}
.mn-terminal p {
  margin: 0 auto;  
}
.mn-terminal p, .mn-terminal p:first-child {
    margin-top: 0;
    margin-bottom: 0;
    text-shadow: none;
    font-weight: normal;
    font-family: "Source Code Pro", "Monaco", "DejaVu Sans Mono", "Courier New", monospace;
    font-size: 85%;
    color: #eee;
}
</style>

  
</head>
<body class="headings">
  <div id="container">
    <a id="document-top"></a>
    <div id="header"><h1>mn Language Developer Guide</h1></div>
    <div id="toc"><ul>
 <li>
 <ul>
  <li><a href="#About-mn">About mn</a>
  <ul>
   <li><a href="#Why?">Why?</a></li>
   <li><a href="#How?">How?</a></li>
   <li><a href="#Who?">Who?</a></li>
   <li><a href="#When?">When?</a></li>
  </ul>
  </li>
  <li><a href="#Get-Started">Get Started</a>
  <ul>
   <li><a href="#Building-from-source">Building from source</a></li>
   <li><a href="#Running-the-mn-REPL">Running the mn REPL</a></li>
   <li><a href="#Executing-an-mn-Program">Executing an mn Program</a></li>
  </ul>
  </li>
  <li><a href="#Learning-the-mn-Language">Learning the mn Language</a>
  <ul>
   <li><a href="#Data-Types">Data Types</a></li>
   <li><a href="#Operators">Operators</a></li>
   <li><a href="#Definitions">Definitions</a>
   <ul>
    <li><a href="#Lexical-scoping-and-binding">Lexical scoping and binding</a></li>
   </ul>
   </li>
   <li><a href="#Control-Flow">Control Flow</a>
   <ul>
    <li><a href="#Conditionals">Conditionals</a></li>
    <li><a href="#Loops">Loops</a>
</li>
   </ul>
   </li>
  </ul>
  </li>
  <li><a href="#Extending-mn">Extending mn</a>
  <ul>
   <li><a href="#Implementing-new-mn-symbols-using-mn-itself">Implementing new mn symbols using mn itself</a></li>
   <li><a href="#Embedding-mn-in-your-Nim-program">Embedding mn in your Nim program</a></li>
  </ul>
  </li>
  <li><a href="#Reference">Reference</a>
  <ul>
   <li><a href="#Notation">Notation</a>
   <ul>
    <li><a href="#Types-and-Values">Types and Values</a></li>
    <li><a href="#Suffixes">Suffixes</a></li>
   </ul>
   </li>
   <li><a href="#Symbols">Symbols</a></li>
  </ul>
  </li>
 </ul>
 </li>
</ul>
</div>
    <div id="main">




<a id="About-mn"></a>
<h2>About mn<a href="#document-top" title="Go to top"></a></h2>

<p><em>mn</em> is a concatenative, fully-homoiconic, functional, interpreted programming language.</p>

<p>This basically means that:</p>

<ul>
<li>It is based on a somewhat obscure and slightly unintuitive programming paradigm, think of <a href="http://www.forth.org/">Forth</a>, <a href="http://factorcode.org/">Factor</a> and <a href="http://www.kevinalbrecht.com/code/joy-mirror/">Joy</a> but with parentheses for an extra <a href="https://common-lisp.net/">Lisp</a>y flavor.</li>
<li>Programs written in <em>mn</em> are actually written using <em>quotations</em>, i.e. lists.</li>
<li>It comes with map, filter, find, and loads of other functional goodies.</li>
<li>It is probably slower than the average production-ready programming language.</li>
</ul>


<a id="Why?"></a>
<h3>Why?<a href="#document-top" title="Go to top"></a></h3>

<p><em>mn</em> is <a href="https://min-lang.org">min</a>&rsquo;s little brother. When I started implementing min, I wanted to create a small but practical programming language you could use for shell scripting and perform common tasks. As more feature requests piled in, I noticed it slowly became more and more comprehensive and <em>batteries-included</em>: I slowly swapped small, less-unknown and somewhat quirky libraries used for regular expressions, compression etc. with more complete and well-known ones, added HTTPS support (and OpenSSL), improved runtime checks when creating symbols, enhanced the type system, and so on. While min can now be used on its own to create quite complex programs, it became less minimal than originally intended.</p>

<p>I tried to add compilation variants to reduce the modules to include but that made it more difficult to maintain and still included complex constructs like dictionaries and the full type system, so one day I decided to&hellip; fork it! And that&rsquo;s how <em>mn</em> was born.</p>

<p>Is <em>mn</em> the <em>successor</em> of min? No! As I said, it is min&rsquo;s little brother, and it has its own (somewhat more minimalist) life. If you want to create a quick script to glue some shell commands together, then <em>mn</em> is definitely the fastest way to do so. If you want to use the concatenative paradigm to create more complex applications, then min comes with a much bigger toolbox.</p>

<a id="How?"></a>
<h3>How?<a href="#document-top" title="Go to top"></a></h3>

<p><em>mn</em> is developed entirely in <a href="https://nim-lang.org">Nim</a> and started off as a fork of the <a href="https://min-lang.org">min</a> programming language. I took the v0.35.0 codebase and started removing stuff, including the only vowel used in the language name. What else was removed you ask? Let&rsquo;s see&hellip; compared to min, <em>mn</em>:</p>

<ul>
<li>does not have dictionaries</li>
<li>does not have modules</li>
<li>does not have <strong>require</strong>, <strong>include</strong>, etc.</li>
<li>does not support compilation via Nim</li>
<li>does not have sigils</li>
<li>does not have an <strong>operator</strong> symbol, only <strong>lambda</strong></li>
<li>does not have any dependency from third-party code</li>
<li>does not have type classes or type expressions, except for unions of basic types</li>
<li>does not have JSON interoperability</li>
<li>does not have error handling, i.e. a try/catch mechanism</li>
<li>does not have any built-in support for networking, cryptography, etc.</li>
<li>does not have a fancy REPL with autocompletion</li>
</ul>


<p>What <em>does</em> it have then? Well, <em>mn</em> provides:</p>

<ul>
<li>exactly 72 symbols, nearly all of which are borrowed from min</li>
<li>file reading/writing (via the <a href="#mn-symbol-id-read">read</a> and <a href="#mn-symbol-id-write">write</a> symbols)</li>
<li>stdin reading (<a href="#mn-symbol-id-gets">gets</a>) and writing (<a href="#mn-symbol-id-puts">puts</a>)</li>
<li>external command execution via <a href="#mn-symbol-id-run">run</a> and automatic command expansion for all strings wrapped in square brackets</li>
<li>string evaluation via <a href="#mn-symbol-id-eval">eval</a></li>
<li>string interpolation via <a href="#mn-symbol-id-interpolate">interpolate</a></li>
<li>a basic REPL</li>
</ul>


<a id="Who?"></a>
<h3>Who?<a href="#document-top" title="Go to top"></a></h3>

<p><em>mn</em> was created and implemented by <a href="https://cevasco.org">Fabio Cevasco</a>.</p>

<a id="When?"></a>
<h3>When?<a href="#document-top" title="Go to top"></a></h3>

<p><em>mn</em> source code <a href="https://github.com/h3rald/mn">repository</a> was created on March 23<sup>rd</sup> 2021.</p>

<a id="Get-Started"></a>
<h2>Get Started<a href="#document-top" title="Go to top"></a></h2>

<p>You can download one of the following pre-built <em>mn</em> binaries:</p>

<ul>
<li><a href="https://github.com/h3rald/mn/releases/download/v0.4.0/mn_v0.4.0_macosx_x64.zip">mn v0.4.0 for macOS (x64)</a></li>
<li><a href="https://github.com/h3rald/mn/releases/download/v0.4.0/mn_v0.4.0_windows_x64.zip">mn v0.4.0 for Windows (x64)</a></li>
<li><a href="https://github.com/h3rald/mn/releases/download/v0.4.0/mn_v0.4.0_linux_x64.zip">mn v0.4.0 for Linux (x64)</a></li>
</ul>


<a id="Building-from-source"></a>
<h3>Building from source<a href="#document-top" title="Go to top"></a></h3>

<p>Alternatively, you can build <em>mn</em> from source as follows:</p>

<ol>
<li>Download and install <a href="https://nim-lang.org">Nim</a>.</li>
<li>Clone the <em>mn</em> <a href="https://github.com/h3rald/mn">repository</a>.</li>
<li>Navigate to the <em>mn</em> repository local folder.</li>
<li>Run <strong>./build.sh</strong>.</li>
</ol>


<a id="Running-the-mn-REPL"></a>
<h3>Running the mn REPL<a href="#document-top" title="Go to top"></a></h3>

<p>To start the <em>mn</em> REPL, run <span class="cmd">mn</span> with no arguments. You will be presented with a prompt displaying the path to the current directory:</p>

<div class="mn-terminal"><p>mn v0.4.0
<span class="prompt">::</span></p></div>

<p>You can type <em>mn</em> code and press <span class="kbd">ENTER</span> to evaluate it immediately:</p>

<div class="mn-terminal"><p><span class="prompt">::</span> 2 2 +
4
<span class="prompt">::</span></p></div>

<p>The result of each operation will be placed on top of the stack, and it will be available to subsequent operation</p>

<div class="mn-terminal"><p><span class="prompt">::</span> dup *
16
<span class="prompt">::</span></p></div>

<p>To exit <em>mn</em> shell, press <span class="kbd">CTRL+C</span> or type <span class="cmd">0 exit</span> and press <span class="kbd">ENTER</span>.</p>

<a id="Executing-an-mn-Program"></a>
<h3>Executing an mn Program<a href="#document-top" title="Go to top"></a></h3>

<p>To execute a <em>mn</em> script, you can:</p>

<ul>
<li>Run <code>mn -e:"... program ..."</code> to execute a program inline.</li>
<li>Run <code>mn myfile.mn</code> to execute a program contained in a file.</li>
</ul>


<p><em>mn</em> also supports running programs from standard input, so the following command can also be used (on Unix-like system) to run a program saved in <span class="file">myfile.mn</span>:</p>

<div class="mn-terminal"><p><span class="prompt">$</span> cat myfile.mn | mn</p></div>

<a id="Learning-the-mn-Language"></a>
<h2>Learning the mn Language<a href="#document-top" title="Go to top"></a></h2>

<p><em>mn</em> is a stack-based, concatenative programming language that uses postfix notation. If you already know <a href="http://www.forth.org/">Forth</a>, <a href="http://factorcode.org/">Factor</a> or <a href="http://www.kevinalbrecht.com/code/joy-mirror/">Joy</a>, or if you ever used an <a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation">RPN</a> calculator, then <em>mn</em> will look somewhat familiar to you.</p>

<p>If not, well, here&rsquo;s how a short <em>mn</em> program looks like:</p>

<pre><code>; This is a comment
(1 2 3 4 5) (dup *) map
#| This is a...
   ...multiline comment |#
</code></pre>

<p>This program returns a list containing the square values of the first five integer numbers:</p>

<pre><code>(1 4 9 16 25)
</code></pre>

<p>Let&rsquo;s see how it works:</p>

<ol>
<li>First, a list containing the first five integers is pushed on the stack.</li>
<li>Then, another list containing two symbols (<code>dup</code> and <code>*</code>) is pushed on the stack. This constitutes a quoted program which, when executed duplicates the first element on the stack &mdash; this is done by <code>dup</code>&mdash; and then multiplies &mdash; with <code>*</code>&mdash; the two elements together.</li>
<li>Finally, the symbol <code>map</code> is pushed on the stack. Map takes a list of elements and a quoted program and applies the program to each element.</li>
</ol>


<p>Note that:</p>

<ul>
<li>There are no variable assignments.</li>
<li>elements are pushed on the stack one by one.</li>
<li>Parentheses are used to group one or more elements together so that they are treated as a single element and they are not evaluated immediately.</li>
<li><em>Symbols</em> (typically single words, or several words joined by dashes) are used to execute code that performs operations on the whole stack.</li>
</ul>


<p>Unlike more traditional programming languages, in a concatenative programming language, there is no inherent need for variables or named parameters, as symbols act as stack symbols that consume elements that are placed in order on top of a stack.</p>

<a id="Data-Types"></a>
<h3>Data Types<a href="#document-top" title="Go to top"></a></h3>

<p>The following data types are availanle in <em>mn</em> (with the corresponding shorthand symbols used in symbol signatures in brackets):</p>

<dl>
<dt>null (null)</dt>
<dd>null value.</dd>
<dt>boolean (bool)</dt>
<dd><strong>true</strong> or <strong>false</strong>.</dd>
<dt>integer (int)</dt>
<dd>A 64-bit integer number like 1, 27, or -15.</dd>
<dt>float (flt)</dt>
<dd>A 64-bit floating-point number like 3.14 or -56.9876.</dd>
<dt>string (str)</dt>
<dd>A series of characters wrapped in double quotes: &ldquo;Hello, World!&rdquo;.</dd>
<dt>quotation (quot)</dt>
<dd>A list of elements, which may also contain symbols. Quotations can be used to create heterogenous lists of elements of any data type, and also to create a block of code that will be evaluated later on (quoted program). Example: <code>(1 2 3 + \*)</code></dd>
<dt>command (cmd)</dt>
<dd>A command string wrapped in square brackets that will be immediately executed on the current shell and converted into the command standard output. Example: <code>[ls -a]</code></dd>
</dl>

<a id="Operators"></a>
<h3>Operators<a href="#document-top" title="Go to top"></a></h3>

<p>Every <em>mn</em> program needs <em>operators</em> to:</p>

<ul>
<li>Manipulate elements on the stack</li>
<li>Perform operations on data</li>
<li>Provide side effects (read/print to standard input/output/files, etc.)</li>
</ul>


<p>An <em>mn</em> symbol is a single word that is either provided by <em>mn</em> like <code>dup</code> or defined by the user. User-defined symbols must:</p>

<ul>
<li>Start with a letter</li>
<li>Contain zero or more letters, numbers and/or underscores.</li>
</ul>


<p>To define a new operator symbol, you can use the <a href="#mn-symbol-id-lambda">lambda</a> symbol. For example, the following symbol defines a quotation that can be used to calculate the square value of a number.</p>

<pre><code> (dup *) (square) lambda
</code></pre>

<p>Note that this feels like using <a href="#mn-symbol-id-let">let</a>, but the main difference between <a href="#mn-symbol-id-lambda">lambda</a> and <a href="#mn-symbol-id-let">let</a> is that <code>lambda</code> only works on quotations and it doesn&rsquo;t auto-quote them, so that they are immediately evaluated when the corresponding symbol is pushed on the stack.</p>

<div class="tip"><p>Tip</p>

<p>You can use <a href="#mn-symbol-id-lambda-bind">lambda-bind</a> to re-set a previously set lambda.</p></div>

<a id="Definitions"></a>
<h3>Definitions<a href="#document-top" title="Go to top"></a></h3>

<p>Being a concatenative language, <em>mn</em> does not really need named parameters or variables: symbols just pop elements off the main stack in order, and that&rsquo;s normally enough. There is however one small problem with the traditional concatenative paradigm; consider the following program for example:</p>

<pre><code> dup
 () cons "Compiling in $# mode..." swap interpolate puts pop
 () cons "nim -d:$# c test.nim" swap interpolate run
</code></pre>

<p>This program takes an string containing either &ldquo;release&rdquo; or &ldquo;development&rdquo; and attempts to build the file <strong>test.nim</strong> for it. Sure, it is remarkable that no variables are needed for such a program, but it is not very readable: because no variables are used, it is often necessary to make copies of elements and push them to the end of the stack &ndash; that&rsquo;s what the <a href="#mn-symbol-id-dup">dup</a> and <a href="#mn-symbol-id-swap">swap</a> are used for.</p>

<p>The good news is that you can use the <a href="#mn-symbol-id-let">let</a> symbol to define new symbols, and symbols can also be set to literals of course.</p>

<p>Consider the following program:</p>

<pre><code> (mode) let
 "Compiling in $# mode..." (mode) interpolate puts pop
 "nim -d:$# c test.nim" (mode) interpolate run
</code></pre>

<p>In this case, the first element on the stack is saved to a symbol called <strong>mode</strong>, which is then used whenever needed in the rest of the program.</p>

<a id="Lexical-scoping-and-binding"></a>
<h4>Lexical scoping and binding<a href="#document-top" title="Go to top"></a></h4>

<p>mn, like many other programming languages, uses <a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scope_vs._dynamic_scope">lexical scoping</a> to resolve symbols.</p>

<p>Consider the following program:</p>

<pre><code> 4 (a) let
 ( 
   a 3 + (a) let
   (
      a 1 + (a) let
      (a dup * (a) let) dequote
   ) dequote
 ) dequote
</code></pre>

<p>&hellip;What is the value of the symbol <code>a</code> after executing it?</p>

<p>Simple: <code>4</code>. Every quotation defines its own scope, and in each scope, a new variable called <code>a</code> is defined. In the innermost scope containing the quotation <code>(a dup * (a) let)</code> the value of <code>a</code> is set to <code>64</code>, but this value is not propagated to the outer scopes. Note also that the value of <code>a</code> in the innermost scope is first retrieved from the outer scope (8).</p>

<p>If we want to change the value of the original <code>a</code> symbol defined in the outermost scope, we have to use the <a href="#mn-symbol-id-bind">bind</a>, so that the program becomes the following:</p>

<pre><code> 4 (a) let ;First definition of the symbol a
 (
   a 3 + (a) bind ;The value of a is updated to 7.
   (
     a 1 + (a) bind ;The value of a is updated to 8
     (a dup * (a) bind) dequote ;The value of a is now 64
   ) dequote
 ) dequote
</code></pre>

<a id="Control-Flow"></a>
<h3>Control Flow<a href="#document-top" title="Go to top"></a></h3>

<p><em>mn</em> provides some symbols that can be used for the most common control flow statements. Unlike most programming languages, <em>mn</em> does not differentiate between functions and statements &ndash; control flow statements are just ordinary symbols that manipulate the main stack.</p>

<a id="Conditionals"></a>
<h4>Conditionals<a href="#document-top" title="Go to top"></a></h4>

<p>The <a href="#mn-symbol-id-when">when</a> symbol can be used to implement conditional statements.</p>

<p>For example, consider the following program:</p>

<pre><code> (
   "Unknown" (system) let 
    [uname] (uname) let
    (uname "MINGW" indexof -1 !=)
      ("Windows" (system) bind)  
    when
    (uname "Linux" indexof -1 !=)
      ("Linux" (system) bind)  
    when
    (uname "Darwin" indexof -1 !=)
      ("macOS" (system) bind)  
    when
   "The current OS is $#" (system) interpolate puts
 ) (display-os) lambda
</code></pre>

<p>This program defines a symbol <code>display-os</code> that execute the <strong>uname</strong> system command to discover the operating system and outputs a message.</p>

<a id="Loops"></a>
<h4>Loops<a href="#document-top" title="Go to top"></a></h4>

<p>The following symbols provide ways to implement common loops:</p>

<ul>
<li><a href="#mn-symbol-id-foreach">foreach</a></li>
<li><a href="#mn-symbol-id-while">while</a></li>
</ul>


<p>For example, consider the following program:</p>

<pre><code> (
   (n) let
   1 (i) let
   1 (f) let
   (i n &lt;=)
   (
     f i * (f) bind 
     i 1 + (i) bind
   ) while
   f
 ) (factorial) lambda
</code></pre>

<p>This program defines a symbol <code>factorial</code> that calculates the factorial of an integer iteratively using the symbol <a href="#mn-symbol-id-while">while</a>.</p>

<a id="Extending-mn"></a>
<h2>Extending mn<a href="#document-top" title="Go to top"></a></h2>

<p><em>mn</em> provides a fairly very basic standard library. If you want to extend it, you basically have the following options:</p>

<ul>
<li>Implementing new <em>mn</em> symbols using <em>mn</em> itself</li>
<li>Embedding <em>mn</em> in your <a href="https://nim-lang.org">Nim</a> program</li>
</ul>


<a id="Implementing-new-mn-symbols-using-mn-itself"></a>
<h3>Implementing new mn symbols using mn itself<a href="#document-top" title="Go to top"></a></h3>

<p>When you just want to create more high-level <em>mn</em> symbol using functionalities that are already available in mn, the easiest way is to create your own reusable <em>mn</em> symbols in separate files.</p>

<pre><code>(dup *)             (pow2) lambda
(dup dup * *)       (pow3) lambda
(dup dup dup * * *) (pow4) lambda
</code></pre>

<p>Save your code to a file (e.g. <em>quickpows.mn</em>) and you can use it in other nim files using the <a href="#mn-symbol-id-read">read</a> symbol to read it and then the <a href="#mn-symbol-id-eval">eval</a> to evaluate the program in the current scope:</p>

<pre><code>"quickpows.mn" read eval

2 pow3 pow2 puts ;prints 64
</code></pre>

<a id="Embedding-mn-in-your-Nim-program"></a>
<h3>Embedding mn in your Nim program<a href="#document-top" title="Go to top"></a></h3>

<p>If you&rsquo;d like to use <em>mn</em> as a scripting language within your own program, and maybe extend it by implementing additional symbols, you can use <em>mn</em> as a Nim library.</p>

<p>To do so:</p>

<ol>
<li>Download and install <a href="https://nim-lang.org">Nim</a></li>
<li>Import it in your Nim file.</li>
<li>Implement a new <code>proc</code> to define the module.</li>
</ol>


<p>The following code is adapted from <a href="https://github.com/h3rald/hastysite">HastySite</a> (which internally uses <a href="https://min-lang.org">min</a>) and shows how to define a new <code>hastysite</code> module containing some symbols (<code>preprocess</code>, <code>postprocess</code>, <code>process-rules</code>, &hellip;):</p>

<pre><code>import mn

proc hastysite_module*(i: In, hs1: HastySite) =
  var hs = hs1
  let def = i.define()

  def.symbol("preprocess") do (i: In):
    hs.preprocess()

   def.symbol("postprocess") do (i: In):
    hs.postprocess()

  def.symbol("process-rules") do (i: In):
    hs.interpret(hs.files.rules)

  # ...

  def.finalize("hastysite")
</code></pre>

<p>Then you need to:</p>

<ol>
<li>Instantiate a new <em>mn</em> interpreter using the <code>newMnInterpreter</code> proc.</li>
<li>Run the <code>proc</code> used to define the module.</li>
<li>Call the <code>interpret</code> method to interpret a <em>mn</em> file or string:</li>
</ol>


<pre><code>proc interpret(hs: HastySite, file: string) =
  var i = newMnInterpreter(file, file.parentDir)
  i.hastysite_module(hs)
  i.interpret(newFileStream(file, fmRead))
</code></pre>

<div class="tip"><p>Tip</p>

<p>For more information on how to create new symbols with Nim, have a look in the <a href="https://github.com/h3rald/mn/tree/master/mnpkg/lang.nim">lang.nim</a> file in the <em>mn</em> repository, which contains all the symbols included in <em>mn</em>.</p></div>

<a id="Reference"></a>
<h2>Reference<a href="#document-top" title="Go to top"></a></h2>

<a id="Notation"></a>
<h3>Notation<a href="#document-top" title="Go to top"></a></h3>

<p>The following notation is used in the signature of all <em>mn</em> symbols:</p>

<a id="Types-and-Values"></a>
<h4>Types and Values<a href="#document-top" title="Go to top"></a></h4>

<dl>
<dt>&#x2205;</dt>
<dd>No value.</dd>
<dt><span class="kwd">null</span></dt>
<dd>null value</dd>
<dt><span class="kwd">a</span></dt>
<dd>A value of any type.</dd>
<dt><span class="kwd">bool</span></dt>
<dd>A boolean value</dd>
<dt><span class="kwd">int</span></dt>
<dd>An integer value.</dd>
<dt><span class="kwd">flt</span></dt>
<dd>A float value.</dd>
<dt><span class="kwd">num</span></dt>
<dd>A numeric (integer or float) value.</dd>
<dt><span class="kwd">str</span></dt>
<dd>A string value.</dd>
<dt><span class="kwd">&apos;sym</span></dt>
<dd>A string-like value (string or quoted symbol).</dd>
<dt><span class="kwd">quot</span></dt>
<dd>A quotation (also expressed as parenthesis enclosing other values).</dd>
</dl>

<a id="Suffixes"></a>
<h4>Suffixes<a href="#document-top" title="Go to top"></a></h4>

<p>The following suffixes can be placed at the end of a value or type to indicate ordering or quantities.</p>

<dl>
<dt><span class="kwd"><sub>1</sub></span></dt>
<dd>The first value of the specified type.</dd>
<dt><span class="kwd"><sub>2</sub></span></dt>
<dd>The second value of the specified type.</dd>
<dt><span class="kwd"><sub>3</sub></span></dt>
<dd>The third value of the specified type.</dd>
<dt><span class="kwd"><sub>4</sub></span></dt>
<dd>The fourth value of the specified type.</dd>
<dt><span class="kwd"><sub>?</sub></span></dt>
<dd>Zero or one.</dd>
<dt><span class="kwd"><sub>*</sub></span></dt>
<dd>Zero or more.</dd>
<dt><span class="kwd"><sub>+</sub></span></dt>
<dd>One or more</dd>
</dl>

<a id="Symbols"></a>
<h3>Symbols<a href="#document-top" title="Go to top"></a></h3>

<p><a id="mn-symbol-id-&amp;gt;"></a>
<span class="reference-title">&gt;</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is greater than <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p>

<div class="note"><p>Note</p>

<p>Only comparisons among two numbers or two strings are supported.</p></div></div>

<p><a id="mn-symbol-id-&amp;gt;="></a>
<span class="reference-title">&gt;=</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is greater than or equal to <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p>

<div class="note"><p>Note</p>

<p>Only comparisons among two numbers or two strings are supported.</p></div></div>

<p><a id="mn-symbol-id-&amp;lt;"></a>
<span class="reference-title">&lt;</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is smaller than <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p>

<div class="note"><p>Note</p>

<p>Only comparisons among two numbers or two strings are supported.</p></div></div>

<p><a id="mn-symbol-id-&amp;lt;="></a>
<span class="reference-title">&lt;=</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is smaller than or equal to <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p>

<div class="note"><p>Note</p>

<p>Only comparisons among two numbers or two strings are supported.</p></div></div>

<p><a id="mn-symbol-id-=="></a>
<span class="reference-title">==</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is equal to <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="mn-symbol-id-!="></a>
<span class="reference-title">!=</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is not equal to <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="mn-symbol-id-&amp;&amp;"></a>
<span class="reference-title">&amp;&amp;</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Assuming that <span class="kwd">quot</span> is a quotation of quotations each evaluating to a boolean value, it pushes <span class="kwd">true</span> on the stack if they all evaluate to <span class="kwd">true</span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="mn-symbol-id-\|\| "></a>
<span class="reference-title">|| </span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Assuming that <span class="kwd">quot</span> is a quotation of quotations each evaluating to a boolean value, it pushes <span class="kwd">true</span> on the stack if any evaluates to <span class="kwd">true</span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="mn-symbol-id-!"></a>
<span class="reference-title">!</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">bool<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">bool<sub>2</sub></span></span></p>

<p>Negates <span class="kwd">bool<sub>1</sub></span>.</p></div>

<p><a id="mn-symbol-id-+"></a>
<span class="reference-title">+</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <span class="kwd">num<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>3</sub></span></span></p>

<p>Sums <span class="kwd">num<sub>1</sub></span> and <span class="kwd">num<sub>2</sub></span>.</p></div>

<p><a id="mn-symbol-id--"></a>
<span class="reference-title">-</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <span class="kwd">num<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>3</sub></span></span></p>

<p>Subtracts <span class="kwd">num<sub>2</sub></span> from <span class="kwd">num<sub>1</sub></span>.</p></div>

<p><a id="mn-symbol-id--inf"></a>
<span class="reference-title">-inf</span></p>

<div class="symbol"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">num</span></span></p>

<p>Returns negative infinity.</p></div>

<p><a id="mn-symbol-id-&amp;ast;"></a>
<span class="reference-title">&ast;</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <span class="kwd">num<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>3</sub></span></span></p>

<p>Multiplies <span class="kwd">num<sub>1</sub></span> by <span class="kwd">num<sub>2</sub></span>.</p></div>

<p><a id="mn-symbol-id-/"></a>
<span class="reference-title">/</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <span class="kwd">num<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>3</sub></span></span></p>

<p>Divides <span class="kwd">num<sub>1</sub></span> by <span class="kwd">num<sub>2</sub></span>.</p></div>

<p><a id="mn-symbol-id-+inf"></a>
<span class="reference-title">+inf</span></p>

<div class="symbol"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">num</span></span></p>

<p>Returns infinity.</p></div>

<p><a id="mn-symbol-id-nan"></a>
<span class="reference-title">nan</span></p>

<div class="symbol"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> nan</span></p>

<p>Returns <strong>NaN</strong> (not a number).</p></div>

<p><a id="mn-symbol-id-append"></a>
<span class="reference-title">append</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Appends <span class="kwd">str<sub>1</sub></span> to the end of file <span class="kwd">str<sub>2</sub></span>.</p></div>

<p><a id="mn-symbol-id-apply"></a>
<span class="reference-title">apply</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> (<span class="kwd">a<sub>*</sub></span>)</span></p>

<p>Returns a new quotation obtained by evaluating each element of <span class="kwd">quot</span> in a separate stack.</p></div>

<p><a id="mn-symbol-id-args"></a>
<span class="reference-title">args</span></p>

<div class="symbol"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Returns a list of all arguments passed to the current program.</p></div>

<p><a id="mn-symbol-id-bind"></a>
<span class="reference-title">bind</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Binds the specified value (auto-quoted) to an existing symbol <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="mn-symbol-id-concat"></a>
<span class="reference-title">concat</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Concatenates <span class="kwd">quot<sub>1</sub></span> with <span class="kwd">quot<sub>2</sub></span>.</p></div>

<p><a id="mn-symbol-id-cons"></a>
<span class="reference-title">cons</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> (<span class="kwd">a<sub>*</sub></span>) <strong>&rArr;</strong> (<span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>*</sub></span>)</span></p>

<p>Prepends <span class="kwd">a<sub>1</sub></span> to the quotation on top of the stack.</p></div>

<p><a id="mn-symbol-id-cpu"></a>
<span class="reference-title">cpu</span></p>

<div class="symbol"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the host CPU. It can be one of the following strings i386, alpha, powerpc, powerpc64, powerpc64el, sparc, amd64, mips, mipsel, arm, arm64.</p></div>

<p><a id="mn-symbol-id-dip"></a>
<span class="reference-title">dip</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> (<span class="kwd">a<sub>2</sub></span>) <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Removes the first and second element from the stack, dequotes the first element, and restores the second element.</p></div>

<p><a id="mn-symbol-id-dup"></a>
<span class="reference-title">dup</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Duplicates the first element on the stack.</p></div>

<p><a id="mn-symbol-id-dequote"></a>
<span class="reference-title">dequote</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Pushes the contents of quotation <span class="kwd">quot</span> on the stack.</p>

<p>Each element is pushed on the stack one by one. If any error occurs, <span class="kwd">quot</span> is restored on the stack.</p></div>

<p><a id="mn-symbol-id-eval"></a>
<span class="reference-title">eval</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Parses and interprets <span class="kwd">str</span>.</p></div>

<p><a id="mn-symbol-id-exit"></a>
<span class="reference-title">exit</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Exits the program or shell with <span class="kwd">int</span> as return code.</p></div>

<p><a id="mn-symbol-id-expect"></a>
<span class="reference-title">expect</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Validates the first <em>n</em> elements of the stack against the type descriptions specified in <span class="kwd">quot<sub>1</sub></span> (<em>n</em> is <span class="kwd">quot<sub>1</sub></span>&rsquo;s length) and if all the elements are valid returns them wrapped in <span class="kwd">quot<sub>2</sub></span> (in reverse order).</p>

<div class="tip"><p>Tip</p>

<p>You can specify two or more matching types by separating combined together in a type union, e.g.: <code>string|quot</code></p></div>

<div class="sidebar"><p>Example</p>

<p>Assuming that the following elements are on the stack (from top to bottom):</p>

<p><code>1 "test" 3.4</code></p>

<p>the following program evaluates to <code>true</code>:</p>

<p><code>(int string num) expect (3.4 "test" 1) ==</code></p></div></div>

<p><a id="mn-symbol-id-filter"></a>
<span class="reference-title">filter</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Returns a new quotation <span class="kwd">quot<sub>3</sub></span> containing all elements of <span class="kwd">quot<sub>1</sub></span> that satisfy predicate <span class="kwd">quot<sub>2</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(34 2 6 8 12)</code> on the stack:</p>

<pre><code>(1 37 34 2 6 8 12 21)
(2 / 0 ==) filter
</code></pre></div></div>

<p><a id="mn-symbol-id-foreach"></a>
<span class="reference-title">foreach</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Applies the quotation <span class="kwd">quot<sub>2</sub></span> to each element of <span class="kwd">quot<sub>1</sub></span>.</p></div>

<p><a id="mn-symbol-id-get"></a>
<span class="reference-title">get</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Returns the <em>n<sup>th</sup></em> element of <span class="kwd">quot</span> (zero-based).</p></div>

<p><a id="mn-symbol-id-gets"></a>
<span class="reference-title">gets</span></p>

<div class="symbol"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Reads a line from STDIN and places it on top of the stack as a string.</p></div>

<p><a id="mn-symbol-id-getstack"></a>
<span class="reference-title">getstack</span></p>

<div class="symbol"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> (<span class="kwd">a<sub>*</sub></span>)</span></p>

<p>Puts a quotation containing the contents of the stack on the stack.</p></div>

<p><a id="mn-symbol-id-indexof"></a>
<span class="reference-title">indexof</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>If <span class="kwd">str<sub>2</sub></span> is contained in <span class="kwd">str<sub>1</sub></span>, returns the index of the first match or -1 if no match is found.</p></div>

<p><a id="mn-symbol-id-interpolate"></a>
<span class="reference-title">interpolate</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">str</span> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Substitutes the placeholders included in <span class="kwd">str</span> with the values in <span class="kwd">quot</span>.</p>

<div class="note"><p>Notes</p>

<ul>
<li>If <span class="kwd">quot</span> contains symbols or quotations, they are interpreted.</li>
<li>You can use the <code>$#</code> placeholder to indicate the next placeholder that has not been already referenced in the string.</li>
<li>You can use named placeholders like <code>$pwd</code>, but in this case <span class="kwd">quot</span> must contain a quotation containing both the placeholder names (odd items) and the values (even items).</li>
</ul>
</div>

<div class="sidebar"><p>Example</p>

<p>The following code (executed in a directory called &lsquo;/Users/h3rald/Development/mn&rsquo; containing 15 files and directories):</p>

<p><code>"Directory '$1' includes $2 items." ([pwd] ([ls] "\n" split size)) interpolate</code></p>

<p>produces:</p>

<p><code>"Directory '/Users/h3rald/Development/mn' includes 15 items."</code></p></div></div>

<p><a id="mn-symbol-id-join"></a>
<span class="reference-title">join</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Joins the elements of <span class="kwd">quot</span> using separator <span class="kwd">&apos;sym</span>, producing <span class="kwd">str</span>.</p></div>

<p><a id="mn-symbol-id-lambda"></a>
<span class="reference-title">lambda</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Defines a new symbol <span class="kwd">&apos;sym</span>, containing the specified quotation <span class="kwd">quot</span>. Unlike with <code>let</code>, in this case <span class="kwd">quot</span> will not be quoted, so its values will be pushed on the stack when the symbol <span class="kwd">&apos;sym</span> is pushed on the stack.</p></div>

<p>Essentially, this symbol allows you to define an symbol without any validation of constraints and bind it to a symbol.</p>

<p><a id="mn-symbol-id-lambdabind"></a>
<span class="reference-title">lambdabind</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Binds the specified quotation (unquoted) to an existing symbol <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="mn-symbol-id-length"></a>
<span class="reference-title">length</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the length of <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="mn-symbol-id-let"></a>
<span class="reference-title">let</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Defines a new symbol <span class="kwd">&apos;sym</span>, containing the specified value.</p></div>

<p><a id="mn-symbol-id-map"></a>
<span class="reference-title">map</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Returns a new quotation <span class="kwd">quot<sub>3</sub></span> obtained by applying <span class="kwd">quot<sub>2</sub></span> to each element of <span class="kwd">quot<sub>1</sub></span>.</p></div>

<p><a id="mn-symbol-id-os"></a>
<span class="reference-title">os</span></p>

<div class="symbol"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the host operating system. It can be one of the following strings: windows, macosx, linux, netbsd, freebsd, openbsd, solaris, aix, standalone.</p></div>

<p><a id="mn-symbol-id-pop"></a>
<span class="reference-title">pop</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Removes the first element from the stack.</p></div>

<p><a id="mn-symbol-id-print"></a>
<span class="reference-title">print</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">a</span> to STDOUT.</p></div>

<p><a id="mn-symbol-id-puts"></a>
<span class="reference-title">puts</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">a</span> and a new line to STDOUT.</p></div>

<p><a id="mn-symbol-id-quote"></a>
<span class="reference-title">quote</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> (<span class="kwd">a</span>)</span></p>

<p>Wraps <span class="kwd">a</span> in a quotation.</p></div>

<p><a id="mn-symbol-id-quotesym"></a>
<span class="reference-title">quotesym</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> (<span class="kwd">sym</span>)</span></p>

<p>Creates a symbol with the value of <span class="kwd">str</span> and wraps it in a quotation.</p></div>

<p><a id="mn-symbol-id-quotecmd"></a>
<span class="reference-title">quotecmd</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> (<span class="kwd">sym</span>)</span></p>

<p>Creates a command with the value of <span class="kwd">str</span> and wraps it in a quotation.</p></div>

<p><a id="mn-symbol-id-read"></a>
<span class="reference-title">read</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Reads the file <span class="kwd">str</span> and puts its contents on the top of the stack as a string.</p></div>

<p><a id="mn-symbol-id-replace"></a>
<span class="reference-title">replace</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <span class="kwd">str<sub>3</sub></span> <strong>&rArr;</strong> <span class="kwd">str<sub>4</sub></span></span></p>

<p>Returns a copy of <span class="kwd">str<sub>1</sub></span> containing all occurrences of <span class="kwd">str<sub>2</sub></span> replaced by <span class="kwd">str<sub>3</sub></span></p></div>

<p><a id="mn-symbol-id-run"></a>
<span class="reference-title">run</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Executes the external command <span class="kwd">&apos;sym</span> in the current directory and pushes its return code on the stack.</p></div>

<p><a id="mn-symbol-id-setstack"></a>
<span class="reference-title">setstack</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Substitute the existing stack with the contents of <span class="kwd">quot</span>.</p></div>

<p><a id="mn-symbol-id-swap"></a>
<span class="reference-title">swap</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>2</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Swaps the first two elements on the stack.</p></div>

<p><a id="mn-symbol-id-size"></a>
<span class="reference-title">size</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the length of <span class="kwd">quot</span>.</p></div>

<p><a id="mn-symbol-id-slice"></a>
<span class="reference-title">slice</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Creates a new quotation <span class="kwd">quot<sub>2</sub></span> obtaining by selecting all elements of <span class="kwd">quot<sub>1</sub></span> between indexes <span class="kwd">int<sub>1</sub></span> and <span class="kwd">int<sub>2</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(3 4 5)</code> on the stack:</p>

<pre><code>(1 2 3 4 5 6)
2 4 slice
</code></pre></div></div>

<p><a id="mn-symbol-id-split"></a>
<span class="reference-title">split</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Splits <span class="kwd">&apos;sym<sub>1</sub></span> using separator <span class="kwd">&apos;sym<sub>2</sub></span> and returns the resulting strings within the quotation <span class="kwd">quot</span>.</p></div>

<p><a id="mn-symbol-id-strip"></a>
<span class="reference-title">strip</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns <span class="kwd">str</span>, which is set to <span class="kwd">&apos;sym</span> with leading and trailing spaces removed.</p></div>

<p><a id="mn-symbol-id-substr"></a>
<span class="reference-title">substr</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">str<sub>2</sub></span></span></p>

<p>Returns a substring <span class="kwd">str<sub>2</sub></span> obtained by retriving <span class="kwd">int<sub>2</sub></span> characters starting from index <span class="kwd">int<sub>1</sub></span> within <span class="kwd">str<sub>1</sub></span>.</p></div>

<p><a id="mn-symbol-id-symbols"></a>
<span class="reference-title">symbols</span></p>

<div class="symbol"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> (<span class="kwd">str<sub>*</sub></span>)</span></p>

<p>Returns a list of all symbols defined in the global scope.</p></div>

<p><a id="mn-symbol-id-timestamp"></a>
<span class="reference-title">timestamp</span></p>

<div class="symbol"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the current time as Unix timestamp.</p></div>

<p><a id="mn-symbol-id-type"></a>
<span class="reference-title">type</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Puts the data type of <span class="kwd">a</span> on the stack.</p></div>

<p><a id="mn-symbol-id-when"></a>
<span class="reference-title">when</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>If <span class="kwd">quot<sub>1</sub></span> evaluates to <span class="kwd">true</span> then evaluates <span class="kwd">quot<sub>2</sub></span>.</p></div>

<p><a id="mn-symbol-id-which"></a>
<span class="reference-title">which</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the full path to the directory containing executable <span class="kwd">&apos;sym</span>, or an empty string if the executable is not found in <strong>$PATH</strong>.</p></div>

<p><a id="mn-symbol-id-while"></a>
<span class="reference-title">while</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Executes <span class="kwd">quot<sub>2</sub></span> while <span class="kwd">quot<sub>1</sub></span> evaluates to <span class="kwd">true</span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program prints all natural numbers from 0 to 10:</p>

<pre><code>0 (count) let
(count 10 &lt;=) 
(count puts 1 + (count) bind) while
</code></pre></div></div>

<p><a id="mn-symbol-id-write"></a>
<span class="reference-title">write</span></p>

<div class="symbol"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Writes <span class="kwd">str<sub>1</sub></span> to the file <span class="kwd">str<sub>2</sub></span>, erasing all its contents first.</p></div>
    </div>
    <div id="footer">
      <p><span class="copy"></span> Fabio Cevasco &ndash; December 2, 2023</p>
      <p><span>Powered by</span> <a href="https://h3rald.com/hastyscribe" class="hastyscribe-logo">  <img src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='350.755'%20height='102.312'%3E%3Cg%20font-family='Mr%20Bedfort'%20font-size='72'%20font-weight='400'%20letter-spacing='0'%20style='line-height:125%25;-inkscape-font-specification:Mr%20Bedfort'%20word-spacing='0'%3E%3Cpath%20d='m17.352%2044.784-1.296-5.616c-3.552-1.2-7.2-2.52-10.944-3.96-.048%200-.072.024-.072.072.048%201.008%204.152%204.176%2012.312%209.504m6.12-3.24c.96%204.224%201.56%206.96%201.8%208.208%2011.424%206.96%2018.744%2010.464%2021.96%2010.512l-3.888-13.896c-6.432-1.248-13.056-2.856-19.872-4.824M18%204.752l-.288%204.608c0%204.464%201.512%2013.32%204.536%2026.568%206.24%201.92%2012.792%203.576%2019.656%204.968-1.968-7.44-3.408-13.848-4.32-19.224-.912-5.424-1.368-11.208-1.368-17.352.096-.528%201.032-1.368%202.808-2.52C40.848.6%2042.144%200%2042.912%200c.384%200%20.576.264.576.792l-.36%205.04c0%207.776%202.016%2019.872%206.048%2036.288%205.664.864%2010.944%201.368%2015.84%201.512.336%200%20.504.168.504.504%200%20.288-1.056%201.008-3.168%202.16-2.112%201.152-3.36%201.728-3.744%201.728-2.256%200-4.944-.192-8.064-.576l2.808%2010.08c0%20.816-1.704%202.208-5.112%204.176-3.84%200-11.376-3.336-22.608-10.008.48%202.688.768%205.04.864%207.056-.096.096-1.056.576-2.88%201.44-1.824.864-2.856%201.296-3.096%201.296-.624%200-.936-.456-.936-1.368-.432-4.56-1.056-9-1.872-13.32-4.896-3.168-9.072-6.048-12.528-8.64C1.728%2035.52%200%2033.912%200%2033.336c0-.768%201.584-2.088%204.752-3.96l.216-.144c3.264%201.536%206.48%202.88%209.648%204.032-2.736-10.416-4.104-17.496-4.104-21.24%200-1.68.192-3%20.576-3.96.096-.144%201.152-.816%203.168-2.016%202.016-1.2%203.168-1.8%203.456-1.8.192%200%20.288.168.288.504M78.01%2040.104c.144-.288%201.44-.432%203.888-.432%202.496%200%203.744.36%203.744%201.08%200%20.144-.144.432-.432.864-1.68%202.304-2.52%204.704-2.52%207.2%200%202.496.576%204.56%201.728%206.192%201.2%201.584%202.712%202.376%204.536%202.376%202.976%200%206-2.112%209.072-6.336l.504.864c-3.744%205.952-7.872%208.928-12.384%208.928-3.408%200-6.024-1.752-7.848-5.256-.768%201.152-2.016%202.232-3.744%203.24-1.728%201.008-3.36%201.512-4.896%201.512-4.176%200-6.264-1.752-6.264-5.256%200-2.736%201.152-5.592%203.456-8.568%202.352-3.024%204.656-4.536%206.912-4.536.192%200%20.288.072.288.216%200%20.144-.096.312-.288.504-1.008.528-1.872%201.632-2.592%203.312a13.12%2013.12%200%200%200-1.008%205.04c0%203.504%201.344%205.256%204.032%205.256.768%200%201.488-.192%202.16-.576.72-.432%201.152-1.032%201.296-1.8a14.973%2014.973%200%200%201-.936-5.256c0-1.824.072-3.36.216-4.608.384-2.64.744-3.96%201.08-3.96'/%3E%3Cpath%20d='m119.772%2051.048.504.864c-2.016%203.216-4.44%205.664-7.272%207.344-2.832%201.728-5.52%202.592-8.064%202.592-5.136%200-8.544-2.208-10.224-6.624%200-.24.552-1.032%201.656-2.376%201.104-1.344%201.824-2.016%202.16-2.016.384%200%20.6.12.648.36.288%201.536%201.08%203.168%202.376%204.896%201.344%201.728%202.568%202.592%203.672%202.592%201.728%200%202.616-.48%202.664-1.44%200-1.488-1.752-3.744-5.256-6.768-1.296-1.152-2.496-2.616-3.6-4.392-1.056-1.824-1.584-3.696-1.584-5.616%200-.384.072-.648.216-.792%202.112-1.92%203.504-2.88%204.176-2.88.528%200%20.792.408.792%201.224.048%201.776.792%203.624%202.232%205.544%201.488%201.872%202.928%203.672%204.32%205.4%201.44%201.728%202.16%203.456%202.16%205.184%200%201.68-.84%203.192-2.52%204.536%203.936-.096%207.584-2.64%2010.944-7.632'/%3E%3Cpath%20d='M122.633%2024.264c.768%2022.56%204.248%2033.84%2010.44%2033.84%202.64%200%205.808-2.352%209.504-7.056l.504.864c-4.512%206.72-8.832%2010.08-12.96%2010.08-4.08%200-7.392-3.12-9.936-9.36-2.544-6.288-3.888-14.64-4.032-25.056%200%200-.347-5.071%200-4.827.096-3.648.264-5.229.504-8.493%200-.432.216-.72.648-.864%202.88-1.152%204.488-1.728%204.824-1.728.384%200%20.576.216.576.648a165.13%20165.13%200%200%200-.144%206.552'/%3E%3Cpath%20d='M157.87%2082.728c0%203.984%201.176%207.728%203.528%2011.232%202.352%203.504%204.536%205.256%206.552%205.256%201.728%200%202.592-1.536%202.592-4.608%200-2.256-.84-5.712-2.52-10.368a1998.05%201998.05%200%200%200-2.808-7.704%20452.798%20452.798%200%200%201-2.952-8.136c-2.928%204.464-4.392%209.24-4.392%2014.328m15.84%205.544c0%204.704-.792%208.208-2.376%2010.512-1.584%202.352-3.6%203.528-6.048%203.528-3.12%200-6-1.68-8.64-5.04-2.592-3.312-3.888-7.44-3.888-12.384.336-3.408%201.248-6.552%202.736-9.432%201.536-2.88%203.576-5.856%206.12-8.928-1.632-4.464-2.76-7.992-3.384-10.584-2.064%202.64-4.44%203.96-7.128%203.96-2.688%200-5.04-1.368-7.056-4.104-2.016-2.736-3.024-6.672-3.024-11.808%200-.528.384-.888%201.152-1.08%202.304-.48%203.624-.72%203.96-.72.576%200%20.864.288.864.864%200%204.368.984%207.8%202.952%2010.296%201.248%201.536%202.808%202.304%204.68%202.304%201.008%200%202.064-.456%203.168-1.368-.72-3.216-1.08-5.904-1.08-8.064%200-2.208.504-3.816%201.512-4.824%202.064-1.2%203.216-1.8%203.456-1.8.48%200%20.72.36.72%201.08%200%205.232.96%2010.752%202.88%2016.56l1.224%203.816c3.6-3.888%206.336-7.224%208.208-10.008l.504.864c-1.152%201.824-2.208%203.312-3.168%204.464a161.359%20161.359%200%200%201-3.096%203.6%20676.433%20676.433%200%200%201-2.016%202.376c3.504%2010.032%205.424%2015.912%205.76%2017.64.672%203.408%201.008%206.168%201.008%208.28'/%3E%3Cpath%20d='M178.334%2012.888c0%204.608%202.736%208.904%208.208%2012.888%202.544-6.528%203.816-11.712%203.816-15.552%200-1.68-.552-3.24-1.656-4.68-1.104-1.44-2.352-2.16-3.744-2.16-1.344%200-2.568.72-3.672%202.16-1.056%201.44-1.824%202.88-2.304%204.32-.432%201.392-.648%202.4-.648%203.024m-9.36%2046.944c-.336.336-.624.504-.864.504-.384%200-.576-.192-.576-.576%200-.384.096-.696.288-.936%202.16-2.4%204.704-6.024%207.632-10.872a162.099%20162.099%200%200%200%208.064-15.12c-6.144-4.272-9.216-8.64-9.216-13.104%200-2.976.696-6%202.088-9.072%201.44-3.072%203.336-5.616%205.688-7.632%202.4-2.016%204.68-3.024%206.84-3.024%202.208%200%203.696.528%204.464%201.584.816%201.008%201.224%202.496%201.224%204.464%200%203.696-2.232%2010.608-6.696%2020.736%201.584%201.056%203.696%202.352%206.336%203.888a295.464%20295.464%200%200%201%206.84%203.888%2056.857%2056.857%200%200%201%205.76%203.816c3.936%203.024%205.904%206.312%205.904%209.864%200%203.504-1.824%206.792-5.472%209.864-3.648%203.024-7.344%204.536-11.088%204.536-5.904%200-11.16-3.072-15.768-9.216-.528-.72-.792-1.32-.792-1.8%200-.528.6-1.272%201.8-2.232%201.2-1.008%202.136-1.512%202.808-1.512.144%200%20.264.072.36.216%201.296%202.256%203.624%204.656%206.984%207.2%203.36%202.544%206.648%203.816%209.864%203.816%203.984-.288%205.976-2.256%205.976-5.904%200-3.072-1.752-5.952-5.256-8.64-2.592-1.968-5.784-4.032-9.576-6.192-3.792-2.208-6.408-3.792-7.848-4.752-5.808%2012.192-11.064%2020.928-15.768%2026.208M230.382%2041.688c0-1.44-.912-2.16-2.736-2.16-1.824%200-3.336.816-4.536%202.448-1.2%201.632-1.8%203.72-1.8%206.264%200%202.496.96%204.776%202.88%206.84%201.968%202.016%204.896%203.024%208.784%203.024%202.448%200%204.824-.576%207.128-1.728%202.352-1.2%204.344-2.976%205.976-5.328l.504.864c-1.728%203.12-4.392%205.544-7.992%207.272-3.552%201.728-7.152%202.592-10.8%202.592-3.6%200-6.552-.768-8.856-2.304-2.256-1.488-3.384-3.648-3.384-6.48%200-3.6%201.416-7.008%204.248-10.224%202.88-3.216%206.456-4.824%2010.728-4.824%201.488%200%202.592.384%203.312%201.152.72.72%201.08%201.704%201.08%202.952%200%201.2-.432%202.4-1.296%203.6-.864%201.152-1.848%201.728-2.952%201.728-.576%200-1.176-.216-1.8-.648-.576-.48-.864-.864-.864-1.152%200-.336.12-.6.36-.792.24-.24.528-.456.864-.648.768-.384%201.152-1.2%201.152-2.448'/%3E%3Cpath%20d='m251.359%2047.088-1.368-.072c-.48%200-.816.216-1.008.648-.576%201.44-1.488%203.072-2.736%204.896l-.576-.792c.96-1.296%201.704-2.928%202.232-4.896%200-.384-.168-.648-.504-.792-2.16-.72-3.24-2.616-3.24-5.688%200-.672.576-1.296%201.728-1.872%201.152-.624%202.112-.936%202.88-.936.768%200%201.152.336%201.152%201.008%200%203.6%201.68%205.4%205.04%205.4.816%200%201.464-.072%201.944-.216.528-.192.816-.288.864-.288.48%200%20.72.36.72%201.08%200%20.672-.192%201.152-.576%201.44-.336.24-.72.792-1.152%201.656-.432.816-.648%201.776-.648%202.88%200%202.16.624%203.864%201.872%205.112%201.296%201.2%202.88%201.8%204.752%201.8%201.92%200%203.816-.552%205.688-1.656%201.872-1.104%203.504-2.688%204.896-4.752l.504.864c-1.68%202.928-4.008%205.28-6.984%207.056-2.976%201.776-5.64%202.664-7.992%202.664-4.8%200-7.2-2.184-7.2-6.552%200-.816.288-1.92.864-3.312.576-1.392%201.152-2.568%201.728-3.528l.864-1.44c0-.192-.072-.288-.216-.288-1.536.384-2.712.576-3.528.576'/%3E%3Cpath%20d='M273.24%2042.84c-.24%202.016-.36%203.672-.36%204.968%200%204.56.864%208.112%202.592%2010.656%201.776%202.496%203.912%203.744%206.408%203.744%202.544%200%205.064-.888%207.56-2.664%202.496-1.728%204.824-4.272%206.984-7.632l-.504-.864c-3.744%205.136-7.2%207.704-10.368%207.704-2.016%200-3.648-1.08-4.896-3.24-1.248-2.16-1.872-5.088-1.872-8.784%200-1.92.168-3.864.504-5.832%200-.432-.192-.648-.576-.648-.336%200-1.944.576-4.824%201.728-.432.144-.648.432-.648.864m5.976-15.48c.768.816%201.152%201.8%201.152%202.952s-.384%202.136-1.152%202.952c-.72.816-1.608%201.224-2.664%201.224-1.008%200-1.872-.408-2.592-1.224-.72-.816-1.08-1.8-1.08-2.952s.36-2.136%201.08-2.952c.72-.816%201.584-1.224%202.592-1.224%201.056%200%201.944.408%202.664%201.224'/%3E%3Cpath%20d='M310.14%2045.36c-.576%200-.864.576-.864%201.728%200%201.152.456%202.52%201.368%204.104.96%201.536%202.16%202.76%203.6%203.672.048-.24.072-.6.072-1.08%200-2.112-.408-4.032-1.224-5.76-.816-1.776-1.8-2.664-2.952-2.664m-13.464-24.912c0%209.6%201.104%2017.76%203.312%2024.48%202.16-5.904%203.24-13.8%203.24-23.688%200-4.272-.264-7.8-.792-10.584s-1.248-4.176-2.16-4.176c-1.2%200-2.112%201.296-2.736%203.888-.576%202.544-.864%205.904-.864%2010.08m11.448-6.84c0%204.704-.816%2010.32-2.448%2016.848-1.584%206.528-3.312%2011.832-5.184%2015.912%201.488%204.224%203.192%207.488%205.112%209.792%201.92%202.256%203.672%203.384%205.256%203.384s2.64-.984%203.168-2.952c-2.16-.96-4.008-2.496-5.544-4.608-1.488-2.112-2.232-4.224-2.232-6.336%200-1.104.264-1.992.792-2.664.528-.672%201.296-1.008%202.304-1.008%202.496%200%204.416.96%205.76%202.88%201.392%201.872%202.088%204.128%202.088%206.768%200%201.488-.24%202.904-.72%204.248.48.144%201.032.216%201.656.216%202.64%200%204.992-1.68%207.056-5.04l.576.72c-2.16%203.696-4.872%205.544-8.136%205.544-.384%200-.96-.048-1.728-.144-1.68%203.12-4.224%204.68-7.632%204.68-3.936%200-7.536-2.352-10.8-7.056-1.584-2.352-2.856-5.568-3.816-9.648-1.008-4.128-1.512-8.712-1.512-13.752%200-5.04.432-9.6%201.296-13.68.816-4.08%202.064-7.44%203.744-10.08%201.68-2.64%203.6-3.96%205.76-3.96%203.456%200%205.184%203.312%205.184%209.936'/%3E%3Cpath%20d='m332.694%2037.656.072-.936c0-.576-.648-.864-1.944-.864a5.858%205.858%200%200%200-3.528%201.152c-1.008.768-1.512%201.8-1.512%203.096%200%202.304%201.656%203.456%204.968%203.456.528%200%201.056-.072%201.584-.216a5.437%205.437%200%200%201%201.728-.288c.576%200%20.864.192.864.576%200%20.048-.192.168-.576.36-.384.144-.864.384-1.44.72-.528.336-1.08.768-1.656%201.296-1.344%201.248-2.016%202.952-2.016%205.112s.648%203.816%201.944%204.968c1.296%201.104%202.976%201.656%205.04%201.656s4.176-.6%206.336-1.8a14.695%2014.695%200%200%200%205.256-4.896l.504.864c-1.824%203.168-4.368%205.664-7.632%207.488-3.216%201.872-6.168%202.808-8.856%202.808-2.64%200-4.68-.552-6.12-1.656-1.392-1.104-2.088-2.52-2.088-4.248%200-1.776.432-3.408%201.296-4.896.864-1.488%201.608-2.544%202.232-3.168.672-.672%201.152-1.128%201.44-1.368.336-.288.504-.48.504-.576%200-.144-.024-.216-.072-.216-1.536.576-3.024.864-4.464.864-2.544%200-3.816-1.032-3.816-3.096%200-2.784%201.584-5.184%204.752-7.2%203.168-2.016%205.928-3.024%208.28-3.024%202.4%200%203.6.576%203.6%201.728%200%20.72-.384%201.488-1.152%202.304-.768.816-1.464%201.224-2.088%201.224-.96%200-1.44-.408-1.44-1.224'/%3E%3C/g%3E%3Ctext%20xml:space='preserve'%20x='280.368'%20y='13.976'%20font-family='Mr%20Bedfort'%20font-size='40'%20font-weight='400'%20letter-spacing='0'%20style='line-height:125%25;-inkscape-font-specification:Mr%20Bedfort'%20transform='translate(-177.39%20-82.362)'%20word-spacing='0'/%3E%3Cpath%20fill-rule='evenodd'%20d='M99.36%2029.25c-.061-.106.474-.57%201.596-1.31%201.123-.74%202.835-1.75%205.15-2.876%202.313-1.127%205.233-2.365%208.729-3.583%203.496-1.218%207.573-2.41%2012.103-3.567%205.291-1.357%2011.259-2.645%2017.812-3.778%206.554-1.133%2013.693-2.108%2021.297-2.923%2013.686-1.47%2028.926-2.381%2045.127-2.565%207.483-.085%2015.175-.02%2023.015.229%207.834.248%2015.51.67%2022.968%201.25%2014.92%201.156%2028.998%202.957%2041.703%205.435%206.104%201.186%2011.931%202.505%2017.35%204.046%205.42%201.541%2010.433%203.303%2014.965%205.263%204.145%201.79%207.906%203.808%2011.06%206.11%201.442%201.044%202.772%202.171%203.92%203.37%201.146%201.199%202.11%202.469%202.864%203.785a13.434%2013.434%200%200%201%201.512%203.986c.295%201.494.276%202.914.074%204.176a14.011%2014.011%200%200%201-1.3%203.977%2016.406%2016.406%200%200%201-1.587%202.577c-.977%201.305-1.626%201.855-1.732%201.773-.106-.082.333-.802%201.064-2.196a22.47%2022.47%200%200%200%201.191-2.616c.393-1.05.749-2.284.853-3.7a10.664%2010.664%200%200%200-.315-3.59c-.293-1.107-.799-2.24-1.502-3.34-.713-1.123-1.625-2.201-2.717-3.229-1.092-1.027-2.363-2.005-3.75-2.943-3.044-2.044-6.684-3.82-10.755-5.44-4.459-1.771-9.383-3.354-14.721-4.736-5.338-1.383-11.09-2.564-17.15-3.648-12.586-2.244-26.524-3.873-41.336-4.949a561.489%20561.489%200%200%200-22.791-1.181%20602.786%20602.786%200%200%200-22.847-.285c-16.088.1-31.21.836-44.806%202.057-7.56.68-14.646%201.492-21.154%202.44-6.509.95-12.44%202.035-17.714%203.176-4.53.984-8.59%201.971-12.085%202.975a106.17%20106.17%200%200%200-8.788%202.925c-2.358.907-4.145%201.7-5.364%202.228-1.22.527-1.876.783-1.938.677z'/%3E%3C/svg%3E
" width="80" height="23" alt="HastyScribe">
  </a></p>
    </div>
  </div>
  
</body>