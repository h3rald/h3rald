<!doctype html>
<html lang="en">
<head>
  <title>min Language Developer Guide</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="author" content="Fabio Cevasco">
  <meta name="generator" content="HastyScribe">
  <style>/*! normalize.css v2.1.3 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}
/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block;
}
/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}
/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}
/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  text-size-adjust: 100%;
  /* 2 */
}
/**
 * Remove default margin.
 */
body {
  margin: 0;
}
/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent;
}
/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted;
}
/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}
/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}
/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}
/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}
/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}
/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}
/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}
/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}
/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap;
}
/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019";
}
/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}
/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}
/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}
/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}
/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0;
}
/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}
/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}
/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
}
/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}
/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}
/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  cursor: pointer;
  /* 3 */
}
/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}
/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}
/**
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  box-sizing: content-box;
}
/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}
/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}
/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}
/* Fonts */
/* Colors */
.mix-monospace {
  font-family: monospace;
  font-weight: 400;
}
.mix-no-border-radius {
  border-radius: 0px;
}
@media screen and (max-width: 639px) {
  .mix-responsive {
    overflow-y: hidden;
    overflow-x: auto;
  }
  .mix-responsive td {
    white-space: nowrap;
  }
}
body {
  background-color: #fff;
  margin: 0 auto;
  height: 100%;
  zoom: 1;
  font-weight: 400;
  letter-spacing: normal;
  word-spacing: normal;
  color: #333;
  font: 15px sans-serif;
  line-height: 1.4;
  -webkit-font-smoothing: antialiased;
  width: 960px;
  hyphens: auto;
  text-align: justify;
}
@media screen and (max-width: 659px) {
  body {
    width: 100%;
  }
}
@media screen and (min-width: 660px) {
  body {
    width: 660px;
  }
}
@media screen and (min-width: 880px) {
  body {
    width: 880px;
  }
}
#main,
#footer,
#header {
  width: 94%;
  margin: auto;
}
#footer {
  border-top: 1px solid #ddd;
  text-align: center;
  font-size: 75%;
}
#footer p {
  line-height: 0.6em;
}
#toc {
  margin-top: -10px;
}
#toc ul {
  list-style-type: none;
  padding-left: 20px;
}
#toc > ul {
  padding-left: 0;
}
/* Lists */
ul,
ol {
  padding-left: 30px;
}
li p {
  margin: 0 auto;
}
.unstyled li {
  list-style-type: none;
}
dl dt {
  font-weight: 700;
}
dl dd {
  padding: 0 0 0.2em 0;
}
/* Headings */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 700;
  color: #111;
  border-bottom: 1px solid #ddd;
}
h1 {
  text-align: center;
}
/* Blocks */
blockquote {
  border-left: 3px solid #dedede;
  padding: 0px 10px;
  margin: 10px 0;
  font-style: italic;
}
pre {
  font-family: monospace;
  font-weight: 400;
  color: #222;
  white-space: pre-wrap;
  margin: auto;
  padding: 0;
}
@media screen and (max-width: 639px) {
  pre {
    overflow-y: hidden;
    overflow-x: auto;
  }
  pre td {
    white-space: nowrap;
  }
}
pre code {
  box-shadow: none;
  border: none;
  line-height: 1.2em;
}
.responsive {
  width: 100%;
}
@media screen and (max-width: 639px) {
  .responsive {
    overflow-y: hidden;
    overflow-x: auto;
  }
  .responsive td {
    white-space: nowrap;
  }
}
table {
  border-collapse: collapse;
  margin: 15px auto;
  border-spacing: 0;
  empty-cells: show;
  min-width: 100%;
}
table thead {
  background: #f8f8f8;
  color: #222;
  text-align: left;
  vertical-align: bottom;
}
table td,
table th {
  background-color: transparent;
  border: 1px solid #999;
  font-size: inherit;
  margin: 0;
  overflow: visible;
  padding: 6px 12px;
}
address {
  font-style: italic;
  color: #999;
}
hr {
  border: 0;
  height: 1px;
  background: #333;
  background-image: linear-gradient(to right, #ccc, #333, #ccc);
}
.center {
  margin: auto;
  text-align: center;
}
/* Inline */
[class^="fa-"]:before,
[href^=http]:before,
[href^=mailto]:before,
[href^=git]:before,
[href^=tel]:before,
[href^=magnet]:before,
[href='#document-top']:before,
[class^="badge-"]:before {
  width: 15px;
  height: 15px;
  background-repeat: no-repeat;
  box-sizing: border-box;
  content: ' ';
  display: inline-block;
  vertical-align: text-top;
}
.tip > p:first-child:before,
.warning > p:first-child:before,
.sidebar > p:first-child:before,
.note > p:first-child:before {
  width: 15px;
  height: 15px;
  background-repeat: no-repeat;
  box-sizing: border-box;
  content: ' ';
  display: inline-block;
  vertical-align: text-top;
  margin-right: 2px;
}
[href^=http]:before,
[href^=mailto]:before,
[href^=git]:before,
[href^=tel]:before,
[href^=magnet]:before {
  margin-right: 2px;
}
[href='#document-top'] {
  float: right;
}
[href='#document-top']:before {
  width: 12px;
  height: 12px;
}
#footer a:before {
  background: none;
}
#footer a:hover {
  text-decoration: none;
}
#footer a:after {
  content: none;
}
code,
span.code {
  font-family: monospace;
  font-weight: 400;
  hyphens: none;
  color: #B2361E;
  font-size: 85%;
}
strong code,
b code {
  font-weight: 700;
}
kbd,
span.kbd {
  color: #222;
  background-color: #f8f8f8;
  padding: 0 3px 0;
  display: inline-block;
  width: auto;
  margin: 1px;
  border-radius: 2px;
  background-clip: padding-box;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  font-family: monospace;
  font-weight: 700;
  border-right: 1px solid #bbb;
  border-bottom: 1px solid #bbb;
  line-height: 1em;
  font-size: 80%;
  hyphens: none;
}
mark,
span.mark {
  padding: 0 1px;
  color: #222;
}
abbr,
span.abbr {
  font-variant: small-caps;
  font-weight: 700;
  hyphens: none;
}
abbr:hover,
span.abbr:hover {
  cursor: help;
}
samp,
span.samp {
  font-size: 90%;
  color: #222;
  background-color: transparent;
  padding: 0 3px 0;
  display: inline-block;
  width: auto;
  margin: 1px;
  border-radius: 2px;
  background-clip: padding-box;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  hyphens: none;
}
var,
span.var {
  font-size: 90%;
  font-family: monospace;
  font-weight: 700;
  font-style: normal;
  hyphens: none;
}
cite,
span.cite {
  font-weight: 700;
  font-style: italic;
  hyphens: none;
}
q,
span.q {
  font-style: italic;
  color: #666;
  hyphens: none;
}
span.tt,
span.cmd,
span.opt,
span.arg,
span.kwd,
span.ext,
span.file,
span.dir {
  font-size: 90%;
  font-family: monospace;
  font-weight: 400;
  hyphens: none;
}
span.ext,
span.kwd {
  font-weight: 700;
}
img {
  max-width: 100%;
}
/* Links */
a,
a:visited {
  color: #4183c4;
  text-decoration: none;
}
a:hover,
a:visited:hover {
  text-decoration: underline;
}
a.hastyscribe-logo:before {
  display: inline;
}
a.hastyscribe-logo img {
  vertical-align: middle;
}
/* Checkboxes */
li.github_checkbox {
  list-style-type: none;
}
.note {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #264c72;
  background-color: #d8ebf8;
  border: 1px solid #A4D1EF;
  font-size: 95%;
}
.note code,
.note samp,
.note pre {
  color: #264c72;
}
.note a {
  color: #264c72;
}
.note p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .note {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.note > p {
  margin: 0 auto;
}
.note > p:first-child {
  font-weight: 700;
  color: #264c72;
}
.note pre,
.note code {
  color: #19324c;
}
.note a {
  color: #132639;
}
.tip {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #009926;
  background-color: #d8f5cd;
  border: 1px solid #B0EB99;
  font-size: 95%;
}
.tip code,
.tip samp,
.tip pre {
  color: #009926;
}
.tip a {
  color: #264c72;
}
.tip p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .tip {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.tip > p {
  margin: 0 auto;
}
.tip > p:first-child {
  font-weight: 700;
  color: #009926;
}
.tip pre,
.tip code {
  color: #006619;
}
.tip a {
  color: #004d13;
}
.warning {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #705400;
  background-color: #FFEBAD;
  border: 1px solid #FFDB70;
  font-size: 95%;
}
.warning code,
.warning samp,
.warning pre {
  color: #705400;
}
.warning a {
  color: #264c72;
}
.warning p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .warning {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.warning > p {
  margin: 0 auto;
}
.warning > p:first-child {
  font-weight: 700;
  color: #705400;
}
.warning pre,
.warning code {
  color: #3d2e00;
}
.warning a {
  color: #241b00;
}
.blank-sidebar {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #555;
  background-color: #fefefe;
  border: 1px solid #fefefe;
  font-size: 95%;
}
.blank-sidebar code,
.blank-sidebar samp,
.blank-sidebar pre {
  color: #555;
}
.blank-sidebar a {
  color: #264c72;
}
.blank-sidebar p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .blank-sidebar {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.blank-sidebar > p {
  margin: 0 auto;
}
.blank-sidebar > p:first-child {
  font-weight: 700;
  color: #555;
}
.blank-sidebar pre,
.blank-sidebar code {
  color: #3b3b3b;
}
.blank-sidebar a {
  color: #2f2f2f;
}
.sidebar {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #555;
  background-color: #f8f8f8;
  border: 1px solid #f8f8f8;
  font-size: 95%;
}
.sidebar code,
.sidebar samp,
.sidebar pre {
  color: #555;
}
.sidebar a {
  color: #264c72;
}
.sidebar p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .sidebar {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.sidebar > p {
  margin: 0 auto;
}
.sidebar > p:first-child {
  font-weight: 700;
  color: #555;
}
.sidebar pre,
.sidebar code {
  color: #3b3b3b;
}
.sidebar a {
  color: #2f2f2f;
}
.output {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #555;
  background-color: #f8f8f8;
  border: 1px solid #f8f8f8;
}
.output code,
.output samp,
.output pre {
  color: #555;
}
.output a {
  color: #264c72;
}
.output p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .output {
    margin-left: 80px;
    margin-right: 80px;
  }
}
.terminal {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #eee;
  background-color: #222;
  border: 1px solid #ccc;
  hyphens: none;
  padding: 0 3px;
  border: 2px solid #999;
  white-space: pre-wrap;
  border-top: 10px solid #999;
}
.terminal code,
.terminal samp,
.terminal pre {
  color: #eee;
}
.terminal a {
  color: #264c72;
}
.terminal p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .terminal {
    margin-left: 80px;
    margin-right: 80px;
  }
}
@media screen and (max-width: 639px) {
  .terminal {
    overflow-y: hidden;
    overflow-x: auto;
  }
  .terminal td {
    white-space: nowrap;
  }
}
.terminal > p,
.terminal > p:first-child {
  margin-top: -40px;
  margin-bottom: 0;
  text-shadow: none;
  font-weight: 400;
  font-family: monospace;
  font-size: 85%;
  color: #eee;
}
.terminal > p code,
.terminal > p:first-child code,
.terminal > p pre,
.terminal > p:first-child pre,
.terminal > p samp,
.terminal > p:first-child samp {
  font-size: 100%;
}
.terminal > p:first-child,
.terminal > p:first-child:first-child {
  margin-top: 0px;
}
.terminal > p:before,
.terminal > p:first-child:before {
  font-family: monospace;
  font-style: normal;
  font-weight: 700;
  color: #009926;
  content: "$ ";
}
.terminal-su {
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #eee;
  background-color: #222;
  border: 1px solid #ccc;
  hyphens: none;
  padding: 0 3px;
  border: 2px solid #999;
  white-space: pre-wrap;
  border-top: 10px solid #999;
}
.terminal-su code,
.terminal-su samp,
.terminal-su pre {
  color: #eee;
}
.terminal-su a {
  color: #264c72;
}
.terminal-su p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  .terminal-su {
    margin-left: 80px;
    margin-right: 80px;
  }
}
@media screen and (max-width: 639px) {
  .terminal-su {
    overflow-y: hidden;
    overflow-x: auto;
  }
  .terminal-su td {
    white-space: nowrap;
  }
}
.terminal-su > p,
.terminal-su > p:first-child {
  margin-top: -40px;
  margin-bottom: 0;
  text-shadow: none;
  font-weight: 400;
  font-family: monospace;
  font-size: 85%;
  color: #eee;
}
.terminal-su > p code,
.terminal-su > p:first-child code,
.terminal-su > p pre,
.terminal-su > p:first-child pre,
.terminal-su > p samp,
.terminal-su > p:first-child samp {
  font-size: 100%;
}
.terminal-su > p:first-child,
.terminal-su > p:first-child:first-child {
  margin-top: 0px;
}
.terminal-su > p:before,
.terminal-su > p:first-child:before {
  font-family: monospace;
  font-style: normal;
  font-weight: 700;
  color: #009926;
  content: "$ ";
}
.terminal-su > p:before,
.terminal-su > p:first-child:before {
  color: #CC3300;
  content: "# ";
}
div .terminal {
  margin: 2px auto;
}
@media screen and (min-width: 880px) {
  div .terminal {
    margin-left: 80px;
    margin-right: 80px;
  }
}
details {
  font-size: 95%;
  background-clip: padding-box;
  border-radius: 3px;
  margin: 10px auto;
  padding: 2px 4px 0 4px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
  color: #555;
  background-color: #f8f8f8;
  border: 1px solid #fefefe;
  display: block;
}
details code,
details samp,
details pre {
  color: #555;
}
details a {
  color: #264c72;
}
details p {
  margin: 0 auto;
}
@media screen and (min-width: 880px) {
  details {
    margin-left: 80px;
    margin-right: 80px;
  }
}
details > summary::before {
  content: url("data:image/svg+xml,%3Csvg viewBox='0 0 448 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z' /%3E %3C/svg%3E");
  display: inline-block;
  margin-right: 2px;
  vertical-align: text-top;
  height: 11px;
  width: 11px;
}
details[open] > summary::before {
  content: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M169.4 470.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 370.8 224 64c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 306.7L54.6 265.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z' /%3E %3C/svg%3E");
}
summary {
  cursor: pointer;
  font-weight: bold;
}
summary > * {
  display: inline;
}
.headings h1 {
  font-size: 2em;
}
.headings h2 {
  font-size: 1.5em;
  counter-reset: h3;
  counter-increment: h2;
}
.headings h2::before {
  content: counter(h2) "\00A0\00A0";
}
.headings h3 {
  font-size: 1.2em;
  counter-reset: h4;
  counter-increment: h3;
}
.headings h3::before {
  content: counter(h2) "." counter(h3) "\00A0\00A0";
}
.headings h4 {
  font-size: 1.1em;
  counter-reset: h5;
  counter-increment: h4;
}
.headings h4::before {
  content: counter(h2) "." counter(h3) "." counter(h4) "\00A0\00A0";
}
.headings h5 {
  font-size: 1em;
  counter-reset: h6;
  counter-increment: h5;
}
.headings h5::before {
  content: counter(h2) "." counter(h3) "." counter(h4) "." counter(h5) "\00A0\00A0";
}
.headings h6 {
  font-size: 1em;
  counter-increment: h6;
}
.headings h6::before {
  content: counter(h2) "." counter(h3) "." counter(h4) "." counter(h5) "." counter(h6) "\00A0\00A0";
}
/***************/
.headings #toc {
  counter-reset: toc2;
}
#toc > ul > li > ul > li > a {
  font-weight: 700;
}
.headings #toc li li a {
  counter-reset: toc3;
  counter-increment: toc2;
}
.headings #toc li li a::before {
  content: counter(toc2) "\00A0\00A0";
}
.headings #toc li li li a {
  counter-reset: toc4;
  counter-increment: toc3;
}
.headings #toc li li li a::before {
  content: counter(toc2) "." counter(toc3) "\00A0\00A0";
}
.headings #toc li li li li a {
  counter-reset: toc5;
  counter-increment: toc4;
}
.headings #toc li li li li a::before {
  content: counter(toc2) "." counter(toc3) "." counter(toc4) "\00A0\00A0";
}
.headings #toc li li li li li a {
  counter-reset: toc6;
  counter-increment: toc5;
}
.headings #toc li li li li li a::before {
  content: counter(toc2) "." counter(toc3) "." counter(toc4) "." counter(toc5) "\00A0\00A0";
}
.headings #toc li li li li li li a {
  counter-increment: toc6;
}
.headings #toc li li li li li li a::before {
  content: counter(toc2) "." counter(toc3) "." counter(toc4) "." counter(toc5) "." counter(toc6) "\00A0\00A0";
}
@media print {
  body {
    width: 700px;
  }
  /* Table of Contents */
  #toc {
    width: 650px;
    list-style-type: none;
  }
  #toc ul {
    list-style-type: none;
    padding-left: 20px;
    margin-left: 0;
  }
  #toc li {
    padding-left: 0;
    margin-left: 0;
    padding-bottom: 0.2em;
  }
  #toc a {
    text-decoration: none;
  }
  #toc a::after {
    content: leader(".") target-counter(attr(href), page);
  }
  #toc a[href="#preface"]::after {
    content: leader(".") target-counter(attr(href), page, lower-roman);
  }
  #toc a {
    color: #000;
  }
  #toc > li {
    margin: 0.2em 0;
    line-height: 1.2em;
    font-weight: bold;
    padding-bottom: 0.4em;
    font-size: 110%;
  }
  #toc > li > ul > li {
    font-weight: normal;
    font-size: 100%;
  }
  #toc li li li li li li {
    display: none;
    /* None sane of mind would EVER want more than five TOC levels. */
  }
  #toc > li {
    counter-increment: toc1;
    counter-reset: toc2;
  }
  #toc > li > a::before {
    content: counter(toc1) " ";
  }
  #toc > li > a[href="#preface"]::before {
    counter-reset: toc1;
    content: "";
  }
  #toc > li > ul > li {
    counter-increment: toc2;
    counter-reset: toc3;
  }
  #toc > li > ul > li > a::before {
    content: counter(toc1) "." counter(toc2) " ";
  }
  #toc > li > ul > li > ul > li {
    counter-increment: toc3;
    counter-reset: toc4;
  }
  #toc > li > ul > li > ul > li > a::before {
    content: counter(toc1) "." counter(toc2) "." counter(toc3) " ";
  }
  #toc > li > ul > li > ul > li > ul > li {
    counter-increment: toc4;
    counter-reset: toc5;
  }
  #toc > li > ul > li > ul > li > ul > li > a::before {
    content: counter(toc1) "." counter(toc2) "." counter(toc3) "." counter(toc4) " ";
  }
  #toc > li > ul > li > ul > li > ul > li > ul > li {
    counter-increment: toc5;
    counter-reset: toc6;
  }
  #toc > li > ul > li > ul > li > ul > li > ul > li > a::before {
    content: counter(toc1) "." counter(toc2) "." counter(toc3) "." counter(toc4) "." counter(toc5) " ";
  }
  a[href="#document-top"] {
    display: none;
  }
  h1 {
    margin-bottom: 50px;
    border-bottom: 0;
  }
  h2 {
    margin-bottom: 30px;
    page-break-before: always;
    border-bottom: 0;
  }
  h2,
  h3,
  h4,
  h5,
  h6 {
    page-break-after: avoid;
  }
  @page {
    size: A4;
    margin: 50pt 30pt 50pt 30pt;
    padding-top: 20pt;
    @bottom-right {
      content: counter(page);
      font-family: 'sans-serif';
      font-size: 0.8em;
    }
  }
}
</style>
  <style>.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.note > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23264c72' d='M32 32C32 14.3 46.3 0 64 0H320c17.7 0 32 14.3 32 32s-14.3 32-32 32H290.5l11.4 148.2c36.7 19.9 65.7 53.2 79.5 94.7l1 3c3.3 9.8 1.6 20.5-4.4 28.8s-15.7 13.3-26 13.3H32c-10.3 0-19.9-4.9-26-13.3s-7.7-19.1-4.4-28.8l1-3c13.8-41.5 42.8-74.8 79.5-94.7L93.5 64H64C46.3 64 32 49.7 32 32zM160 384h64v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V384z' /%3E %3C/svg%3E") }
.tip > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23009926' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }
.sidebar > p:first-child:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%23555555' d='M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z' /%3E %3C/svg%3E") }a[href^='#document-top']:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 448 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%234183c4' d='M246.6 41.4c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 109.3 361.4 246.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3l-160-160zm160 352l-160-160c-12.5-12.5-32.8-12.5-45.3 0l-160 160c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L224 301.3 361.4 438.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3z' /%3E %3C/svg%3E") }
a[href^='http']:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 512 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%234183c4' d='M352 256c0 22.2-1.2 43.6-3.3 64H163.3c-2.2-20.4-3.3-41.8-3.3-64s1.2-43.6 3.3-64H348.7c2.2 20.4 3.3 41.8 3.3 64zm28.8-64H503.9c5.3 20.5 8.1 41.9 8.1 64s-2.8 43.5-8.1 64H380.8c2.1-20.6 3.2-42 3.2-64s-1.1-43.4-3.2-64zm112.6-32H376.7c-10-63.9-29.8-117.4-55.3-151.6c78.3 20.7 142 77.5 171.9 151.6zm-149.1 0H167.7c6.1-36.4 15.5-68.6 27-94.7c10.5-23.6 22.2-40.7 33.5-51.5C239.4 3.2 248.7 0 256 0s16.6 3.2 27.8 13.8c11.3 10.8 23 27.9 33.5 51.5c11.6 26 20.9 58.2 27 94.7zm-209 0H18.6C48.6 85.9 112.2 29.1 190.6 8.4C165.1 42.6 145.3 96.1 135.3 160zM8.1 192H131.2c-2.1 20.6-3.2 42-3.2 64s1.1 43.4 3.2 64H8.1C2.8 299.5 0 278.1 0 256s2.8-43.5 8.1-64zM194.7 446.6c-11.6-26-20.9-58.2-27-94.6H344.3c-6.1 36.4-15.5 68.6-27 94.6c-10.5 23.6-22.2 40.7-33.5 51.5C272.6 508.8 263.3 512 256 512s-16.6-3.2-27.8-13.8c-11.3-10.8-23-27.9-33.5-51.5zM135.3 352c10 63.9 29.8 117.4 55.3 151.6C112.2 482.9 48.6 426.1 18.6 352H135.3zm358.1 0c-30 74.1-93.6 130.9-171.9 151.6c25.5-34.2 45.2-87.7 55.3-151.6H493.4z' /%3E %3C/svg%3E") }
a[href*='github.com']:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 496 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%234183c4' d='M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z' /%3E %3C/svg%3E") }
a[href$='.zip']:before { background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 384 512' xmlns='http://www.w3.org/2000/svg'%3E %3Cpath fill='%234183c4' d='M64 0C28.7 0 0 28.7 0 64V448c0 35.3 28.7 64 64 64H320c35.3 0 64-28.7 64-64V160H256c-17.7 0-32-14.3-32-32V0H64zM256 0V128H384L256 0zM96 48c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16zm0 64c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16s-7.2 16-16 16H112c-8.8 0-16-7.2-16-16zm-6.3 71.8c3.7-14 16.4-23.8 30.9-23.8h14.8c14.5 0 27.2 9.7 30.9 23.8l23.5 88.2c1.4 5.4 2.1 10.9 2.1 16.4c0 35.2-28.8 63.7-64 63.7s-64-28.5-64-63.7c0-5.5 .7-11.1 2.1-16.4l23.5-88.2zM112 336c-8.8 0-16 7.2-16 16s7.2 16 16 16h32c8.8 0 16-7.2 16-16s-7.2-16-16-16H112z' /%3E %3C/svg%3E") }</style>
  
  <style>
.reference-title {
  font-size: 120%;  
  font-weight: 600;
}
.min-terminal {
    -moz-background-clip: padding;
    -webkit-background-clip: padding-box;
    background-clip: padding-box;
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    border-radius: 3px;
    margin: 10px auto;
    padding: 2px 4px 0 4px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);
    color: #eee;
    background-color: #222;
    border: 1px solid #ccc;
    white-space: pre;
    padding: 0 3px;
    border: 2px solid #999;
    border-top: 10px solid #999;
}
.min-terminal p {
  margin: 0 auto;  
}
.min-terminal p, .min-terminal p:first-child {
    margin-top: 0;
    margin-bottom: 0;
    text-shadow: none;
    font-weight: normal;
    font-family: "Source Code Pro", "Monaco", "DejaVu Sans Mono", "Courier New", monospace;
    font-size: 85%;
    color: #eee;
}
</style>

  
</head>
<body class="headings">
  <div id="container">
    <a id="document-top"></a>
    <div id="header"><h1>min Language Developer Guide</h1></div>
    <div id="toc"><ul>
 <li>
 <ul>
  <li><a href="#About-min">About min</a>
  <ul>
   <li><a href="#Why?">Why?</a></li>
   <li><a href="#How?">How?</a></li>
   <li><a href="#Who?">Who?</a></li>
   <li><a href="#When?">When?</a></li>
  </ul>
  </li>
  <li><a href="#Get-Started">Get Started</a>
  <ul>
   <li><a href="#Building-from-source">Building from source</a>
   <ul>
    <li><a href="#Using-nimble">Using nimble</a></li>
    <li><a href="#Building-from-source-for-additional-platforms">Building from source for additional platforms</a></li>
    <li><a href="#Additional-build-options">Additional build options</a>
    <ul>
     <li><a href="#-d:ssl">-d:ssl</a></li>
     <li><a href="#-d:nopcre">-d:nopcre</a>
</li>
    </ul>
    </li>
   </ul>
   </li>
   <li><a href="#Building-a-docker-image">Building a docker image</a></li>
   <li><a href="#Running-the-min-shell">Running the min shell</a></li>
   <li><a href="#Executing-a-min-program">Executing a min program</a></li>
   <li><a href="#Compiling-a-min-program">Compiling a min program</a></li>
   <li><a href="#Getting-help-on-a-min-symbol">Getting help on a min symbol</a></li>
   <li><a href="#Syntax-highlighting">Syntax highlighting</a></li>
  </ul>
  </li>
  <li><a href="#Learning-the-min-Language">Learning the min Language</a>
  <ul>
   <li><a href="#Data-Types">Data Types</a></li>
   <li><a href="#Quotations">Quotations</a>
   <ul>
    <li><a href="#Quoting,-dequoting,-and-applying">Quoting, dequoting, and applying</a></li>
   </ul>
   </li>
   <li><a href="#Operators">Operators</a>
   <ul>
    <li><a href="#Symbols">Symbols</a>
    <ul>
     <li><a href="#Using-the-lambda-operator">Using the lambda operator</a></li>
    </ul>
    </li>
    <li><a href="#Sigils">Sigils</a></li>
    <li><a href="#Auto-popping">Auto-popping</a></li>
    <li><a href="#Operator-signatures">Operator signatures</a>
    <ul>
     <li><a href="#Type-classes">Type classes</a>
     <ul>
      <li><a href="#Capturing-lambdas">Capturing lambdas</a></li>
     </ul>
     </li>
     <li><a href="#Type-expressions">Type expressions</a></li>
     <li><a href="#Type-aliases">Type aliases</a></li>
     <li><a href="#Generics">Generics</a></li>
     <li><a href="#Constructors">Constructors</a>
</li>
    </ul>
    </li>
   </ul>
   </li>
   <li><a href="#Definitions">Definitions</a>
   <ul>
    <li><a href="#Lexical-scoping-and-binding">Lexical scoping and binding</a></li>
    <li><a href="#Sealing-symbols">Sealing symbols</a></li>
   </ul>
   </li>
   <li><a href="#Scopes">Scopes</a>
   <ul>
    <li><a href="#Accessing-the-current-scope">Accessing the current scope</a></li>
    <li><a href="#Dequoting-a-quotation-within-the-context-of-a-specific-scope">Dequoting a quotation within the context of a specific scope</a></li>
   </ul>
   </li>
   <li><a href="#Control-Flow">Control Flow</a>
   <ul>
    <li><a href="#Conditionals">Conditionals</a></li>
    <li><a href="#Loops">Loops</a></li>
    <li><a href="#Error-handling">Error handling</a>
</li>
   </ul>
   </li>
  </ul>
  </li>
  <li><a href="#Using-the-min-Shell">Using the min Shell</a>
  <ul>
   <li><a href="#Autocompletion-and-shortcuts">Autocompletion and shortcuts</a></li>
   <li><a href="#Shell-configuration-files">Shell configuration files</a>
   <ul>
    <li><a href="#.minrc">.minrc</a></li>
    <li><a href="#.min_history">.min_history</a></li>
    <li><a href="#.min_symbols">.min_symbols</a>
</li>
   </ul>
   </li>
  </ul>
  </li>
  <li><a href="#Extending-min">Extending min</a>
  <ul>
   <li><a href="#Implementing-new-min-modules-using-min-itself">Implementing new min modules using min itself</a></li>
   <li><a href="#Specifying-your-custom-prelude-program">Specifying your custom prelude program</a></li>
   <li><a href="#Embedding-min-in-your-Nim-program">Embedding min in your Nim program</a></li>
  </ul>
  </li>
  <li><a href="#Reference">Reference</a>
  <ul>
   <li><a href="#Notation">Notation</a>
   <ul>
    <li><a href="#Types-and-Values">Types and Values</a></li>
    <li><a href="#Suffixes">Suffixes</a></li>
   </ul>
   </li>
   <li><a href="#<code>lang</code>-Module"><code>lang</code> Module</a></li>
   <li><a href="#<code>stack</code>-Module"><code>stack</code> Module</a></li>
   <li><a href="#<code>seq</code>-Module"><code>seq</code> Module</a></li>
   <li><a href="#<code>dict</code>-Module"><code>dict</code> Module</a></li>
   <li><a href="#<code>dstore</code>-Module"><code>dstore</code> Module</a></li>
   <li><a href="#<code>io</code>-Module"><code>io</code> Module</a></li>
   <li><a href="#<code>fs</code>-Module"><code>fs</code> Module</a></li>
   <li><a href="#<code>logic</code>-Module"><code>logic</code> Module</a></li>
   <li><a href="#<code>str</code>-Module"><code>str</code> Module</a></li>
   <li><a href="#<code>sys</code>-Module"><code>sys</code> Module</a></li>
   <li><a href="#<code>num</code>-Module"><code>num</code> Module</a></li>
   <li><a href="#<code>time</code>-Module"><code>time</code> Module</a></li>
   <li><a href="#<code>crypto</code>-Module"><code>crypto</code> Module</a></li>
   <li><a href="#<code>math</code>-Module"><code>math</code> Module</a></li>
   <li><a href="#<code>net</code>-Module"><code>net</code> Module</a></li>
   <li><a href="#<code>http</code>-Module"><code>http</code> Module</a></li>
   <li><a href="#<code>xml</code>-Module"><code>xml</code> Module</a></li>
  </ul>
  </li>
 </ul>
 </li>
</ul>
</div>
    <div id="main">




<a id="About-min"></a>
<h2>About min<a href="#document-top" title="Go to top"></a></h2>

<p><strong>min</strong> is a concatenative, fully-homoiconic, functional, interpreted programming language.</p>

<p>This basically means that:</p>

<ul>
<li>It is based on a somewhat obscure and slightly unintuitive programming paradigm, think of <a href="http://www.forth.org/">Forth</a>, <a href="http://factorcode.org/">Factor</a> and <a href="http://www.kevinalbrecht.com/code/joy-mirror/">Joy</a> but with parentheses for an extra <a href="https://common-lisp.net/">Lisp</a>y flavor.</li>
<li>Programs written in min are actually written using <em>quotations</em>, i.e. lists.</li>
<li>It comes with map, filter, find, map-reduce, and loads of other functional goodies. See the <a href="#&lt;code>seq&lt;/code>-Module">seq Module</a> for more.</li>
<li>It is probably slower than the average production-ready programming language.</li>
</ul>


<a id="Why?"></a>
<h3>Why?<a href="#document-top" title="Go to top"></a></h3>

<p>Because creating a programming language is something that every programmer needs to do, at some point in life. And also because there are way too few <a href="http://concatenative.org/wiki/view/Front%20Page">concatenative</a> programming language out there &ndash; so people are likely to be <em>less</em> pissed off than if I made a yet another Lisp instead.</p>

<p>I always wanted to build a minimalist language, but that could also be used for real work and provided a standard library for common tasks and functionalities like regular expression support, cryptography, execution of external programs, shell-like operators, and keywords to work with files, and more.</p>

<p>Additionally, I wanted it to be fully self-contained, cross-platform, and small. Not stupidly small, but I feel it&rsquo;s a good compromise compared to the alternatives out there, considering that you only need <em>one file</em> to run any min program.</p>

<p> I also created a static site generator called <a href="https://github.com/h3rald/hastysite">HastySite</a>, which also powers <a href="https://min-lang.org">https://min-lang.org</a>. HastySite internally uses min as the language to write the <a href="https://github.com/h3rald/min/blob/master/site/rules.min">rules</a> to process the source files of the site, and also all its <a href="https://github.com/h3rald/min/tree/master/site/scripts">scripts</a>.</p>

<p>Finally, I think more and more people should get to know concatenative programming languages, because <a href="http://evincarofautumn.blogspot.it/2012/02/why-concatenative-programming-matters.html">concatenative programming matters</a>.</p>

<a id="How?"></a>
<h3>How?<a href="#document-top" title="Go to top"></a></h3>

<p>min is developed entirely in <a href="https://nim-lang.org">Nim</a> &ndash; the name is (almost) entirely a coincidence. I wanted to call it <em>minim</em> but then shortened it for more&hellip; minimalism.</p>

<p>min&rsquo;s parser started off as a fork of Nim&rsquo;s JSON parser &ndash; adapted to process a concatenative programming language with less primitive types than JSON. It is interpreted in the traditional sense: no bytecode, no JIT, just plain read, parse, and run.</p>

<a id="Who?"></a>
<h3>Who?<a href="#document-top" title="Go to top"></a></h3>

<p>min was created and implemented by <a href="https://h3rald.com">Fabio Cevasco</a>, with contributions by <a href="https://peterme.net">Peter Munch-Ellingsen</a>, <a href="https://github.com/drkameleon">Yanis Zafirópulos</a>, and <strong>baykus871</strong>.</p>

<p>Special thanks to <a href="https://github.com/mwgkgk">mwgkgk</a> for contributing to the design of native dictionaries.</p>

<a id="When?"></a>
<h3>When?<a href="#document-top" title="Go to top"></a></h3>

<p>min source code <a href="https://github.com/h3rald/min">repository</a> was created on November 8<sup>th</sup> 2014. This only means that I&rsquo;ve been very slowly developing something that was actually made public at the end of July 2017.</p>

<a id="Get-Started"></a>
<h2>Get Started<a href="#document-top" title="Go to top"></a></h2>

<p>You can download one of the following pre-built min binaries:</p>

<ul>
<li><a href="https://github.com/h3rald/min/releases/download/v0.39.2/min_v0.39.2_macosx_x64.zip">min v0.39.2 for macOS (x64)</a></li>
<li><a href="https://github.com/h3rald/min/releases/download/v0.39.2/min_v0.39.2_windows_x64.zip">min v0.39.2 for Windows (x64)</a></li>
<li><a href="https://github.com/h3rald/min/releases/download/v0.39.2/min_v0.39.2_linux_x64.zip">min v0.39.2 for Linux (x64)</a></li>
</ul>


<a id="Building-from-source"></a>
<h3>Building from source<a href="#document-top" title="Go to top"></a></h3>

<p>Alternatively, you can build min from source in one of the following ways:</p>

<a id="Using-nimble"></a>
<h4>Using nimble<a href="#document-top" title="Go to top"></a></h4>

<p>If you already installed <a href="https://nim-lang.org">nim</a>, you probably already have the <a href="https://github.com/nim-lang/nimble">nimble</a> package manager installed.</p>

<p>If that&rsquo;s the case, simply run <strong>nimble install min</strong>.</p>

<a id="Building-from-source-for-additional-platforms"></a>
<h4>Building from source for additional platforms<a href="#document-top" title="Go to top"></a></h4>

<p>By default, min is released as a pre-built binary executable for Windows x64, macOS x64 and Linux x64. However, it should run without issues on any <a href="https://github.com/nim-lang/Nim/blob/devel/lib/system/platforms.nim">platform supported by the Nim programming language</a>.</p>

<p>To build on a different operating system and architecture from the default ones, you also need to get or build the following static libraries:</p>

<ul>
<li>libssl (OpenSSL)</li>
<li>libcrypto (OpenSSL)</li>
<li>libpcre (PCRE)</li>
</ul>


<p>and also specify the following additional flag when compiling:</p>

<p><code>--passL:"-static -L&lt;dir&gt; -lpcre -lssl -lcrypto"</code></p>

<p>Where <code>&lt;dir&gt;</code> is the directory containing the <code>*.a</code> files for the static libraries listed above.</p>

<div class="tip"><p>Alternatively, if you can also opt out from OpenSSL and PCRE support by:</p>

<ul>
<li><em>Not</em> specifying <code>-d:ssl</code></li>
<li>Specifying <code>-d:nopcre</code></li>
</ul>
</div>

<a id="Additional-build-options"></a>
<h4>Additional build options<a href="#document-top" title="Go to top"></a></h4>

<a id="-d:ssl"></a>
<h5>-d:ssl<a href="#document-top" title="Go to top"></a></h5>

<p>If the <strong>-d:ssl</strong> flag is specified when compiling, min will be built with SSL support, so it will be possible to:</p>

<ul>
<li>perform HTTPS requests with the <a href="#&lt;code>http&lt;/code>-Module">http Module</a>.</li>
<li>use all the cryptographic symbols defined in the <a href="#&lt;code>crypto&lt;/code>-Module">crypto Module</a>.</li>
</ul>


<p>If this flag is not specified:</p>

<ul>
<li>It will not be possible to perform HTTPS requests</li>
<li><p>Only the following symbols will be exposed by the <a href="#&lt;code>crypto&lt;/code>-Module">crypto Module</a>:</p>

<ul>
<li><a href="#min-operator-id-md5">md5</a></li>
<li><a href="#min-operator-id-sha1">sha1</a></li>
<li><a href="#min-operator-id-encode">encode</a></li>
<li><a href="#min-operator-id-decode">decode</a></li>
<li><a href="#min-operator-id-aes">aes</a></li>
</ul>
</li>
</ul>


<a id="-d:nopcre"></a>
<h5>-d:nopcre<a href="#document-top" title="Go to top"></a></h5>

<p>If the <strong>-d:nopcre</strong> is specified when compiling, min will be built <em>without</em> PCRE support, so it will not be possible to use regular expressions and the following symbols will <em>not</em> be exposed by the <a href="#&lt;code>str&lt;/code>-Module">str Module</a>:</p>

<ul>
<li><a href="#min-operator-id-search">search</a></li>
<li><a href="#min-operator-id-match?">match?</a></li>
<li><a href="#min-operator-id-search-all">search-all</a></li>
<li><a href="#min-operator-id-replace">replace</a></li>
<li><a href="#min-operator-id-replace-apply">replace-apply</a></li>
</ul>


<a id="Building-a-docker-image"></a>
<h3>Building a docker image<a href="#document-top" title="Go to top"></a></h3>

<p><a href="https://github.com/drkameleon">Yanis Zafirópulos</a> contributed a Dockerfile that you can use to create your own Docker image for min based on Alpine Linux.</p>

<p>To build the image locally, execute the following command from the repository root directory:</p>

<div class="terminal"><p>docker build -t mindocker .</p></div>

<p>To run it, execute:</p>

<div class="terminal"><p>docker run -it mindocker</p></div>

<a id="Running-the-min-shell"></a>
<h3>Running the min shell<a href="#document-top" title="Go to top"></a></h3>

<p>To start the min shell, run <span class="cmd">min</span> with no arguments. You will be presented with a prompt displaying the path to the current directory:</p>

<div class="min-terminal"><p>min shell v0.39.2
<span class="prompt">[/Users/h3rald/test]$</span></p></div>

<p>You can type min code and press <span class="kbd">ENTER</span> to evaluate it immediately:</p>

<div class="min-terminal"><p><span class="prompt">[/Users/h3rald/test]$</span> 2 2 +
 4
<span class="prompt">[/Users/h3rald/test]$</span></p></div>

<p>The result of each operation will be placed on top of the stack, and it will be available to subsequent operation</p>

<div class="min-terminal"><p><span class="prompt">[/Users/h3rald/test]$</span> dup *
 16
<span class="prompt">[/Users/h3rald/test]$</span></p></div>

<p>To exit min shell, press <span class="kbd">CTRL+C</span> or type <span class="cmd">0 exit</span> and press <span class="kbd">ENTER</span>.</p>

<div class="tip"><p>Tip</p>

<p>By default, the min shell provides advanced features like tab-completion, history, etc. If however, you run into problems, you can disable these features by running <span class="cmd">min -j</span> instead, and run min shell with a bare-bones REPL.</p></div>

<a id="Executing-a-min-program"></a>
<h3>Executing a min program<a href="#document-top" title="Go to top"></a></h3>

<p>To execute a min script, you can:</p>

<ul>
<li>Run <code>min eval "... program..."</code> to execute a program inline.</li>
<li>Run <code>min myfile.min</code> to execute a program contained in a file.</li>
</ul>


<p>min also supports running programs from standard input, so the following command can also be used (on Unix-like system) to run a program saved in <span class="file">myfile.min</span>:</p>

<div class="min-terminal"><p><span class="prompt">$</span> cat myfile.min | min</p></div>

<div class="tip"><p>You can enable <em>development mode</em> (runtime checks and validations) by specifying <code>-d</code> (<code>--dev</code>) when running a min program. If development mode is not enabled, min programs run faster.</p></div>

<a id="Compiling-a-min-program"></a>
<h3>Compiling a min program<a href="#document-top" title="Go to top"></a></h3>

<p>min programs can be compiled to a single executable simply by using the built-in <code>compile</code> command:</p>

<div class="min-terminal"><p><span class="prompt">$</span> min compile myfile.min</p></div>

<p>Essentially, this will:</p>

<ol>
<li>Generate a <span class="file">myfile.nim</span> containing the equivalent Nim code of your min program.</li>
<li>Call the Nim compiler to do the rest ;)</li>
</ol>


<p>If you want to pass any options to the Nim compiler (like <code>-d:release</code> for example) you can do so by using the <code>-n</code> (or <code>--passN</code>) option:</p>

<div class="min-terminal"><p><span class="prompt">$</span> min compile myfile.min -n:&quot;-d:release &ndash;threadAnalysis:off &ndash;mm:refc&quot;</p></div>

<p>Additionally, you can also use <code>-m:&lt;path&gt;</code> (or <code>--module-path</code>) to specify one path containing <span class="ext">.min</span> files which will be compiled as well (but not executed) along with the specified file. Whenever a <a href="#min-operator-id-load">load</a> or a <a href="#min-operator-id-require">require</a> symbol is used to load/require an external <span class="ext">.min</span> file, it will attempt to retrieve its contents from the pre-loaded files first before searching the filesystem.</p>

<p>For example, the following command executed in the root folder of the min project will compile <span class="file">run.min</span> along with all <span class="ext">.min</span> files included in the <span class="dir">tasks</span>  folder and its subfolders:</p>

<div class="min-terminal"><p><span class="prompt">$</span> min compile run.min -m:tasks</p></div>

<p>Similarly, you can also bundle additional files in the executable by specifying the <code>-a:&lt;path&gt;</code> (or <code>--asset-path</code>) option. At runtime, the compiled min program will attempt to lookup bundled asset files before checking the filesystem.</p>

<div class="note"><p>Note</p>

<p>In order to successfully compile <a href="class.ext">.min</a> files, Nim must be installed on your system and min must be installed via nimble.</p></div>

<a id="Getting-help-on-a-min-symbol"></a>
<h3>Getting help on a min symbol<a href="#document-top" title="Go to top"></a></h3>

<p>min comes with a built-in <code>help</code> command that can be used to print information on a specific symbol. Essentially, this is equivalent to use the <a href="#min-operator-id-help">help</a> symbol within the min REPL.</p>

<div class="min-terminal"><p><span class="prompt">$</span> min help dup</p></div>

<a id="Syntax-highlighting"></a>
<h3>Syntax highlighting<a href="#document-top" title="Go to top"></a></h3>

<ul>
<li>If you are using <a href="https://code.visualstudio.com/">Visual Studio Code</a>, you can install the official <a href="https://marketplace.visualstudio.com/items?itemName=h3rald.vscode-min-lang">min extension</a> which provides syntax highlighting support, code folding, and auto-indentation.</li>
<li>If you are using <a href="https://www.vim.org">Vim</a>, a <a href="https://github.com/h3rald/min/blob/master/min.vim">min.vim</a> syntax definition file is available in the min repo.</li>
<li>If you are using <a href="https://www.sublimetext.com/3">Sublime Text 3</a>, Rafael Carrasco created a min syntax definition file that is available <a href="https://github.com/rscarrasco/min-sublime-syntax">here</a>.</li>
<li>If you are using <a href="https://notepad-plus-plus.org">Notepad++</a>, a <a href="https://github.com/h3rald/min/blob/master/minNotepad++.xml">Notepad++ language file</a> contributed by baykus871 is available in the repo.</li>
</ul>


<a id="Learning-the-min-Language"></a>
<h2>Learning the min Language<a href="#document-top" title="Go to top"></a></h2>

<p><em>min</em> is a stack-based, concatenative programming language that uses postfix notation. If you already know <a href="http://www.forth.org/">Forth</a>, <a href="http://factorcode.org/">Factor</a> or <a href="http://www.kevinalbrecht.com/code/joy-mirror/">Joy</a>, or if you ever used an <a href="https://en.wikipedia.org/wiki/Reverse_Polish_notation">RPN</a> calculator, then min will look somewhat familiar to you.</p>

<p>If not, well, here&rsquo;s how a short min program looks like:</p>

<pre><code>; This is a comment
(1 2 3 4 5) (dup *) map
#| This is a...
   ...multiline comment |#
</code></pre>

<p>This program returns a list containing the square values of the first five integer numbers:</p>

<pre><code>(1 4 9 16 25)
</code></pre>

<p>Let&rsquo;s see how it works:</p>

<ol>
<li>First, a list containing the first five integers is pushed on the stack.</li>
<li>Then, another list containing two symbols (<code>dup</code> and <code>*</code>) is pushed on the stack. This constitutes a quoted program which, when executed duplicates the first element on the stack &mdash; this is done by <code>dup</code>&mdash; and then multiplies &mdash; with <code>*</code>&mdash; the two elements together.</li>
<li>Finally, the symbol <code>map</code> is pushed on the stack. Map takes a list of elements and a quoted program and applies the program to each element.</li>
</ol>


<p>Note that:</p>

<ul>
<li>There are no variable assignments.</li>
<li>elements are pushed on the stack one by one.</li>
<li>Parentheses are used to group one or more elements together so that they are treated as a single element and they are not evaluated immediately.</li>
<li><em>Symbols</em> (typically single words, or several words joined by dashes) are used to execute code that performs operations on the whole stack.</li>
</ul>


<p>Unlike more traditional programming languages, in a concatenative programming language, there is no inherent need for variables or named parameters, as symbols act as stack operators that consume elements that are placed in order on top of a stack.</p>

<a id="Data-Types"></a>
<h3>Data Types<a href="#document-top" title="Go to top"></a></h3>

<p>The following data types are availanle in <em>min</em> (with the corresponding shorthand symbols used in operator signatures in brackets):</p>

<dl>
<dt>null (null)</dt>
<dd>null value.</dd>
<dt>boolean (bool)</dt>
<dd><strong>true</strong> or <strong>false</strong>.</dd>
<dt>integer (int)</dt>
<dd>A 64-bit integer number like 1, 27, or -15.</dd>
<dt>float (flt)</dt>
<dd>A 64-bit floating-point number like 3.14 or -56.9876.</dd>
<dt>string (str)</dt>
<dd>A series of characters wrapped in double quotes: &ldquo;Hello, World!&rdquo;.</dd>
<dt>quotation (quot)</dt>
<dd>A list of elements, which may also contain symbols. Quotations can be used to create heterogenous lists of elements of any data type, and also to create a block of code that will be evaluated later on (quoted program). Example: (1 2 3 + *)</dd>
<dt>command (cmd)</dt>
<dd>A command string wrapped in square brackets that will be immediately executed on the current shell and converted into the command standard output. Example: <code>[ls -a]</code></dd>
<dt>dictionary (dict)</dt>
<dd><p>A key/value table. Dictionaries are implemented as an immediately-dequoted quotation, are enclosed in curly braces, and are represented by their symbol definitions. Note that dictionary keys must start with <code>:</code>and be followed by a double-quoted string, or a single word (which can be written without double quotes). The <a href="#&lt;code>dict&lt;/code>-Module">dict Module</a> provides some operators on dictionaries.</p>

<div class="sidebar"><p>Example</p>

<p>The following is a simple dictionary containing three keys: <em>name</em>, <em>paradigm</em>, and <em>first-release-year</em>:</p>

<pre><code>{
    "min" :name
    "concatenative" :paradigm
    2017 :"first release year"
}
</code></pre></div></dd>
</dl>

<p>Additionally, dictionaries can also be typed to denote complex objects like sockets, errors, etc. For example, the following dictionary defines an error:</p>

<pre><code>  {
   "MyError" :error
   "An error occurred" :message
   "symbol1" :symbol
   "dir1/file1.min" :filename
   3 :line
   13 :column
   ;error
  }
</code></pre>

<div class="tip"><p>Tip</p>

<p>The <a href="#min-operator-id-dtype">dtype</a> operator can be used to set the type of a dictionary.</p></div>

<p>The <a href="#&lt;code>logic&lt;/code>-Module">logic Module</a> provides predicate operators to check if an element belongs to a particular data type or pseudo-type (<code>boolean?</code>, <code>number?</code>, <code>integer?</code>, <code>float?</code>, &hellip;).</p>

<p>Additionally, the <a href="#&lt;code>lang&lt;/code>-Module">lang Module</a> provides operators to convert values from a data type to another (e.g. <a href="#min-operator-id-integer">integer</a>, <a href="#min-operator-id-string">string</a>, and so on).</p>

<div class="note"><p>Note</p>

<p>Most of the operators defined in the <a href="#&lt;code>num&lt;/code>-Module">num Module</a> are able to operate on both integers and floats.</p></div>

<a id="Quotations"></a>
<h3>Quotations<a href="#document-top" title="Go to top"></a></h3>

<p>Quotations are the most important thing to understand in min. Besides being the data type used for lists, they are also used to delimit blocks of min code that is not going to be immediately executed.</p>

<p>Consider for example the following min code which returns all the files present in the current folder sorted by name:</p>

<pre><code> . ls (ftype "file" ==) filter '&gt; sort
</code></pre>

<p>The symbol <a href="#min-operator-id-filter">filter</a> takes two quotations as arguments &ndash; the first quotation on the stack is applied to all the elements of the second quotation on the stack, to determine which elements of the second quotation will be part of the resulting quotation. This is an example of how quotations can be used both as lists and programs.</p>

<p>Let&rsquo;s examine this program step-by-step:</p>

<ol>
<li>The <code>.</code> symbol is pushed on the stack, and it is immediately evaluated to the full path to the current directory.</li>
<li>The <code>ls</code> symbol is pushed on the stack, it consumes the string already on the stack and returns a quotation containing all files and directories within the current directory.</li>
<li>The quotation <code>(ftype 'file ==)</code> is pushed on the stack. It is treated exactly like a list of data and it is not evaluated.</li>
<li>The <code>filter</code> symbol is pushed on the stack. This symbol takes two quotations as input, and applies the result of the first quotation on the stack (<code>(ftype "file" ==)</code>) to all elements of the second quotation of the stack (the list of files and directories), returning a new quotation containing only those elements of the second quotation on the stack that satisfy the result of the first quotation. In this case, it returns a new quotation containing only files.</li>
<li><code>'&gt;</code> is pushed on the stack. The <code>'</code> sigil can be used instead of the <code>quote</code> symbol to quote a single symbol, <code>&gt;</code> in this case. In other words, it is instantly evaluated to the quotation <code>(&gt;)</code>.</li>
<li>The symbol <code>sort</code> is pushed on the stack. This symbol, like <code>filter</code>, takes two quotations as input, and applies the first quotation to each element of the second quotation, effectively sorting each element of the second quotation using the predicate expressed by the first quotation. In this case, all files are sorted by name in ascending order.</li>
</ol>


<div class="tip"><p>Tip</p>

<p>The <a href="#&lt;code>seq&lt;/code>-Module">seq Module</a> provides several symbols to work with quotations in a functional way.</p></div>

<a id="Quoting,-dequoting,-and-applying"></a>
<h4>Quoting, dequoting, and applying<a href="#document-top" title="Go to top"></a></h4>

<p>When a quotation is created, it is treated as data, no matter what it contains: it is placed on the stack, like an integer or a string would. However, unlike other data types, a quotation can be evaluated in certain situations and when it happens its contents are pushed on the stack.</p>

<p>Consider the following program:</p>

<pre><code> (1 2 3 4 5 6 7) (odd?) filter
</code></pre>

<p>This program returns a new quotation containing all odd numbers contained in quotation <code>(1 2 3 4 5 6 7)</code>.</p>

<p>In this case, the second quotation is used to <em>quote</em> the symbol <code>odd?</code> so that instead of being executed immediately, it will be executed by the symbol <code>filter</code> on each element of the first quotation. In this way, we may say that <code>(odd?)</code> is <em>dequoted</em> by the symbol <code>filter</code>.</p>

<p>The symbol <a href="#min-operator-id-dequote">dequote</a> or its alias <code>-&gt;</code> can be used to dequote a quotation by pushing all its elements on the main stack. Essentially, this <em>executes</em> the quotation in the current context.</p>

<p>For example, the following program leaves the elements <code>1</code> and <code>-1</code> on the stack:</p>

<pre><code> (1 2 3 -) -&gt;
</code></pre>

<p>Alternatively, the symbol <a href="#min-operator-id-apply">apply</a> or its alias <code>=&gt;</code> can also be used to dequote a quotation but in this case it will not push its elements on the main stack, instead it will:</p>

<ol>
<li>Create a temporary empty stack.</li>
<li>Push all elements on it, one by one.</li>
<li>Push the entire temporary stack as a quotation back on the main stack.</li>
</ol>


<p>For example, the following program leaves the element <code>(1 -1)</code> on the stack:</p>

<pre><code> (1 2 3 -) =&gt;
</code></pre>

<a id="Operators"></a>
<h3>Operators<a href="#document-top" title="Go to top"></a></h3>

<p>Every min program needs <em>operators</em> to:</p>

<ul>
<li>Manipulate elements on the stack</li>
<li>Perform operations on data</li>
<li>Provide side effects (read/print to standard input/output/files, etc.)</li>
</ul>


<p>There are two types of operators: <em>symbols</em> and <em>sigils</em>.</p>

<a id="Symbols"></a>
<h4>Symbols<a href="#document-top" title="Go to top"></a></h4>

<p><em>Symbols</em> are the most common type of operator. A min symbol is a single word that is either provided by one of the predefined min modules like <code>dup</code> or <code>.</code> or defined by the user. User-defined symbols must:</p>

<ul>
<li>Start with a letter or an underscore (_).</li>
<li>Contain zero or more letters, numbers and/or any of the following characters: <code>/ ! ? + * . _ -</code></li>
</ul>


<p>It is possible to define operator symbols using the <a href="#min-operator-id-operator">operator</a> symbol. The following min program defines a new symbol called square that duplicates the first element on the stack and multiplies the two elements:</p>

<pre><code> (
   symbol square
   (num :n ==&gt; num :result)
   (n dup * @result)
 ) operator
 ;; Calculates the square of n.
</code></pre>

<p> The <a href="#min-operator-id-operator">operator</a> symbol provides way to:</p>

<ul>
<li>Specify the name of the symbol operator (<strong>square</strong> in this case)</li>
<li>Specify a signature to identify the type of the input and output values (in this case, the operator takes a numeric input value and produces a numeric output value). Also, note how inputs and outputs are captured into the <code>n</code> and <code>result</code> symbols in the signature quotation and then referenced in the body quotation.</li>
<li>Specify a quotation containing the code that the operator will execute.</li>
</ul>


<p>Also, symbol operator definitions can be annotated with documentation comments (starting with <code>;;</code> or wrapped in <code>#|| ... ||#</code>)) so that a help text can be displayed using the <a href="#min-operator-id-help">help</a> symbol.</p>

<a id="Using-the-lambda-operator"></a>
<h5>Using the lambda operator<a href="#document-top" title="Go to top"></a></h5>

<p>Sometimes you just want to bind a piece of code to a symbol to reuse it later, typically something simple and easy-to-read. In these cases, you can use the <a href="#min-operator-id-lambda">lambda</a> operator (or the <code>^</code> sigil). For example, the previous <code>square</code> operator definition could be rewritten simply as the following.</p>

<pre><code> (dup *) ^square
</code></pre>

<p>Note that this feels like using <a href="#min-operator-id-define">define</a>, but the main difference between <a href="#min-operator-id-lambda">lambda</a> and <a href="#min-operator-id-define">define</a> is that <code>lambda</code> only works on quotations doesn&rsquo;t auto-quote them, so that they are immediately evaluated when the corresponding symbol is pushed on the stack.</p>

<p>Also note that unlike with <a href="#min-operator-id-operator">operator</a>, symbols defined with <a href="#min-operator-id-lambda">lambda</a>:</p>

<ul>
<li>have no built-in validation of input and output values.</li>
<li>do not support the <code>return</code> symbol to immediately end their execution.</li>
<li>have no built-in stack pollution checks.</li>
</ul>


<div class="tip"><p>Tip</p>

<p>You can use <a href="#min-operator-id-lambda-bind">lambda-bind</a> to re-set a previously set lambda.</p></div>

<a id="Sigils"></a>
<h4>Sigils<a href="#document-top" title="Go to top"></a></h4>

<p>Besides symbols, you can also define sigils. min provides a set of predefined <em>sigils</em> as abbreviations for commonly used symbols.</p>

<p>A sigil can be prepended to a double-quoted string or a single word (with no spaces) which will be treated as a string instead of using the corresponding symbol.</p>

<p>For example, the following executes the command <code>ls -al</code> and pushes the command return code on the stack:</p>

<pre><code> !"ls -al"
</code></pre>

<p>Currently min provides the following sigils:</p>

<dl>
<dt>'</dt>
<dd>Alias for <a href="#min-operator-id-quote">quote</a>.</dd>
<dt>:</dt>
<dd>Alias for <a href="#min-operator-id-define">define</a>.</dd>
<dt>*</dt>
<dd>Alias for <a href="#min-operator-id-invoke">invoke</a>.</dd>
<dt>@</dt>
<dd>Alias for <a href="#min-operator-id-bind">bind</a>.</dd>
<dt>^</dt>
<dd>Alias for <a href="#min-operator-id-lambda">lambda</a>.</dd>
<dt>></dt>
<dd>Alias for <a href="#min-operator-id-save-symbol">save-symbol</a>.</dd>
<dt>&lt;</dt>
<dd>Alias for <a href="#min-operator-id-load-symbol">load-symbol</a>.</dd>
<dt>/</dt>
<dd>Alias for <a href="#min-operator-id-dget">dget</a>.</dd>
<dt>%</dt>
<dd>Alias for <a href="#min-operator-id-dset">dset</a>.</dd>
<dt>?</dt>
<dd>Alias for <a href="#min-operator-id-help">help</a>.</dd>
<dt>!</dt>
<dd>Alias for <a href="#min-operator-id-system">system</a>.</dd>
<dt>&amp;</dt>
<dd>Alias for <a href="#min-operator-id-run">run</a>.</dd>
<dt>$</dt>
<dd>Alias for <a href="#min-operator-id-get-env">get-env</a>.</dd>
</dl>

<p>Besides system sigils, you can also create your own sigils. Unlike system sigils however, user defined sigils:</p>

<ul>
<li>have the same character restrictions as symbols</li>
<li>can only be prepended to double-quoted strings</li>
<li>can be unsealed, deleted, redefined, and sealed.</li>
</ul>


<p>Sigils can be a very powerful construct and a way to reduce boilerplate code: you can define a sigil to use as you would use any symbol which requires a single string or quoted symbol on the stack.</p>

<p>Like symbols, sigils can be defined with the <a href="#min-operator-id-operator">operator</a> operator, like this:</p>

<pre><code> (
   sigil j
   (string :json ==&gt; a :result)
   (json from-json @result)
 ) operator
</code></pre>

<p>This definition will add a <code>j</code> sigil that will process the following string as JSON code, so for example:</p>

<pre><code> j"{\"test\": true}"
</code></pre>

<p>&hellip;will push the following dictionary on the stack:</p>

<pre><code>{true :test}
</code></pre>

<p>Also, sigil definitions can be annotated with documentation comments (starting with <code>;;</code> or wrapped in <code>#|| ... ||#</code>) so that a help text can be displayed using the <a href="#min-operator-id-help">help</a> symbol.</p>

<a id="Auto-popping"></a>
<h4>Auto-popping<a href="#document-top" title="Go to top"></a></h4>

<p>Typically, but not always, operators push one or more value to the stack. While this is typically the desired behavior, in some cases you may want to keep the stack clear so in these cases you can append a <code>!</code> character to any symbol to cause the symbol <a href="#min-operator-id-pop">pop</a> to be pushed on the stack immediately afterwards.</p>

<pre><code> "test" puts  ;Prints "test" and pushes "test" on the stack.
 "test" puts! ;Prints "test" without pushing anything on the stack.
</code></pre>

<a id="Operator-signatures"></a>
<h4>Operator signatures<a href="#document-top" title="Go to top"></a></h4>

<p>When defining symbols and sigils with the <a href="#min-operator-id-operator">operator</a> operator, you must specify a <em>signature</em> that will be used to validate and capture input and output values:</p>

<pre><code> (
   symbol square
   (num :n ==&gt; num :result)
   (n dup * @result)
 ) operator
</code></pre>

<p>In this case for example the <code>square</code> symbol expects a number on the stack, which will be captured to the symbol <code>n</code> and it will place a number on the stack which needs to be bound in the operator body to the symbol <code>result</code>.</p>

<p>In a signature, a type expression must precede the capturing symbol. Such type expression can be:</p>

<ul>
<li>One of the following shorthand symbols identifying a well-known <em>min</em> base type (see the reference section for more information): <code>a</code>, <code>bool</code>, <code>null</code>, <code>str</code>, <code>int</code>, <code>num</code>, <code>flt</code>, <code>'sym</code>, <code>quot</code>, or <code>dict</code>.</li>
<li>A typed dictionary like <code>dict:module</code> or <code>dict:datastore</code>.</li>
<li>A type class (see below).</li>
<li>a type expression like <code>str|int</code>.</li>
</ul>


<div class="note"><p>Note</p>

<p>If the operator you are defining doesn&rsquo;t require any input value or doesn&rsquo;t leave ang output value on the stack, simply don&rsquo;t put anything before or after the <code>==&gt;</code> separator, respectively. For example, the signature of the <a href="#min-operator-id-puts!">puts!</a> operator could be written like <code>(a ==&gt;)</code>.</p></div>

<a id="Type-classes"></a>
<h5>Type classes<a href="#document-top" title="Go to top"></a></h5>

<p>Besides standard base types, you can define your own <em>type classes</em> to express custom constraints/validations for operator input and output values.</p>

<p>Consider the following type class definition validating a quotation containing strings:</p>

<pre><code> (
   typeclass strquot
   (quot :q ==&gt; bool :o)
   (q (string?) all? @o)
 ) ::
</code></pre>

<p>The <a href="#min-operator-id-operator">operator</a> operator can be used to define a symbol prefixed with <code>typeclass:</code> (<code>typeclass:strquot</code> in this case) corresponding to a type class that can be used in operator signatures in place of a type, like this:</p>

<pre><code> (
   symbol join-strings
   (strquot :q ==&gt; str :result)
   ( 
      q "" (suffix) reduce @result
   )
 )
</code></pre>

<p>This operator will raise an error if anything other than a quotation of strings is found on the stack.</p>

<div class="tip"><p>Tip</p>

<p><code>typeclass:</code>-prefixed symbols are just like ordinary symbols: they are lexically scoped, they can be sealed, unsealed and deleted.</p></div>

<a id="Capturing-lambdas"></a>
<h6>Capturing lambdas<a href="#document-top" title="Go to top"></a></h6>

<p>You can also specify a lambda to be captured to an output value, like this:</p>

<pre><code> (
   symbol square
   (==&gt; quot ^o)
   (
     (dup *) ~o
   )
 ) ::
</code></pre>

<p>Essentially, this allows you to push a lambda on the stack from an operator.</p>

<p>Note that:</p>

<ul>
<li>Lambdas must be captured using the <code>^</code> sigil in signatures and bound using <a href="#min-operator-id-lambda-bind">lambda-bind</a> in the operator body.</li>
<li>Lambdas cannot be captured in input values (they have already been pushed on the stack).</li>
<li>Requiring a lambda as an output value effectively bypasses stack pollution checks. While this can be useful at times, use with caution!</li>
</ul>


<a id="Type-expressions"></a>
<h5>Type expressions<a href="#document-top" title="Go to top"></a></h5>

<p>When specifying types in operator signatures or through the <a href="#min-operator-id-expect">expect</a> operator, you can specify a logical expression containing types and type classes joined with one of the following operators:</p>

<ul>
<li><code>|</code> (or)</li>
<li><code>&amp;</code> (and)</li>
<li><code>!</code> (not)</li>
</ul>


<p>Suppose for example you defined the following type classes:</p>

<pre><code>(typeclass fiveplus
    (int :n ==&gt; bool :o)
    (
      n 5 &gt; @o
    )
) ::

(typeclass tenminus
    (int :n ==&gt; bool :o)
    (
      n 10 &lt; @o
    )
) ::

(typeclass even
    (int :n ==&gt; bool :o)
    (
      n 2 mod 0 == @o
    )
) ::
</code></pre>

<p>You can combine them in a type expression as following:</p>

<pre><code>(symbol test
    (!even|tenminus&amp;fiveplus :n ==&gt; bool :o)
    (
      true @o
    )
) ::
4 test  ; error
6 test  ; true
11 test ; true 
</code></pre>

<a id="Type-aliases"></a>
<h5>Type aliases<a href="#document-top" title="Go to top"></a></h5>

<p>As you can see, type expressions can quickly become quite long and complex. To avoid this, you can define <em>type aliases</em> using the <a href="#min-operator-id-typealias">typealias</a> operator.</p>

<p>For example, you can create an alias of part of the type expression used in the previous example, like this:</p>

<pre><code>'tenminus&amp;fiveplus 'five-to-ten typealias

(symbol test
    (!even|five-to-ten :n ==&gt; bool :o)
    (
      true @o
    )
) ::
</code></pre>

<p>Note that:</p>

<ul>
<li>Type aliases be used to create an alias for any type expression.</li>
<li>Aliased type expressions can contain standard <em>min</em> types, dictionary types, type classes, and even other type aliases.</li>
<li>The <a href="#min-operator-id-typealias">typealias</a> operator actually creates lexically-scoped, <code>typealias:</code>-prefixed symbols that can be sealed, unsealed, and deleted exactly like other symbols.</li>
</ul>


<a id="Generics"></a>
<h5>Generics<a href="#document-top" title="Go to top"></a></h5>

<p><em>min</em> supports generics in operator signatures. in other words, you can define a custom type alias on-the-fly directly in an operator signature, like this:</p>

<pre><code>(
  symbol add
  ((str|num|quot :t) :a t :b ==&gt; t :result)
  (
   (a type "str" ==)
     (a b suffix @result return)
   when
   (a type "num" ==)
     (a b + @result return)
   when
   (a type "quot" ==)
     (a b concat #result return)
   when
  )
) ::
</code></pre>

<p>In this case, <code>t</code> is set to the type union <code>stribg|num|quot</code>, and the <code>add</code> method above can be used to sum two numbers or join two strings or quotations.</p>

<p>Note that the value of <code>t</code> is evaluated to the type of the first value that is processed. In other words, the following programs will work as expected:</p>

<pre><code> 3 5 add ;outputs 8

 "hello, " "world" ;outputs "hello, world"
</code></pre>

<p>while the following will raise an error, because the value of <code>t</code> from <code>num</code> to <code>quot</code> within the same operator use:</p>

<pre><code> 12 "test" add ;raises an error
</code></pre>

<div class="sidebar"><p>Generics vs type unions</p>

<p>Generics allow to specify a type as a type union, but the type will remain the same one throughout the same operator call.
By contrast, using the same type union several times within the same signature allows different types to be used in the same call, and that is probably something you don&rsquo;t want!</p></div>

<a id="Constructors"></a>
<h5>Constructors<a href="#document-top" title="Go to top"></a></h5>

<p>The <a href="#min-operator-id-operator">operator</a> operator can also be used to create <em>constructor</em> symbols. A constructor is a particular type of operator that is used to create a new typed dictionary.</p>

<p>Consider the following example:</p>

<pre><code> (
   constructor point
   (num :x num :y ==&gt; dict :out)
   (
     {}
       x %x
       y %y
     @out
   )
 ) ::
</code></pre>

<p>The operator above creates a <code>point</code> constructor symbol that can be used to create a new <code>dict:point</code> typed dictionary by popping two numbers from the stack:</p>

<pre><code> 2 3 point ; {2 :x 3 :y ;point}
</code></pre>

<div class="note"><p>Tip</p>

<p>Except for some native symbols, constructors represent the only way to create new typed dictionaries. The more validations you perform in a constructor, the most effective checking for a specific type using the <a href="#min-operator-id-type?">type?</a> operator will be, as <code>type?</code> only checks if a specific type annotation is present on a typed dictionary, nothing else.</p></div>

<a id="Definitions"></a>
<h3>Definitions<a href="#document-top" title="Go to top"></a></h3>

<p>Being a concatenative language, min does not really need named parameters or variables: symbols just pop elements off the main stack in order, and that&rsquo;s normally enough. There is however one small problem with the traditional concatenative paradigm; consider the following program for example:</p>

<pre><code> dup dup
 "\.zip$" match?
 swap fsize 1000000 &gt; and 
 swap mtime now 3600 - &gt;
</code></pre>

<p>This program takes a single string corresponding to a file path and returns true if it&rsquo;s a .zip file bigger than 1MB that was modified in the last hour. Sure, it is remarkable that no variables are needed for such a program, but it is not very readable: because no variables are used, it is often necessary to make copies of elements and push them to the end of the stack &ndash; that&rsquo;s what the <a href="#min-operator-id-dup">dup</a> and <a href="#min-operator-id-swap">swap</a> are used for.</p>

<p>The good news is that you can use the <a href="#min-operator-id-define">define</a> operator and the <code>:</code> sigil to define new symbols, and symbols can also be set to fixed values (literals).</p>

<p>Consider the following program:</p>

<pre><code> :filepath
 filepath "\.zip$" match?
 filepath fsize 1000000 &gt;
 filepath mtime now 3600 - &gt;
 and and
</code></pre>

<p>In this case, the <code>filepath</code> symbol is defined and then used on the following three lines, each of which defines a condition to be evaluated. The last line contains just two <a href="#min-operator-id-and">and</a> symbols necessary to compare the three conditions.</p>

<a id="Lexical-scoping-and-binding"></a>
<h4>Lexical scoping and binding<a href="#document-top" title="Go to top"></a></h4>

<p>min, like many other programming languages, uses <a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scope_vs._dynamic_scope">lexical scoping</a> to resolve symbols.</p>

<p>Consider the following program:</p>

<pre><code> 4 :a
 ( 
   a 3 + :a
   (
      a 1 + :a
      (a dup * :a) dequote
   ) dequote
 ) dequote
</code></pre>

<p>&hellip;What is the value of the symbol <code>a</code> after executing it?</p>

<p>Simple: <code>4</code>. Every quotation defines its own scope, and in each scope, a new variable called <code>a</code> is defined. In the innermost scope containing the quotation <code>(a dup * :a)</code> the value of <code>a</code> is set to <code>64</code>, but this value is not propagated to the outer scopes. Note also that the value of <code>a</code> in the innermost scope is first retrieved from the outer scope (8).</p>

<p>If we want to change the value of the original <code>a</code> symbol defined in the outermost scope, we have to use the <a href="#min-operator-id-bind">bind</a> or its shorthand sigil <code>@</code>, so that the program becomes the following:</p>

<pre><code> 4 :a ;First definition of the symbol a
 (
   a 3 + @a ;The value of a is updated to 7.
   (
     a 1 + @a ;The value of a is updated to 8
     (a dup * @a) dequote ;The value of a is now 64
   ) dequote
 ) dequote
</code></pre>

<a id="Sealing-symbols"></a>
<h4>Sealing symbols<a href="#document-top" title="Go to top"></a></h4>

<p>Finally, symbols can be sealed to prevent accidental updates or deletions. By default, all symbols defined in the core min modules are sealed, so the following code if run in min shell will result in an error:</p>

<pre><code> 5 :quote
</code></pre>

<p>&hellip;because the symbol quote is already defined in the root scope. However, note that the following code will <em>not</em> return an error:</p>

<pre><code> (5 :quote quote dup *) -&gt; ;returns 25
</code></pre>

<p>&hellip;because the <code>quote</code> symbol is only defined in the root scope and can therefore be redefined in child scopes.</p>

<p>If you want, you can <a href="#min-operator-id-seal">seal</a> your own symbols so that they may not be redefined using the <a href="#min-operator-id-bind">bind</a> operator or deleted using the <a href="#min-operator-id-delete">delete</a>.</p>

<div class="note"><p>Note</p>

<p>The <a href="#min-operator-id-unseal-symbol">unseal-symbol</a> operator can be used to effectively un-seal a previously-sealed symbol. Use with caution!</p></div>

<a id="Scopes"></a>
<h3>Scopes<a href="#document-top" title="Go to top"></a></h3>

<p>As explained in <a href="/learn-definitions">Definitions</a>, min uses lexical scoping to resolve symbols and sigils. A <em>scope</em> is an execution context (a symbol table really) that:</p>

<ul>
<li>is created while a new quotation is being dequoted or a dictionary is created.</li>
<li>is destroyed after a quotation has been dequoted.</li>
<li>is attached to a dictionary.</li>
</ul>


<p>The main, root-level scope in min can be accessed using the <a href="#min-operator-id-ROOT">ROOT</a> symbol and it typically contains all symbols and sigils imported from all the standard library modules. The ROOT symbol pushes a module on the stack that references the ROOT scope:</p>

<div class="min-terminal"><p><span class="prompt">[/Users/h3rald/test]$</span> ROOT
  {
   &lt;native&gt; :!
   &lt;native&gt; :!=
   &hellip;
   &lt;native&gt; :xor
   &lt;native&gt; :zip
   ;module
  }</p></div>

<div class="note"><p>Note</p>

<p>&lt;native&gt; values cannot be retrieved using the <a href="#min-operator-id-dget">dget</a> operator.</p></div>

<a id="Accessing-the-current-scope"></a>
<h4>Accessing the current scope<a href="#document-top" title="Go to top"></a></h4>

<p>You can access the current scope using the <a href="#min-operator-id-scope">scope</a> operator, which pushes a module on the stack that references the current scope.</p>

<p>Consider the following program:</p>

<pre><code> {} :innerscope ("This is a test" :test scope @myscope) -&gt; myscope scope-symbols
</code></pre>

<p>In this case:</p>

<ol>
<li>A new variable called <code>innerscope</code> is defined on the ROOT scope.</li>
<li>A quotation is dequoted, but its scope is retrieved using the <code>scope</code> operator and bound to <code>innerscope</code>.</li>
<li>After the quotation is dequoted, myscope is accessed and its symbols (<code>test</code> in this case) are pushed on the stack using the <a href="#min-operator-id-scope-symbols">scope-symbols</a> operator.</li>
</ol>


<p>Note that scopes can only be accessed if they are bound to a dictionary, hence the <code>ROOT</code> and <code>scope</code> operators push a module on the stack, and a module is nothing but a typed dictionary.</p>

<a id="Dequoting-a-quotation-within-the-context-of-a-specific-scope"></a>
<h4>Dequoting a quotation within the context of a specific scope<a href="#document-top" title="Go to top"></a></h4>

<p>The <a href="#min-operator-id-with">with</a> operator can be used to dequote a quotation within a specific scope instead of the current one.</p>

<p>Consider the following program, which leaves <code>2</code> on the stack:</p>

<pre><code> (4 2 minus) {'- :minus} with -&gt;
</code></pre>

<p>In this case, when <code>with</code> is pushed on the stack, it will dequote <code>(4 2 minus)</code>. Note that the symbol <code>minus</code> is defined in the dictionary that will be used by <code>with</code> as the current scope, so after <code>with</code> is pushed on the stack, the stack contents are:</p>

<pre><code> 4 2 (-)
</code></pre>

<p>At this point, the <a href="#min-operator-id-dequote">dequote</a> operator is pushed on the stack and the subtraction is executed leaving <code>2</code> on the stack.</p>

<a id="Control-Flow"></a>
<h3>Control Flow<a href="#document-top" title="Go to top"></a></h3>

<p>The <a href="#&lt;code>lang&lt;/code>-Module">lang Module</a> provide some symbols that can be used for the most common control flow statements. Unlike most programming languages, min does not differentiate between functions and statements &ndash; control flow statements are just ordinary symbols that manipulate the main stack.</p>

<a id="Conditionals"></a>
<h4>Conditionals<a href="#document-top" title="Go to top"></a></h4>

<p>The following symbols provide ways to implement common conditional statements:</p>

<ul>
<li><a href="#min-operator-id-case">case</a></li>
<li><a href="#min-operator-id-if">if</a></li>
<li><a href="#min-operator-id-unless">unless</a></li>
<li><a href="#min-operator-id-when">when</a></li>
</ul>


<p>For example, consider the following program:</p>

<pre><code> (
   (  
     "" :type
     (("\.(md|markdown)$") ("markdown" @type))
     (("\.txt$") ("text" @type))
     (("\.min$") ("min" @type))
     (("\.html?$") ("HTML" @type))
     ((true) ("unknown" @type))
   ) case 
   "This is a $1 file." (type) % echo
 ) ^display-file-info
</code></pre>

<p>This program defines a symbol <code>display-file-info</code> that takes a file name and outputs a message displaying its type if known.</p>

<a id="Loops"></a>
<h4>Loops<a href="#document-top" title="Go to top"></a></h4>

<p>The following symbols provide ways to implement common loops:</p>

<ul>
<li><a href="#min-operator-id-foreach">foreach</a></li>
<li><a href="#min-operator-id-times">times</a></li>
<li><a href="#min-operator-id-while">while</a></li>
</ul>


<p>For example, consider the following program:</p>

<pre><code> (
   :n
   1 :i
   1 :f
   (i n &lt;=)
   (
     f i * @f 
     i succ @i
   ) while
   f
 ) ^factorial
</code></pre>

<p>This program defines a symbol <code>factorial</code> that calculates the factorial of an integer iteratively using the symbol <a href="#min-operator-id-while">while</a>.</p>

<a id="Error-handling"></a>
<h4>Error handling<a href="#document-top" title="Go to top"></a></h4>

<p>The following symbols provide ways to manage errors in min:</p>

<ul>
<li><a href="#min-operator-id-format-error">format-error</a></li>
<li><a href="#min-operator-id-raise">raise</a></li>
<li><a href="#min-operator-id-try">try</a></li>
</ul>


<p>For example, consider the following program:</p>

<pre><code> . ls
 (
   (
     (fsize) 
     (pop 0)
   ) try
 ) map 
 1 (+) reduce
</code></pre>

<p>This program calculates the size in bytes of all files included in the current directory. Because the <a href="#min-operator-id-fsize">fsize</a> symbol throws an error if the argument provided is not a file (for example, if it is a directory), the <code>try</code> symbol is used to remove the error from the stack and push <code>0</code> on the stack instead.</p>

<a id="Using-the-min-Shell"></a>
<h2>Using the min Shell<a href="#document-top" title="Go to top"></a></h2>

<p>The min executable also provide an interactive REPL (Read-Eval-Print Loop) when launched with no arguments:</p>

<div class="min-terminal"><p><span class="prompt">$</span> min
<span class="prompt">&#91;/Users/h3rald/Development/min&#93;$</span></p></div>

<p>Although not as advanced, the min REPL is not dissimilar from an OS system shell like Bash, and as a matter of fact, it provides many functionalities that are found in other shells or command prompts, such as:</p>

<ul>
<li>Auto-completion</li>
<li>Persistent line history</li>
<li>A customizable prompt</li>
<li>Access to environment variables</li>
</ul>


<p>&hellip;plus in can obviously leverage the entire min language for complex scripting.</p>

<a id="Autocompletion-and-shortcuts"></a>
<h3>Autocompletion and shortcuts<a href="#document-top" title="Go to top"></a></h3>

<p>The min shell features smart tab autocompletion and keyboard shortcut implemented using the <a href="https://github.com/h3rald/minline">minline</a> library.</p>

<p>The following behaviors are implemented when pressing the <code>TAB</code> key within:</p>

<table>
<thead>
<tr>
<th>Context                                                        </th>
<th> Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>&hellip;a string                                                    </td>
<td> Auto-completes the current word using file and directory names.</td>
</tr>
<tr>
<td>&hellip;a word starting with <code>!</code>, <code>!!</code>, <code>!"</code> <code>!!"</code>, <code>&amp;</code>, <code>&amp;"</code>       </td>
<td> Auto-completes the current word using executable file names.</td>
</tr>
<tr>
<td>&hellip;a word starting with <code>$</code>                                    </td>
<td> Auto-completes the current word using environment variable names.</td>
</tr>
<tr>
<td>&hellip;a word starting with <code>'</code>, <code>@</code>, <code>#</code>, <code>&gt;</code>, <code>&lt;</code>, <code>*</code>, <code>(</code>, <code>?</code> </td>
<td> Auto-completes the current word using symbol names.</td>
</tr>
</tbody>
</table>


<p>Additionally, the following common shortcuts are also available:</p>

<table>
<thead>
<tr>
<th>Key            </th>
<th> Effect</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>INSERT</code>       </td>
<td> Switches between insert and replace mode.</td>
</tr>
<tr>
<td><code>UP</code>           </td>
<td> Displays the previous history entry.</td>
</tr>
<tr>
<td><code>DOWN</code>         </td>
<td> Displays the next history entry.</td>
</tr>
<tr>
<td><code>CTRL+d</code>       </td>
<td> Terminates the min shell.</td>
</tr>
<tr>
<td><code>CTRL+u</code>       </td>
<td> Clears the current line.</td>
</tr>
<tr>
<td><code>CTRL+b</code>       </td>
<td> Goes to the beginning of the line.</td>
</tr>
<tr>
<td><code>CTRL+e</code>       </td>
<td> Goes to the end of the line.</td>
</tr>
</tbody>
</table>


<div class="tip"><p>Tip</p>

<p>If you want, you can define your own keyboard shortcuts using the <a href="#min-operator-id-mapkey">mapkey</a> operator.</p></div>

<a id="Shell-configuration-files"></a>
<h3>Shell configuration files<a href="#document-top" title="Go to top"></a></h3>

<p>When the min interpreter is first launched, the following files are created automatically in the $HOME directory (%USERPROFILE% on Windows).</p>

<a id=".minrc"></a>
<h4>.minrc<a href="#document-top" title="Go to top"></a></h4>

<p>This file is interpreted first every time min is run. By default it is empty, but it can be used to define code to execute at startup.</p>

<a id=".min_history"></a>
<h4>.min_history<a href="#document-top" title="Go to top"></a></h4>

<p>This file is used to persist all commands entered in the min shell, and it is loaded in memory at startup to provide line history support.</p>

<a id=".min_symbols"></a>
<h4>.min_symbols<a href="#document-top" title="Go to top"></a></h4>

<p>This files contains all symbol definitions in JSON format that were previously-saved using the <a href="#min-operator-id-save-symbol">save-symbol</a> symbol. Symbols can be loaded using the <a href="#min-operator-id-load-symbol">load-symbol</a> symbol.</p>

<a id="Extending-min"></a>
<h2>Extending min<a href="#document-top" title="Go to top"></a></h2>

<p>min provides a fairly complete standard library with many useful modules. However, you may feel the need to extend min in order to perform more specialized tasks.</p>

<p>In such situations, you basically have the following options:</p>

<ul>
<li>Implementing new min modules using min itself</li>
<li>Specifying your custom prelude program</li>
<li>Embedding min in your <a href="https://nim-lang.org">Nim</a> program</li>
</ul>


<a id="Implementing-new-min-modules-using-min-itself"></a>
<h3>Implementing new min modules using min itself<a href="#document-top" title="Go to top"></a></h3>

<p>When you just want to create more high-level min operator using functionalities that are already available in min, the easiest way is to create your own reusable min modules.</p>

<p>To create a new module, simply create a file containing your operator definitions implemented using either the <a href="#min-operator-id-operator">operator</a> operator or the <a href="#min-operator-id-lambda">lambda</a> operator</p>

<pre><code>(dup *)       ^pow2
(dup dup * *) ^pow3
(dup * dup *) ^pow4
</code></pre>

<p>Save your code to a file (e.g. <em>quickpows.min</em>) and you can use it in other Nim files using the <a href="#min-operator-id-require">require</a> operator and the <a href="#min-operator-id-import">import</a> (if you want to import the operators in the current scope):</p>

<pre><code>'quickpows require :qp

2 \*qp/pow3 \*qp/pow2 puts ;prints 64
</code></pre>

<a id="Specifying-your-custom-prelude-program"></a>
<h3>Specifying your custom prelude program<a href="#document-top" title="Go to top"></a></h3>

<p>By default, when min is started it loads the following <em>prelude.min</em> program:</p>

<pre><code>; Imports
'str       import
'io        import
'logic     import
'num       import
'sys       import
'stack     import
'seq       import
'dict      import
'time      import
'fs        import
'crypto    import
'math      import
'net       import
'http      import
; Unseal prompt symbol
'prompt    unseal-symbol
</code></pre>

<p>Essentially, this causes min to import <em>all</em> the modules and unseals the <a href="#min-operator-id-prompt">prompt</a> symbol so that it can be customized. If you want, you can provide your own prelude file to specify your custom behaviors, selectively import modules, and define your own symbols, like this:</p>

<div class="min-terminal"><p><span class="prompt">$</span> min -i -p:myfile.min</p></div>

<a id="Embedding-min-in-your-Nim-program"></a>
<h3>Embedding min in your Nim program<a href="#document-top" title="Go to top"></a></h3>

<p>If you&rsquo;d like to use min as a scripting language within your own program, and maybe extend it by implementing additional operators, you can use min as a Nim library.</p>

<p>To do so:</p>

<ol>
<li>Install min sources using Nifty as explained in the Download section.</li>
<li>Import it in your Nim file.</li>
<li>Implement a new <code>proc</code> to define the module.</li>
</ol>


<p>The following code is taken from <a href="https://github.com/h3rald/hastysite">HastySite</a> and shows how to define a new <code>hastysite</code> module containing some symbols (<code>preprocess</code>, <code>postprocess</code>, <code>process-rules</code>, &hellip;):</p>

<pre><code>import min

proc hastysite_module*(i: In, hs1: HastySite) =
  var hs = hs1
  let def = i.define()

  def.symbol("preprocess") do (i: In):
    hs.preprocess()

   def.symbol("postprocess") do (i: In):
    hs.postprocess()

  def.symbol("process-rules") do (i: In):
    hs.interpret(hs.files.rules)

  # ...

  def.finalize("hastysite")
</code></pre>

<p>Then you need to:</p>

<ol>
<li>Instantiate a new min interpreter using the <code>newMinInterpreter</code> proc.</li>
<li>Run the <code>proc</code> used to define the module.</li>
<li>Call the <code>interpret</code> method to interpret a min file or string:</li>
</ol>


<pre><code>proc interpret(hs: HastySite, file: string) =
  var i = newMinInterpreter(file, file.parentDir)
  i.hastysite_module(hs)
  i.interpret(newFileStream(file, fmRead))
</code></pre>

<div class="tip"><p>Tip</p>

<p>For more information on how to create new modules with Nim, have a look in the <a href="https://github.com/h3rald/min/tree/master/minpkg/lib">lib folder</a> of the min repository, which contains all the min modules included in the standard library.</p></div>

<a id="Reference"></a>
<h2>Reference<a href="#document-top" title="Go to top"></a></h2>

<p>min includes a small but powerful standard library organized into the following <em>modules</em>:</p>

<dl>
<dt><a href="#&lt;code>lang&lt;/code>-Module">lang Module</a></dt>
<dd>Defines the basic language constructs, such as control flow, type conversions, symbol definition and binding, exception handling,  etc.</dd>
<dt><a href="#&lt;code>stack&lt;/code>-Module">stack Module</a></dt>
<dd>Defines combinators and stack-shufflers like dip, dup, swap, cons, etc.</dd>
<dt><a href="#&lt;code>seq&lt;/code>-Module">seq Module</a></dt>
<dd>Defines operators for quotations, like map, filter, reduce, etc.</dd>
<dt><a href="#&lt;code>dict&lt;/code>-Module">dict Module</a></dt>
<dd>Defines operators for dictionaries, like dget, ddup, dset, etc.</dd>
<dt><a href="#&lt;code>dstore&lt;/code>-Module">dstore Module</a></dt>
<dd>Provides support for simple, persistent, in-memory JSON stores.</dd>
<dt><a href="#&lt;code>io&lt;/code>-Module">io Module</a></dt>
<dd>Provides operators for reading and writing files as well as printing to STDOUT and reading from STDIN.</dd>
<dt><a href="#&lt;code>fs&lt;/code>-Module">fs Module</a></dt>
<dd>Provides operators for accessing file information and properties.</dd>
<dt><a href="#&lt;code>logic&lt;/code>-Module">logic Module</a></dt>
<dd>Provides comparison operators for all min data types and other boolean logic operators.</dd>
<dt><a href="#&lt;code>str&lt;/code>-Module">str Module</a></dt>
<dd>Provides operators to perform operations on strings, use regular expressions, interpolation, etc..</dd>
<dt><a href="#&lt;code>sys&lt;/code>-Module">sys Module</a></dt>
<dd>Provides operators to use as basic shell commands, access environment variables, and execute external commands.</dd>
<dt><a href="#&lt;code>num&lt;/code>-Module">num Module</a></dt>
<dd>Provides operators to perform simple mathematical operations on integer and floating point numbers.</dd>
<dt><a href="#&lt;code>time&lt;/code>-Module">time Module</a></dt>
<dd>Provides a few basic operators to manage dates, times, and timestamps.</dd>
<dt><a href="#&lt;code>crypto&lt;/code>-Module">crypto Module</a></dt>
<dd>Provides operators to compute hashes (MD4, MD5, SHA1, SHA224, SHA256, SHA384, sha512), base64 encoding/decoding, and AES encryption/decryption.</dd>
<dt><a href="#&lt;code>math&lt;/code>-Module">math Module</a></dt>
<dd>Provides many mathematical operators and constants such as trigonometric functions, square root, logarithms, etc.</dd>
<dt><a href="#&lt;code>net&lt;/code>-Module">net Module</a></dt>
<dd>Provides basic supports for sockets (some features are not supported on Windows systems).</dd>
<dt><a href="#&lt;code>http&lt;/code>-Module">http Module</a></dt>
<dd>Provides operators to perform HTTP requests, download files and create basic HTTP servers.</dd>
<dt><a href="#&lt;code>xml&lt;/code>-Module">xml Module</a></dt>
<dd>Provides operators for parsing, creating and querying XML/HTML code using CSS selectors.</dd>
</dl>

<a id="Notation"></a>
<h3>Notation<a href="#document-top" title="Go to top"></a></h3>

<p>The following notation is used in the signature of all min operators:</p>

<a id="Types-and-Values"></a>
<h4>Types and Values<a href="#document-top" title="Go to top"></a></h4>

<dl>
<dt>&#x2205;</dt>
<dd>No value.</dd>
<dt><span class="kwd">null</span></dt>
<dd>null value</dd>
<dt><span class="kwd">a</span></dt>
<dd>A value of any type.</dd>
<dt><span class="kwd">bool</span></dt>
<dd>A boolean value</dd>
<dt><span class="kwd">int</span></dt>
<dd>An integer value.</dd>
<dt><span class="kwd">flt</span></dt>
<dd>A float value.</dd>
<dt><span class="kwd">num</span></dt>
<dd>A numeric (integer or float) value.</dd>
<dt><span class="kwd">str</span></dt>
<dd>A string value.</dd>
<dt><span class="kwd">&apos;sym</span></dt>
<dd>A string-like value (string or quoted symbol).</dd>
<dt><span class="kwd">quot</span></dt>
<dd>A quotation (also expressed as parenthesis enclosing other values).</dd>
<dt><span class="kwd">dict</span></dt>
<dd>A dictionary value.</dd>
<dt><span class="kwd">dict:help</span></dt>
<dd><p>A help dictionary:</p>

<pre><code>{
 "puts" :name
 "symbol" :kind
 "a ==&gt;" :signature
 "Prints a and a new line to STDOUT." :description
 ;help
}
</code></pre></dd>
<dt><span class="kwd">dict:url</span></dt>
<dd><p>An URL dictionary:</p>

<pre><code>{
 "http" :scheme
 "h3rald" :hostname
 "" :port
 "" :username
 "" :password
 "/min" :path
 "" :anchor
 "" :query
 ;url
}
</code></pre></dd>
<dt><span class="kwd">dict:timeinfo</span></dt>
<dd><p>A timeinfo dictionary:</p>

<pre><code>{
 2017 :year
 7 :month
 8 :day
 6 :weekday
 188 :yearday
 15 :hour
 16 :minute
 25 :second
 true :dst
 -3600 :timezone
 ;timeinfo
}
</code></pre></dd>
<dt><span class="kwd">dict:error</span></dt>
<dd><p>An error dictionary:</p>

<pre><code>{
 "MyError" :error
 "An error occurred" :message
 "symbol1" :symbol
 "dir1/file1.min" :filename
 3 :line
 13 :column
 ;error
}
</code></pre></dd>
<dt><span class="kwd">dict:socket</span></dt>
<dd><p>A socket dictionary that must be created through the <a href="#min-operator-id-socket">socket</a> operator:</p>

<pre><code>{
 "ipv4" :domain
 "stream" :type
 "tcp" :protocol
 ;socket
}
</code></pre></dd>
<dt><span class="kwd">dict:rawval</span></dt>
<dd><p>A raw value dictionary obtained via the <a href="#min-operator-id-get-raw">get-raw</a> or <a href="#min-operator-id-dget-raw">dget-raw</a> operators:</p>

<pre><code>{
 "sym" :type
 "my-symbol" :str
 my-symbol :val
 ;rawval
}
</code></pre></dd>
<dt><span class="kwd">dict:datastore</span></dt>
<dd><p>A datastore dictionary that must be created through the <a href="#min-operator-id-dsinit">dsinit</a> or <a href="#min-operator-id-dsread">dsread</a> operator:</p>

<pre><code>{
 {} :data
 "path/to/file.json" :path
 ;datastore
}
</code></pre></dd>
<dt><span class="kwd">dict:http-request</span></dt>
<dd><p>A request dictionary, representing an HTTP request to be performed through the operators exposed by the <a href="#&lt;code>http&lt;/code>-Module">http Module</a>:</p>

<pre><code>{
 "http://httpbin.org/put" :url
 "PUT" :method
 "1.1" :version         ;optional
 "h3rald.com" :hostname ;optional
 {                      
  "it-id" :Accept-Language
  "httpbin.org" :Host
 } :headers             ;optional
 "test body" :body      ;optional
 ;http-request
}
</code></pre></dd>
<dt><span class="kwd">dict:http-response</span></dt>
<dd><p>A response dictionary, representing an HTTP response returned by some of the operators exposed by the <a href="#&lt;code>http&lt;/code>-Module">http Module</a>:</p>

<pre><code>{
  "1.1" :version ;optional
  200 :status    ;optional
  {
    "application/json" :Content-Type
  } :headers     ;optional
  "{\"test\": \"This is a test\"}" :body
  ;http-response
}
</code></pre></dd>
<dt><span class="kwd">dict:xml-element</span></dt>
<dd><p>A dictionary representing an XML or HTML element, exposed by the <a href="#&lt;code>xml&lt;/code>-Module">xml Module</a></p>

<pre><code>{
  {"https://min-lang.org" :href} :attributes
  ({"min web site" :text ;xml-text}) :children
  "a" :tag
  ;xml-element
}
</code></pre></dd>
<dt><span class="kwd">dict:xml-comment</span></dt>
<dd><p>A dictionary representing an XML comment.</p>

<pre><code>{
  "This is a comment" :text
  ;xml-comment
}
</code></pre></dd>
<dt><span class="kwd">dict:xml-cdata</span></dt>
<dd><p>A dictionary representing XML CDATA text.</p>

<pre><code>{
  "This is some text" :text
  ;xml-cdata
}
</code></pre></dd>
<dt><span class="kwd">dict:xml-entity</span></dt>
<dd><p>A dictionary representing an XML entity.</p>

<pre><code>{
  "amp" :text
  ;xml-entity
}
</code></pre></dd>
<dt><span class="kwd">dict:xml-text</span></dt>
<dd><p>A dictionary representing XML text.</p>

<pre><code>{
  "This is some text" :text
  ;xml-text
}
</code></pre></dd>
<dt><span class="kwd">xml-node</span></dt>
<dd><p>A typealias to identify all XML dictionary types.</p>

<pre><code>dict:xml-element||dict:xml-text||dict:xml-comment||dict:xml-entity||dict:xml-cdata
</code></pre></dd>
</dl>

<a id="Suffixes"></a>
<h4>Suffixes<a href="#document-top" title="Go to top"></a></h4>

<p>The following suffixes can be placed at the end of a value or type to indicate ordering or quantities.</p>

<dl>
<dt><span class="kwd"><sub>1</sub></span></dt>
<dd>The first value of the specified type.</dd>
<dt><span class="kwd"><sub>2</sub></span></dt>
<dd>The second value of the specified type.</dd>
<dt><span class="kwd"><sub>3</sub></span></dt>
<dd>The third value of the specified type.</dd>
<dt><span class="kwd"><sub>4</sub></span></dt>
<dd>The fourth value of the specified type.</dd>
<dt><span class="kwd"><sub>?</sub></span></dt>
<dd>Zero or one.</dd>
<dt><span class="kwd"><sub>*</sub></span></dt>
<dd>Zero or more.</dd>
<dt><span class="kwd"><sub>+</sub></span></dt>
<dd>One or more</dd>
</dl>

<a id="<code>lang</code>-Module"></a>
<h3><code>lang</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><span class="reference-title">&apos;</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> &apos;<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> quotesym</span></p>

<p>See <a href="#min-operator-id-quotesym">quotesym</a>.</p></div>

<p><span class="reference-title">&apos;</span></p>

<div class="operator"><p><span class="kwd"> &apos; <strong>&rArr;</strong> quotesym</span></p>

<p>See <a href="#min-operator-id-quotesym">quotesym</a>.</p></div>

<p><span class="reference-title">:</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> :<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> define</span></p>

<p>See <a href="#min-operator-id-define">define</a>.</p></div>

<p><span class="reference-title">:</span></p>

<div class="operator"><p><span class="kwd"> : <strong>&rArr;</strong> define</span></p>

<p>See <a href="#min-operator-id-define">define</a>.</p></div>

<p><span class="reference-title">::</span></p>

<div class="operator"><p><span class="kwd"> :: <strong>&rArr;</strong> operator</span></p>

<p>See <a href="#min-operator-id-operator">operator</a>.</p></div>

<p><span class="reference-title">?</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> ?<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> help</span></p>

<p>See <a href="#min-operator-id-help">help</a>.</p></div>

<p><span class="reference-title">?</span></p>

<div class="operator"><p><span class="kwd"> ? <strong>&rArr;</strong> help</span></p>

<p>See <a href="#min-operator-id-help">help</a>.</p></div>

<p><span class="reference-title">&ast;</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> &ast;<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> invoke</span></p>

<p>See <a href="#min-operator-id-invoke">invoke</a>.</p></div>

<p><span class="reference-title">@</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> @<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> bind</span></p>

<p>See <a href="#min-operator-id-bind">bind</a>.</p></div>

<p><span class="reference-title">@</span></p>

<div class="operator"><p><span class="kwd"> @ <strong>&rArr;</strong> bind</span></p>

<p>See <a href="#min-operator-id-bind">bind</a>.</p></div>

<p><span class="reference-title">&gt;</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> &gt;<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> save-symbol</span></p>

<p>See <a href="#min-operator-id-save-symbol">save-symbol</a>.</p></div>

<p><span class="reference-title">&lt;</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> &lt;<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> load-symbol</span></p>

<p>See <a href="#min-operator-id-load-symbol">load-symbol</a>.</p></div>

<p><span class="reference-title">-></span></p>

<div class="operator"><p><span class="kwd"> -> <strong>&rArr;</strong> dequote</span></p>

<p>See <a href="#min-operator-id-dequote">dequote</a>.</p></div>

<p><span class="reference-title">&gt;&gt;</span></p>

<div class="operator"><p><span class="kwd"> &gt;&gt; <strong>&rArr;</strong> prefix-dequote</span></p>

<p>See <a href="#min-operator-id-prefix-dequote">prefix-dequote</a>.</p></div>

<p><span class="reference-title">&gt;&lt;</span></p>

<div class="operator"><p><span class="kwd"> &gt;&lt; <strong>&rArr;</strong> infix-dequote</span></p>

<p>See <a href="#min-operator-id-infix-dequote">infix-dequote</a>.</p></div>

<p><span class="reference-title">=&gt;</span></p>

<div class="operator"><p><span class="kwd"> =&gt; <strong>&rArr;</strong> apply</span></p>

<p>See <a href="#min-operator-id-apply">apply</a>.</p></div>

<p><a id="min-operator-id-==&amp;gt;"></a>
<span class="reference-title">==&gt;</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> &#x2205;</span></p>

<p>Symbol used to separate input and output values in operator signatures.</p></div>

<p><span class="reference-title">=-=</span></p>

<div class="operator"><p><span class="kwd"> =-= <strong>&rArr;</strong> expect-empty-stack</span></p>

<p>See <a href="#min-operator-id-expect-empty-stack">expect-empty-stack</a>.</p></div>

<p><span class="reference-title">^</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> ^<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> lambda</span></p>

<p>See <a href="#min-operator-id-lambda">lambda</a>.</p></div>

<p><span class="reference-title">^</span></p>

<div class="operator"><p><span class="kwd"> ^ <strong>&rArr;</strong> lambda</span></p>

<p>See <a href="#min-operator-id-lambda">lambda</a>.</p></div>

<p><a id="min-operator-id-apply"></a>
<span class="reference-title">apply</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> (<span class="kwd">a<sub>*</sub></span>)</span></p>

<p>Returns a new quotation obtained by evaluating each element of <span class="kwd">quot</span> in a separate stack.</p></div>

<p><a id="min-operator-id-args"></a>
<span class="reference-title">args</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Returns a list of all arguments passed to the current program.</p></div>

<p><a id="min-operator-id-bind"></a>
<span class="reference-title">bind</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Binds the specified value (auto-quoted) to an existing symbol <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-bool"></a>
<span class="reference-title">bool</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Converts <span class="kwd">a</span> to a boolean value based on the following rules:</p>

<ul>
<li>If <span class="kwd">a</span> is a boolean value, no conversion is performed.</li>
<li>If <span class="kwd">a</span> is <span class="kwd">null</span>, it is converted to <span class="kwd">false</span>.</li>
<li>If <span class="kwd">a</span> is a numeric value, zero is converted to <span class="kwd">false</span>, otherwise it is converted to <span class="kwd">true</span>.</li>
<li>If <span class="kwd">a</span> is a quotation or a dictionary, the empty quotation or dictionary is converted to <span class="kwd">false</span>, otherwise it is converted to <span class="kwd">true</span>.</li>
<li>If <span class="kwd">a</span> is a string, the empty string, and <code>"false"</code> are converted to <span class="kwd">false</span>, otherwise it is converted to <span class="kwd">true</span>.</li>
</ul>
</div>

<p><a id="min-operator-id-case"></a>
<span class="reference-title">case</span></p>

<div class="operator"><p><span class="kwd"> ((<span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span>)<span class="kwd"><sub>*</sub></span>) <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>This operator takes a quotation containing <em>n</em> different conditional branches.</p>

<p>Each branch must be a quotation containing two quotations, and it is processed as follows:</p>

<ul>
<li>if <span class="kwd">quot<sub>1</sub></span> evaluates to <span class="kwd">true</span>, then the <span class="kwd">quot<sub>2</sub></span> is executed.</li>
<li>if <span class="kwd">quot<sub>1</sub></span> evaluates to <span class="kwd">false</span>, then the following branch is processed (if any).</li>
</ul>


<div class="sidebar"><p>Example</p>

<p>The following program prints &ldquo;Smaller than 3&rdquo;:</p>

<pre><code>2 (
   ((&gt; 3) ("Greater than 3" put!))
   ((&lt; 3) ("Smaller than 3" put!))
   ((true) ("Exactly 3" put!))
) case
</code></pre></div></div>

<p><a id="min-operator-id-compiled?"></a>
<span class="reference-title">compiled?</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the current program has been compiled.</p></div>

<p><a id="min-operator-id-define"></a>
<span class="reference-title">define</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Defines a new symbol <span class="kwd">&apos;sym</span>, containing the specified value.</p></div>

<p><a id="min-operator-id-define-sigil"></a>
<span class="reference-title">define-sigil</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Defines a new sigil <span class="kwd">&apos;sym</span>, containing the specified value (auto-quoted if not already a quotation).</p></div>

<p><a id="min-operator-id-defined-symbol?"></a>
<span class="reference-title">defined-symbol?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the symbol <span class="kwd">&apos;sym</span> is defined, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-defined-sigil?"></a>
<span class="reference-title">defined-sigil?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the symbol <span class="kwd">&apos;sym</span> is defined, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-delete-sigil"></a>
<span class="reference-title">delete-sigil</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Deletes the specified symbol <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-delete-sigil"></a>
<span class="reference-title">delete-sigil</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Deletes the specified user-defined sigil <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-dequote"></a>
<span class="reference-title">dequote</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Pushes the contents of quotation <span class="kwd">quot</span> on the stack.</p>

<p>Each element is pushed on the stack one by one. If any error occurs, <span class="kwd">quot</span> is restored on the stack.</p></div>

<p><a id="min-operator-id-dev?"></a>
<span class="reference-title">dev?</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the current program is being executed in development mode.</p></div>

<p><a id="min-operator-id-eval"></a>
<span class="reference-title">eval</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Parses and interprets <span class="kwd">str</span>.</p></div>

<p><a id="min-operator-id-exit"></a>
<span class="reference-title">exit</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Exits the program or shell with <span class="kwd">int</span> as return code.</p></div>

<p><a id="min-operator-id-expect"></a>
<span class="reference-title">expect</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>If the <code>-d</code> (<code>--dev</code>) flag is specified when running the program, validates the first <em>n</em> elements of the stack against the type descriptions specified in <span class="kwd">quot<sub>1</sub></span> (<em>n</em> is <span class="kwd">quot<sub>1</sub></span>&rsquo;s length) and if all the elements are valid returns them wrapped in <span class="kwd">quot<sub>2</sub></span> (in reverse order). If the <code>-d</code> (<code>--dev</code>) flag is not specified when running the program, no validation is performed and all elements are just returned in a quotation in reverse order.</p>

<div class="tip"><p>Tips</p>

<ul>
<li>You can specify a typed dictionary by prepending the type name with <code>dict:</code>. Example: <code>dict:socket</code></li>
<li>You can specify two or more matching types by separating combined together in a logical type expression, e.g.: <code>string|quot</code></li>
</ul>
</div>

<div class="sidebar"><p>Example</p>

<p>Assuming that the following elements are on the stack (from top to bottom):</p>

<p><code>1 "test" 3.4</code></p>

<p>the following program evaluates to <code>true</code>:</p>

<p><code>(int string num) expect (3.4 "test" 1) ==</code></p></div></div>

<p><a id="min-operator-id-expect-empty-stack"></a>
<span class="reference-title">expect-empty-stack</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> &#x2205;</span></p>

<p>Raises an error if the stack is not empty.</p></div>

<p><a id="min-operator-id-float"></a>
<span class="reference-title">float</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">flt</span></span></p>

<p>Converts <span class="kwd">a</span> to a float value based on the following rules:</p>

<ul>
<li>If <span class="kwd">a</span> is <span class="kwd">true</span>, it is converted to <code>1.0</code>.</li>
<li>If <span class="kwd">a</span> is <span class="kwd">false</span>, it is converted to <code>0.0</code>.</li>
<li>If <span class="kwd">a</span> is <span class="kwd">null</span>, it is converted to <code>0.0</code>.</li>
<li>If <span class="kwd">a</span> is a integer, it is converted to float value.</li>
<li>If <span class="kwd">a</span> is a float, no conversion is performed.</li>
<li>If <span class="kwd">a</span> is a string, it is parsed as a float value.</li>
</ul>
</div>

<p><a id="min-operator-id-foreach"></a>
<span class="reference-title">foreach</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Applies the quotation <span class="kwd">quot<sub>2</sub></span> to each element of <span class="kwd">quot<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-format-error"></a>
<span class="reference-title">format-error</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:error</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Formats the error <span class="kwd">dict:error</span> as a string.</p>

<div class="sidebar"><p>Example</p>

<p>The following code:</p>

<pre><code> (
   (
      {"MyError" :error "This is a test error" :message} raise
   ) 
   (format-error)
 ) try
</code></pre>

<p>produces: <code>"This is a test error"</code></p></div></div>

<p><a id="min-operator-id-from-json"></a>
<span class="reference-title">from-json</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Converts a JSON string into <em>min</em> data.</p></div>

<p><a id="min-operator-id-from-yaml"></a>
<span class="reference-title">from-yaml</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Converts a YAML string into <em>min</em> data.</p>

<div class="note"><p>Note</p>

<p>At present, only YAML objects containing string values are supported.</p></div></div>

<p><a id="min-operator-id-gets"></a>
<span class="reference-title">gets</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Reads a line from STDIN and places it on top of the stack as a string.</p></div>

<p><a id="min-operator-id-help"></a>
<span class="reference-title">help</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Prints the help text for <span class="kwd">&apos;sym</span>, if available.</p></div>

<p><a id="min-operator-id-if"></a>
<span class="reference-title">if</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <span class="kwd">quot<sub>3</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>If <span class="kwd">quot<sub>1</sub></span> evaluates to <span class="kwd">true</span> then evaluates <span class="kwd">quot<sub>2</sub></span>, otherwise evaluates <span class="kwd">quot<sub>3</sub></span>.</p></div>

<p><a id="min-operator-id-import"></a>
<span class="reference-title">import</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Imports the a previously-loaded module <span class="kwd">&apos;sym</span>, defining all its symbols in the current scope.</p></div>

<p><a id="min-operator-id-infix-dequote"></a>
<span class="reference-title">infix-dequote</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Dequotes <span class="kwd">quot</span> using infix notation.</p>

<p>Note that no special operator preference is defined, symbols precedence is always left-to-right. However, you can use parentheses (quotes) to evaluate expressions before others.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>17</code> on the stack:</p>

<pre><code> (2 + (3 * 5)) infix-dequote
</code></pre>

<p>while this program leaves <code>25</code> on the stack:</p>

<pre><code> (2 + 3 * 5) infix-dequote
</code></pre></div></div>

<p><a id="min-operator-id-integer"></a>
<span class="reference-title">integer</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Converts <span class="kwd">a</span> to an integer value based on the following rules:</p>

<ul>
<li>If <span class="kwd">a</span> is <span class="kwd">true</span>, it is converted to <code>1</code>.</li>
<li>If <span class="kwd">a</span> is <span class="kwd">false</span>, it is converted to <code>0</code>.</li>
<li>If <span class="kwd">a</span> is <span class="kwd">null</span>, it is converted to <code>0</code>.</li>
<li>If <span class="kwd">a</span> is an integer, no conversion is performed.</li>
<li>If <span class="kwd">a</span> is a float, it is converted to an integer value by truncating its decimal part.</li>
<li>If <span class="kwd">a</span> is a string, it is parsed as an integer value.</li>
</ul>
</div>

<p><a id="min-operator-id-invoke"></a>
<span class="reference-title">invoke</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Assuming that <span class="kwd">&apos;sym</span> is a formatted like <em>dictionary</em>/<em>symbol</em>, calls <em>symbol</em> defined in <em>dictionary</em> (note that this also works for nested dictionaries.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>100</code> on the stack:</p>

<pre><code>{{100 :b} :a} :test *test/a/b
</code></pre></div></div>

<p> <a id="min-operator-id-lambda"></a>
<span class="reference-title">lambda</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Defines a new symbol <span class="kwd">&apos;sym</span>, containing the specified quotation <span class="kwd">quot</span>. Unlike with <code>define</code>, in this case <span class="kwd">quot</span> will not be quoted, so its values will be pushed on the stack when the symbol <span class="kwd">&apos;sym</span> is pushed on the stack.</p></div>

<p>Essentially, this symbol allows you to define an operator without any validation of constraints and bind it to a symbol.</p>

<p><span class="reference-title">lambdabind</span></p>

<div class="operator"><p><span class="kwd"> lambdabind <strong>&rArr;</strong> lambda-bind</span></p>

<p>See <a href="#min-operator-id-lambda-bind">lambda-bind</a>.</p></div>

<p><a id="min-operator-id-lambda-bind"></a>
<span class="reference-title">lambda-bind</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Binds the specified quotation to an existing symbol <span class="kwd">&apos;sym</span> which was previously-set via <code>lambda</code>.</p></div>

<p><a id="min-operator-id-line-info"></a>
<span class="reference-title">line-info</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Returns a dictionary <span class="kwd">dict</span> containing a <strong>filename</strong>, <strong>line</strong>, and <strong>column</strong> properties identifying the filename, line and column of the current symbol.</p></div>

<p><a id="min-operator-id-linrec"></a>
<span class="reference-title">linrec</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <span class="kwd">quot<sub>3</sub></span> <span class="kwd">quot<sub>4</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Implements linear recursions as follows:</p>

<ol>
<li>Evaluates <span class="kwd">quot<sub>1</sub></span>.

<ul>
<li>If <span class="kwd">quot<sub>1</sub></span> evaluates to <span class="kwd">true</span>, then it evaluates <span class="kwd">quot<sub>2</sub></span>.</li>
<li>Otherwises it executes <span class="kwd">quot<sub>3</sub></span> and recurses using the same four quotations.</li>
</ul>
</li>
<li>Finally, it executes <span class="kwd">quot<sub>4</sub></span>.</li>
</ol>


<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>120</code> on the stack, the factorial of 5:</p>

<pre><code> 5 (dup 0 ==) 'succ (dup pred) '* linrec
</code></pre></div></div>

<p><a id="min-operator-id-load"></a>
<span class="reference-title">load</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Parses and interprets the specified <em>min</em> file <span class="kwd">&apos;sym</span>, adding <span class="ext">.min</span> if not specified.</p></div>

<p><a id="min-operator-id-load-symbol"></a>
<span class="reference-title">load-symbol</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Loads the contents of symbol <span class="kwd">&apos;sym</span> from the <span class="file">.min_symbols</span> file.</p></div>

<p><a id="min-operator-id-loglevel"></a>
<span class="reference-title">loglevel</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Sets the current logging level to <span class="kwd">&apos;sym</span>. <span class="kwd">&apos;sym</span> must be one of the following strings or quoted symbols:</p>

<ul>
<li>debug</li>
<li>info</li>
<li>notice</li>
<li>warn</li>
<li>error</li>
<li>fatal</li>
</ul>


<div class="note"><p>Note</p>

<p>The default logging level is <em>notice</em>.</p></div></div>

<p><a id="min-operator-id-loglevel?"></a>
<span class="reference-title">loglevel?</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the current log level (debug, info, notice, warn, error or fatal).</p></div>

<p><a id="min-operator-id-operator"></a>
<span class="reference-title">operator</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Provides a way to define a new operator (symbol, sigil, or typeclass) on the current scope performing additional checks (compared to <code>define</code> and <code>define-sigil</code>), and automatically mapping inputs and outputs.</p>

<p><span class="kwd">quot</span> is a quotation containing:</p>

<ul>
<li>A symbol identifying the type of operator to define (<code>symbol</code>, <code>sigil</code>, or <code>typeclass</code>).</li>
<li>A symbol identifying the name of the operator.</li>
<li>A quotation defining the signature of the operator, containing input and output values identified by their type and a capturing symbol, separated by the <code>==&gt;</code> symbol.</li>
<li>A quotation identifying the body of the operator.</li>
</ul>


<p>The main additional features offered by this way of defining operators are the following:</p>

<ul>
<li>If in development mode (<code>-d</code> or <code>--dev</code> flag specified at run time), both input and output values are checked against a type (like when using the <code>expect</code> operator <em>and</em> automatically captured in a symbol that can be referenced in the operator body quotation.</li>
<li>The full signature of the operator is declared, making the resulting code easier to understand at quick glance.</li>
<li>An exception is automatically raised if the operator body pollutes the stack by adding or removing elements from the stack (besides adding the declared output values).</li>
<li>It is possible to use the <code>return</code> symbol within the body quotation to immediately stop the evaluation of the body quotation and automatically push the output values on the stack.</li>
</ul>


<div class="sidebar"><p>Example</p>

<p>The following program defines a <code>pow</code> operator that calculates the power of a number providing its base and exponent, and handling some NaN results using the <code>return</code> symbol:</p>

<pre><code> (
   symbol pow
   (num :base int :exp ==&gt; num :result)
   ( 
     (base 0 == exp 0 == and)
       (nan @result return)
     when
     (base 1 == exp inf == and)
       (nan @result return)
     when
     (base inf == exp 0 == and)
       (nan @result return)
     when
     exp 1 - :n
     base  (dup) n times (*) n times @result
   )
 ) ::
</code></pre></div></div>

<p><a id="min-operator-id-opts"></a>
<span class="reference-title">opts</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Returns a dictionary of all options passed to the current program, with their respective values.</p></div>

<p><a id="min-operator-id-parent-scope"></a>
<span class="reference-title">parent-scope</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">dict<sub>2</sub></span></span></p>

<p>Returns a dictionary <span class="kwd">dict<sub>2</sub></span> holding a reference to the parent scope of <span class="kwd">dict<sub>1</sub></span> or <span class="kwd">null</span> if <span class="kwd">dict<sub>1</sub></span> is ROOT.</p></div>

<p><a id="min-operator-id-parse"></a>
<span class="reference-title">parse</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Parses <span class="kwd">str</span> and returns a quoted program <span class="kwd">quot</span>.</p></div>

<p><a id="min-operator-id-prefix-dequote"></a>
<span class="reference-title">prefix-dequote</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Dequotes <span class="kwd">quot</span> using prefix notation (essentially it reverses <span class="kwd">quot</span> and dequotes it).</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>4</code> on the stack:</p>

<pre><code>(* 8 4) prefix-dequote
</code></pre></div></div>

<p><a id="min-operator-id-prompt"></a>
<span class="reference-title">prompt</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>This symbol is used to configure the prompt of the min shell. By default, it is set to the following quotation:</p>

<pre><code>("[$1]$$ " (.) =&gt; %)
</code></pre>

<p>Unlike other predefined symbols, this symbol is <em>unsealed</em>, which means it can be modified.</p></div>

<p><a id="min-operator-id-publish"></a>
<span class="reference-title">publish</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <span class="kwd">dict</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Publishes symbol <span class="kwd">&apos;sym</span> to the scope of <span class="kwd">dict</span>.</p>

<div class="sidebar"><p>Example</p>

<p>Publish symbol <span class="kwd">my-local-symbol</span> to <span class="kwd">ROOT</span> scope:
<code>'my-local-symbol ROOT publish</code></p></div></div>

<p><a id="min-operator-id-puts"></a>
<span class="reference-title">puts</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">a</span> and a new line to STDOUT.</p></div>

<p><a id="min-operator-id-quit"></a>
<span class="reference-title">quit</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> &#x2205;</span></p>

<p>Exits the program or shell with 0 as return code.</p></div>

<p><a id="min-operator-id-quote"></a>
<span class="reference-title">quote</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> (<span class="kwd">a</span>)</span></p>

<p>Wraps <span class="kwd">a</span> in a quotation.</p></div>

<p><a id="min-operator-id-quotecmd"></a>
<span class="reference-title">quotecmd</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> (<span class="kwd">sym</span>)</span></p>

<p>Creates a command with the value of <span class="kwd">str</span> and wraps it in a quotation.</p></div>

<p><a id="min-operator-id-quotesym"></a>
<span class="reference-title">quotesym</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> (<span class="kwd">sym</span>)</span></p>

<p>Creates a symbol with the value of <span class="kwd">str</span> and wraps it in a quotation.</p></div>

<p><a id="min-operator-id-raise"></a>
<span class="reference-title">raise</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:error</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Raises the error specified via the dictionary <span class="kwd">dict:error</span>.</p></div>

<p><a id="min-operator-id-raw-args"></a>
<span class="reference-title">raw-args</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Returns a list of all arguments and (non-parsed) options passed to the current program.</p></div>

<p><a id="min-operator-id-remove-symbol"></a>
<span class="reference-title">remove-symbol</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Removes the symbol <span class="kwd">&apos;sym</span> from the <span class="file">.min_symbols</span> file.</p></div>

<p><a id="min-operator-id-require"></a>
<span class="reference-title">require</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Parses and interprets (in a separater interpreter) the specified <em>min</em> file <span class="kwd">&apos;sym</span>, adding <span class="ext">.min</span> if not specified, and returns a module dictionary <span class="kwd">dict</span> containing all the symbols defined in <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-return"></a>
<span class="reference-title">return</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> &#x2205;</span></p>

<p>If used within the body quotation of an operator definition, causes the interpreter to stop pushing further body elements on the stack and start pushing tbe operator output values on the stack.</p></div>

<p>If used outside of the body quotation of an operator definition, it raises an exception.</p>

<p><a id="min-operator-id-ROOT"></a>
<span class="reference-title">ROOT</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Returns a module holding a reference to the <span class="kwd">ROOT</span> scope.</p>

<div class="tip"><p>Tip</p>

<p>This symbol is very useful in conjunction with the <strong>with</strong> operator.</p></div></div>

<p><a id="min-operator-id-save-symbol"></a>
<span class="reference-title">save-symbol</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Saves the contents of symbol <span class="kwd">&apos;sym</span> to the <span class="file">.min_symbols</span> file.</p></div>

<p><a id="min-operator-id-scope"></a>
<span class="reference-title">scope</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Returns a dictionary <span class="kwd">dict</span> holding a reference to the current scope.</p>

<p>This can be useful to save a reference to a given execution scope to access later on.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>{(2) :two ;module}</code> on the stack:</p>

<pre><code>{} :myscope (2 :two scope @myscope) -&gt;
</code></pre></div></div>

<p><a id="min-operator-id-saved-symbols"></a>
<span class="reference-title">saved-symbols</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> (<span class="kwd">str<sub>*</sub></span>)</span></p>

<p>Returns a quotation containing all symbols saved in the <span class="file">.min_symbols</span> file.</p></div>

<p><a id="min-operator-id-scope-sigils"></a>
<span class="reference-title">scope-sigils</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <strong>&rArr;</strong> (<span class="kwd">str<sub>*</sub></span>)</span></p>

<p>Returns a list of all sigils defined in dictionary <span class="kwd">dict</span>.</p></div>

<p><a id="min-operator-id-scope-symbols"></a>
<span class="reference-title">scope-symbols</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <strong>&rArr;</strong> (<span class="kwd">str<sub>*</sub></span>)</span></p>

<p>Returns a list of all symbols defined in dictionary <span class="kwd">dict</span>.</p></div>

<p><a id="min-operator-id-seal-symbol"></a>
<span class="reference-title">seal-symbol</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Seals symbol <span class="kwd">&apos;sym</span>, so that it cannot be re-assigned.</p></div>

<p><a id="min-operator-id-seal-sigil"></a>
<span class="reference-title">seal-sigil</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Seals the user-defined sigil <span class="kwd">&apos;sym</span>, so that it cannot be re-defined.</p></div>

<p><a id="min-operator-id-sealed-symbol?"></a>
<span class="reference-title">sealed-symbol?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the symbol <span class="kwd">&apos;sym</span> is sealed, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-sealed-sigil?"></a>
<span class="reference-title">sealed-sigil?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the sigil <span class="kwd">&apos;sym</span> is sealed, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-sigil-help"></a>
<span class="reference-title">sigil-help</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:help</span>|<span class="kwd">null</span></span></p>

<p>Returns the help dictionary for the sigil <span class="kwd">&apos;sym</span>, if available, <span class="kwd">null</span> otherwise.</p></div>

<p><a id="min-operator-id-sigils"></a>
<span class="reference-title">sigils</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> (<span class="kwd">str<sub>*</sub></span>)</span></p>

<p>Returns a list of all sigils defined in the <span class="kwd">ROOT</span> scope.</p></div>

<p><a id="min-operator-id-source"></a>
<span class="reference-title">source</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Display the source code of symbol <span class="kwd">&apos;sym</span> (if it has been implemented a <em>min</em> quotation).</p></div>

<p><a id="min-operator-id-string"></a>
<span class="reference-title">string</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Converts <span class="kwd">a</span> to its string representation.</p></div>

<p><a id="min-operator-id-symbols"></a>
<span class="reference-title">symbols</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> (<span class="kwd">str<sub>*</sub></span>)</span></p>

<p>Returns a list of all symbols defined in the <span class="kwd">ROOT</span> scope.</p></div>

<p><a id="min-operator-id-symbol-help"></a>
<span class="reference-title">symbol-help</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:help</span>|<span class="kwd">null</span></span></p>

<p>Returns the help dictionary for the symbol <span class="kwd">&apos;sym</span>, if available, <span class="kwd">null</span> otherwise.</p></div>

<p><a id="min-operator-id-tap"></a>
<span class="reference-title">tap</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Performs the following operations:</p>

<ol>
<li>Removes <span class="kwd">a</span> from the stack.</li>
<li>For each quotation defined in <span class="kwd">quot</span> (which is a quotation of quotations each requiring one argument and returning one argument):

<ol>
<li>Pushes <span class="kwd">a</span> back to the stack.</li>
<li>Dequotes the quotation and saves the result as <span class="kwd">a</span>.</li>
</ol>
</li>
<li>Push the resulting <span class="kwd">a</span> back on the stack.</li>
</ol>


<div class="sidebar"><p>Example</p>

<p>The following program:</p>

<pre><code>{1 :a 2 :b 3 :c} (
  (dup /a  succ succ %a)
  (dup /b  succ %b)
) tap
</code></pre>

<p>Returns <code>{3 :a 3 :b 3 :c}</code>.</p></div></div>

<p><a id="min-operator-id-times"></a>
<span class="reference-title">times</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Applies the quotation <span class="kwd">quot</span> <span class="kwd">int</span> times.</p></div>

<p><a id="min-operator-id-to-json"></a>
<span class="reference-title">to-json</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Converts <span class="kwd">a</span> into a JSON string.</p></div>

<p><a id="min-operator-id-to-yaml"></a>
<span class="reference-title">to-yaml</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Converts <span class="kwd">a</span> into a YAML string.</p>

<div class="note"><p>Note</p>

<p>At present, only <em>min</em> dictionaries containing string values are supported.</p></div></div>

<p><a id="min-operator-id-try"></a>
<span class="reference-title">try</span></p>

<div class="operator"><p><span class="kwd"> (<span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot</span><span class="kwd"><sub>2</sub></span><span class="kwd"><sub>?</sub></span> <span class="kwd">quot</span><span class="kwd"><sub>3</sub></span><span class="kwd"><sub>?</sub></span>) <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Evaluates a quotation as a try/catch/finally block.</p>

<p>The must contain the following elements:</p>

<ol>
<li>A quotation <span class="kwd">quot<sub>1</sub></span> containing the code to be evaluated (<em>try</em> block).</li>
<li><em>(optional)</em> A quotation <span class="kwd">quot<sub>2</sub></span> containing the code to execute in case of error (<em>catch</em> block).</li>
<li><em>(optional)</em> A quotation <span class="kwd">quot<sub>3</sub></span> containing the code to execute after the code has been evaluated, whether an error occurred or not (<em>finally</em> block).</li>
</ol>


<div class="sidebar"><p>Example</p>

<p>The following program executed on an empty stack prints the message &ldquo;Insufficient items on the stack&rdquo; and pushes 0 on the stack:</p>

<pre><code>  (
    (pop)
    (format-error puts)
    (0)
  ) try
</code></pre></div></div>

<p><a id="min-operator-id-type"></a>
<span class="reference-title">type</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the type of <span class="kwd">a</span>.</p></div>

<p><a id="min-operator-id-typealias"></a>
<span class="reference-title">typealias</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Creates a type alias <span class="kwd">&apos;sym<sub>1</sub></span> for type expression <span class="kwd">&apos;sym<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-unless"></a>
<span class="reference-title">unless</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>If <span class="kwd"><sub>1</sub></span> evaluates to <span class="kwd">false</span> then evaluates <span class="kwd"><sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-unseal-symbol"></a>
<span class="reference-title">unseal-symbol</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Unseals the user-defined symbol <span class="kwd">&apos;sym</span>, so that it can be re-assigned.</p></div>

<p><a id="min-operator-id-unseal-sigil"></a>
<span class="reference-title">unseal-sigil</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Unseals sigil <span class="kwd">&apos;sym</span>, so that it can be re-defined (system sigils cannot be unsealed).</p></div>

<p><a id="min-operator-id-version"></a>
<span class="reference-title">version</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the current min version number.</p></div>

<p><a id="min-operator-id-when"></a>
<span class="reference-title">when</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>If <span class="kwd">quot<sub>1</sub></span> evaluates to <span class="kwd">true</span> then evaluates <span class="kwd">quot<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-while"></a>
<span class="reference-title">while</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Executes <span class="kwd">quot<sub>2</sub></span> while <span class="kwd">quot<sub>1</sub></span> evaluates to <span class="kwd">true</span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program prints all natural numbers from 0 to 10:</p>

<pre><code>0 :count
(count 10 &lt;=) 
(count puts succ @count) while
</code></pre></div></div>

<p><a id="min-operator-id-with"></a>
<span class="reference-title">with</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Pushes each item of <span class="kwd">quot<sub>1</sub></span> on the stack using the scope of <span class="kwd">quot<sub>2</sub></span> as scope.</p></div>

<a id="<code>stack</code>-Module"></a>
<h3><code>stack</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-clear-stack"></a>
<span class="reference-title">clear-stack</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Empties the stack.</p></div>

<p><a id="min-operator-id-cleave"></a>
<span class="reference-title">cleave</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> (<span class="kwd">quot</span><span class="kwd"><sub>*</sub></span>) <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Applies each quotation contained in the first element to the second element <span class="kwd">a<sub>1</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves 2 on the stack:</p>

<p><code>(1 2 3) ((sum) (size)) cleave /</code></p></div></div>

<p><a id="min-operator-id-cons"></a>
<span class="reference-title">cons</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> (<span class="kwd">a<sub>*</sub></span>) <strong>&rArr;</strong> (<span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>*</sub></span>)</span></p>

<p>Prepends <span class="kwd">a<sub>1</sub></span> to the quotation on top of the stack.</p></div>

<p><a id="min-operator-id-dip"></a>
<span class="reference-title">dip</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> (<span class="kwd">a<sub>2</sub></span>) <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Removes the first and second element from the stack, dequotes the first element, and restores the second element.</p></div>

<p><a id="min-operator-id-dup"></a>
<span class="reference-title">dup</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Duplicates the first element on the stack.</p></div>

<p><span class="reference-title">getstack</span></p>

<div class="operator"><p><span class="kwd"> getstack <strong>&rArr;</strong> get-stack</span></p>

<p>See <a href="#min-operator-id-get-stack">get-stack</a>.</p></div>

<p><a id="min-operator-id-get-stack"></a>
<span class="reference-title">get-stack</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> (<span class="kwd">a<sub>*</sub></span>)</span></p>

<p>Puts a quotation containing the contents of the stack on the stack.</p></div>

<p><a id="min-operator-id-id"></a>
<span class="reference-title">id</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> &#x2205;</span></p>

<p>Does nothing.</p></div>

<p><a id="min-operator-id-keep"></a>
<span class="reference-title">keep</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Removes the first element from the stack, dequotes it, and restores the second element.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>5 3</code> on the stack:</p>

<p><code>2 3 '+ keep</code></p></div></div>

<p><a id="min-operator-id-nip"></a>
<span class="reference-title">nip</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>2</sub></span></span></p>

<p>Removes the second element from the stack.</p></div>

<p><a id="min-operator-id-over"></a>
<span class="reference-title">over</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Pushes a copy of the second element on top of the stack.</p></div>

<p><a id="min-operator-id-pick"></a>
<span class="reference-title">pick</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <span class="kwd">a<sub>3</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <span class="kwd">a<sub>3</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Pushes a copy of the third element on top of the stack.</p></div>

<p><a id="min-operator-id-pop"></a>
<span class="reference-title">pop</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Removes the first element from the stack.</p></div>

<p><a id="min-operator-id-rolldown"></a>
<span class="reference-title">rolldown</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <span class="kwd">a<sub>3</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>2</sub></span> <span class="kwd">a<sub>3</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Moves the third element in first position, the second in third position and the the first in second position.</p></div>

<p><a id="min-operator-id-rollup"></a>
<span class="reference-title">rollup</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <span class="kwd">a<sub>3</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>3</sub></span> <span class="kwd">a<sub>2</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Moves the third and second element into second and third position and moves the first element into third position.</p></div>

<p><span class="reference-title">setstack</span></p>

<div class="operator"><p><span class="kwd"> setstack <strong>&rArr;</strong> set-stack</span></p>

<p>See <a href="#min-operator-id-set-stack">set-stack</a>.</p></div>

<p><a id="min-operator-id-set-stack"></a>
<span class="reference-title">set-stack</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Substitute the existing stack with the contents of <span class="kwd">quot</span>.</p></div>

<p><a id="min-operator-id-sip"></a>
<span class="reference-title">sip</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span> <span class="kwd">quot<sub>1</sub></span></span></p>

<p>Saves the <span class="kwd">quot<sub>1</sub></span>, dequotes <span class="kwd">quot<sub>2</sub></span>, and restores <span class="kwd">quot<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-spread"></a>
<span class="reference-title">spread</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>*</sub></span> (<span class="kwd">quot</span><span class="kwd"><sub>*</sub></span>) <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Applies each quotation contained in the first element to each subsequent corresponding element.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(1 4)</code> on the stack:</p>

<p><code>(1 2) (3 4) ((0 get) (1 get)) spread</code></p></div></div>

<p><a id="min-operator-id-swap"></a>
<span class="reference-title">swap</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>2</sub></span> <span class="kwd">a<sub>1</sub></span></span></p>

<p>Swaps the first two elements on the stack.</p></div>

<p><a id="min-operator-id-swons"></a>
<span class="reference-title">swons</span></p>

<div class="operator"><p><span class="kwd"> (<span class="kwd">a<sub>*</sub></span>) <span class="kwd">a<sub>1</sub></span> <strong>&rArr;</strong> (<span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>*</sub></span>)</span></p>

<p>Prepends <span class="kwd">a<sub>1</sub></span> to the quotation that follows it.</p></div>

<a id="<code>seq</code>-Module"></a>
<h3><code>seq</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-all?"></a>
<span class="reference-title">all?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Applies predicate <span class="kwd">quot<sub>2</sub></span> to each element of <span class="kwd">quot<sub>1</sub></span> and returns <span class="kwd">true</span> if all elements of <span class="kwd">quot<sub>1</sub></span> satisfy predicate <span class="kwd">quot<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-any?"></a>
<span class="reference-title">any?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Applies predicate <span class="kwd">quot<sub>2</sub></span> to each element of <span class="kwd">quot<sub>1</sub></span> and returns <span class="kwd">true</span> if at least one element of <span class="kwd">quot<sub>1</sub></span> satisfies predicate <span class="kwd">quot<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-append"></a>
<span class="reference-title">append</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <span class="kwd">quot</span> <strong>&rArr;</strong> (<span class="kwd">a<sub>*</sub></span> <span class="kwd">a</span>)</span></p>

<p>Returns a new quotation containing the contents of <span class="kwd">quot</span> with <span class="kwd">a</span> appended.</p></div>

<p><a id="min-operator-id-get"></a>
<span class="reference-title">get</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Returns the <em>n<sup>th</sup></em> element of <span class="kwd">quot</span> (zero-based).</p></div>

<p><a id="min-operator-id-concat"></a>
<span class="reference-title">concat</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Concatenates <span class="kwd">quot<sub>1</sub></span> with <span class="kwd">quot<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-difference"></a>
<span class="reference-title">difference</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Calculates the difference <span class="kwd">quot<sub>3</sub></span> of <span class="kwd">quot<sub>1</sub></span> and <span class="kwd">quot<sub>2</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(2)</code> on the stack:</p>

<pre><code>(1 2 "test") ("test" "a" true 1) difference
</code></pre></div></div>

<p><a id="min-operator-id-drop"></a>
<span class="reference-title">drop</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Returns a quotation <span class="kwd">quot<sub>2</sub></span> containing the remaining elements after the first <em>n</em> values of the input quotation <span class="kwd">quot<sub>1</sub></span>, or an empty quotation if <span class="kwd">int</span> is greater than the length of <span class="kwd">quot<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-filter"></a>
<span class="reference-title">filter</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Returns a new quotation <span class="kwd">quot<sub>3</sub></span> containing all elements of <span class="kwd">quot<sub>1</sub></span> that satisfy predicate <span class="kwd">quot<sub>2</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(2 6 8 12)</code> on the stack:</p>

<pre><code>(1 37 34 2 6 8 12 21)
(dup 20 &lt; swap even? and) filter
</code></pre></div></div>

<p><a id="min-operator-id-find"></a>
<span class="reference-title">find</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the index of the first element within <span class="kwd">quot<sub>1</sub></span> that satisfies predicate <span class="kwd">quot<sub>2</sub></span>, or -1 if no element satisfies it.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>3</code> on the stack:</p>

<pre><code>(1 2 4 8 16)
(5 &gt;) find
</code></pre></div></div>

<p><a id="min-operator-id-first"></a>
<span class="reference-title">first</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Returns the first element of <span class="kwd">quot</span>.</p></div>

<p><a id="min-operator-id-flatten"></a>
<span class="reference-title">flatten</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Flattens all quotations within <span class="kwd">quot<sub>1</sub></span> and returns the resulting sequence <span class="kwd">quot<sub>2</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(1 2 3 4 5 6 7 8)</code> on the stack:</p>

<pre><code>(1 (2 3 4) 5 (6 7) 8)
flatten
</code></pre></div></div>

<p><a id="min-operator-id-harvest"></a>
<span class="reference-title">harvest</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Creates a new quotation <span class="kwd">quot<sub>2</sub></span> containing all elements of <span class="kwd">quot<sub>1</sub></span> except for empty quotations.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(1 2 3)</code> on the stack:</p>

<pre><code>(1 () () () 2 () 3)
harvest
</code></pre></div></div>

<p><a id="min-operator-id-in?"></a>
<span class="reference-title">in?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is contained in <span class="kwd">quot</span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-insert"></a>
<span class="reference-title">insert</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">a</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Inserts <span class="kwd">a</span> as the value of the <em>n<sup>th</sup></em> element <span class="kwd">quot<sub>1</sub></span> (zero-based), and returns the modified copy of the quotation <span class="kwd">quot<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-intersection"></a>
<span class="reference-title">intersection</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Calculates the intersection <span class="kwd">quot<sub>3</sub></span> of <span class="kwd">quot<sub>1</sub></span> and <span class="kwd">quot<sub>2</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(1 "test")</code> on the stack:</p>

<pre><code>(1 2 "test") ("test" "a" true 1) intersection
</code></pre></div></div>

<p><a id="min-operator-id-last"></a>
<span class="reference-title">last</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Returns the last element of <span class="kwd">quot</span>.</p></div>

<p><a id="min-operator-id-map"></a>
<span class="reference-title">map</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Returns a new quotation <span class="kwd">quot<sub>3</sub></span> obtained by applying <span class="kwd">quot<sub>2</sub></span> to each element of <span class="kwd">quot<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-map-reduce"></a>
<span class="reference-title">map-reduce</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <span class="kwd">quot<sub>3</sub></span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Applies <span class="kwd">quot<sub>2</sub></span> (map) to each element of <span class="kwd">quot<sub>1</sub></span> and then applies <span class="kwd">quot<sub>3</sub></span> (reduce) to each successive element of <span class="kwd">quot<sub>1</sub></span>. <span class="kwd">quot<sub>1</sub></span> must have at least one element.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>35</code> on the stack:</p>

<pre><code>(1 3 5)
(dup *) (+) map-reduce
</code></pre></div></div>

<p><a id="min-operator-id-partition"></a>
<span class="reference-title">partition</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span> <span class="kwd">quot<sub>4</sub></span></span></p>

<p>Partitions <span class="kwd">quot<sub>1</sub></span> into two quotations: <span class="kwd">quot<sub>3</sub></span> contains all elements of <span class="kwd">quot<sub>1</sub></span> that satisfy predicate <span class="kwd">quot<sub>2</sub></span>, <span class="kwd">quot<sub>4</sub></span> all the others.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(1 3 5) (2 4 6)</code> on the stack:</p>

<pre><code>(1 2 3 4 5 6)
(odd?) partition
</code></pre></div></div>

<p><a id="min-operator-id-one?"></a>
<span class="reference-title">one?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Applies predicate <span class="kwd">quot<sub>2</sub></span> to each element of <span class="kwd">quot<sub>1</sub></span> and returns <span class="kwd">true</span> if only one element of <span class="kwd">quot<sub>1</sub></span> satisfies predicate <span class="kwd">quot<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-prepend"></a>
<span class="reference-title">prepend</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <span class="kwd">quot</span> <strong>&rArr;</strong> (<span class="kwd">a</span> <span class="kwd">a<sub>*</sub></span>)</span></p>

<p>Returns a new quotation containing the contents of <span class="kwd">quot</span> with <span class="kwd">a</span> prepended.</p></div>

<p><a id="min-operator-id-quote-map"></a>
<span class="reference-title">quote-map</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Returns a new quotation <span class="kwd">quot<sub>2</sub></span> obtained by quoting each element of <span class="kwd">quot<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-raw-get"></a>
<span class="reference-title">raw-get</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">dict:rawval</span></span></p>

<p>Returns the <em>n<sup>th</sup></em> element of <span class="kwd">quot</span> (zero-based) wrapped in a <span class="kwd">dict:rawval</span>.</p></div>

<p><a id="min-operator-id-reduce"></a>
<span class="reference-title">reduce</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">a<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>2</sub></span></span></p>

<p>Combines each successive element of <span class="kwd">quot<sub>1</sub></span> using <span class="kwd">quot<sub>2</sub></span>. On the first iteration, the first two inputs processed by <span class="kwd">quot<sub>2</sub></span> are <span class="kwd">a<sub>1</sub></span> and the first element of <span class="kwd">quot<sub>1</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>120</code> on the stack:</p>

<pre><code>(1 2 3 4 5)
1 (*) reduce
</code></pre></div></div>

<p><a id="min-operator-id-reject"></a>
<span class="reference-title">reject</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Returns a new quotatios <span class="kwd">quot<sub>3</sub></span> including all elements of <span class="kwd">quot<sub>1</sub></span> that do not satisfy predicate <span class="kwd">quot<sub>2</sub></span> (i.e. the opposite of <code>filter</code>)</p></div>

<p><a id="min-operator-id-remove"></a>
<span class="reference-title">remove</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Returns the <em>n<sup>th</sup></em> element of <span class="kwd">quot<sub>1</sub></span> (zero-based), and returns the modified copy of the quotation <span class="kwd">quot<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-rest"></a>
<span class="reference-title">rest</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Returns a new quotation <span class="kwd">quot<sub>2</sub></span> containing all elements of <span class="kwd">quot<sub>1</sub></span> quotation except for the first.</p></div>

<p><a id="min-operator-id-reverse"></a>
<span class="reference-title">reverse</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Returns a new quotation <span class="kwd">quot<sub>2</sub></span> containing all elements of <span class="kwd">quot<sub>1</sub></span> in reverse order.</p></div>

<p><a id="min-operator-id-set"></a>
<span class="reference-title">set</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">a</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Sets the value of the <em>n<sup>th</sup></em> element <span class="kwd">quot<sub>1</sub></span> (zero-based) to <span class="kwd">a</span>, and returns the modified copy of the quotation <span class="kwd">quot<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-set-sym"></a>
<span class="reference-title">set-sym</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">&apos;sym</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Sets the value of the <em>n<sup>th</sup></em> element <span class="kwd">quot<sub>1</sub></span> (zero-based) to <span class="kwd">&apos;sym</span> (treating it as a symbol), and returns the modified copy of the quotation <span class="kwd">quot<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-shorten"></a>
<span class="reference-title">shorten</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Returns a quotation <span class="kwd">quot<sub>2</sub></span> containing the first <em>n</em> values of the input quotation <span class="kwd">quot<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-size"></a>
<span class="reference-title">size</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the length of <span class="kwd">quot</span>.</p></div>

<p><a id="min-operator-id-slice"></a>
<span class="reference-title">slice</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Creates a new quotation <span class="kwd">quot<sub>2</sub></span> obtaining by selecting all elements of <span class="kwd">quot<sub>1</sub></span> between indexes <span class="kwd">int<sub>1</sub></span> and <span class="kwd">int<sub>2</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(3 4 5)</code> on the stack:</p>

<pre><code>(1 2 3 4 5 6)
2 4 slice
</code></pre></div></div>

<p><a id="min-operator-id-sort"></a>
<span class="reference-title">sort</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Sorts all elements of <span class="kwd">quot<sub>1</sub></span> according to predicate <span class="kwd">quot<sub>2</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(1 3 5 7 9 13 16)</code> on the stack:</p>

<pre><code>(1 9 5 13 16 3 7) '&gt; sort
</code></pre></div></div>

<p><a id="min-operator-id-symmetric-difference"></a>
<span class="reference-title">symmetric-difference</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Calculates the symmetric difference <span class="kwd">quot<sub>3</sub></span> of <span class="kwd">quot<sub>1</sub></span> and <span class="kwd">quot<sub>2</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(true "a" 2)</code> on the stack:</p>

<pre><code>(1 2 "test") ("test" "a" true 1) symmetric-difference
</code></pre></div></div>

<p><a id="min-operator-id-take"></a>
<span class="reference-title">take</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Returns a quotation <span class="kwd">quot<sub>2</sub></span> containing the first <em>n</em> values of the input quotation <span class="kwd">quot<sub>1</sub></span>, or <span class="kwd">quot<sub>1</sub></span> itself if <span class="kwd">int</span> is greater than the length of <span class="kwd">quot<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-union"></a>
<span class="reference-title">union</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>1</sub></span> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>3</sub></span></span></p>

<p>Calculates the union <span class="kwd">quot<sub>3</sub></span> of <span class="kwd">quot<sub>1</sub></span> and <span class="kwd">quot<sub>2</sub></span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program leaves <code>(true 1 "test" "a" 2)</code> on the stack:</p>

<pre><code>(1 2 "test") ("test" "a" true 1) union
</code></pre></div></div>

<a id="<code>dict</code>-Module"></a>
<h3><code>dict</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><span class="reference-title">/</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> /<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> dget</span></p>

<p>See <a href="#min-operator-id-dget">dget</a>.</p></div>

<p><span class="reference-title">%</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> %<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> dset</span></p>

<p>See <a href="#min-operator-id-dset">dset</a>.</p></div>

<p><a id="min-operator-id-ddup"></a>
<span class="reference-title">ddup</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">dict<sub>2</sub></span></span></p>

<p>Returns a copy of <span class="kwd">dict<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-ddel"></a>
<span class="reference-title">ddel</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Removes <span class="kwd">&apos;sym</span> from <span class="kwd">dict<sub>1</sub></span> and returns <span class="kwd">dict<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-dget"></a>
<span class="reference-title">dget</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Returns the value of key <span class="kwd">&apos;sym</span> from dictionary <span class="kwd">dict</span>.</p></div>

<p><a id="min-operator-id-dget-raw"></a>
<span class="reference-title">dget-raw</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:rawval</span></span></p>

<p>Returns the value of key <span class="kwd">&apos;sym</span> from dictionary <span class="kwd">dict</span>, wrapped in a <span class="kwd">dict:rawval</span>.</p></div>

<p><a id="min-operator-id-dhas?"></a>
<span class="reference-title">dhas?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if dictionary <span class="kwd">dict</span> contains the key <span class="kwd">&apos;sym</span>, <span class="kwd">false</span> otherwise.</p>

<div class="sidebar"><p>Example</p>

<p>The following program returns <span class="kwd">true</span>:</p>

<pre><code>{true :a1 "aaa" :a2 false :a3} 'a2 dhas?
</code></pre></div></div>

<p><a id="min-operator-id-dkeys"></a>
<span class="reference-title">dkeys</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <strong>&rArr;</strong> (<span class="kwd">str</span><span class="kwd"><sub>*</sub></span>)</span></p>

<p>Returns a quotation containing all the keys of dictionary <span class="kwd">dict</span>.</p></div>

<p><a id="min-operator-id-dpick"></a>
<span class="reference-title">dpick</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict<sub>1</sub></span> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">dict<sub>2</sub></span></span></p>

<p>Returns a new dictionary <span class="kwd">dict<sub>2</sub></span> containing the elements of <span class="kwd">dict<sub>1</sub></span> whose keys are included in <span class="kwd">quot</span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program returns <code>{4 :a 7 :d}</code>:</p>

<pre><code>{5 :q 4 :a 6 :c 7 :d "d" :a} ("a" "d") dpick
</code></pre></div></div>

<p><a id="min-operator-id-dpairs"></a>
<span class="reference-title">dpairs</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <strong>&rArr;</strong> (<span class="kwd">a<sub>*</sub></span>)</span></p>

<p>Returns a quotation containing all the keys (odd items) and values (even items) of dictionary <span class="kwd">dict</span>.</p></div>

<p><a id="min-operator-id-dset"></a>
<span class="reference-title">dset</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <span class="kwd">a</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Sets the value of the <span class="kwd">&apos;sym</span> of <span class="kwd">dict<sub>1</sub></span>  to <span class="kwd">a</span>, and returns the modified dictionary <span class="kwd">dict</span>.</p></div>

<p><a id="min-operator-id-dset-sym"></a>
<span class="reference-title">dset-sym</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <span class="kwd">&apos;sym</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Sets the value of the <span class="kwd">&apos;sym</span> of <span class="kwd">dict<sub>1</sub></span>  to <span class="kwd">&apos;sym</span> (treating it as a symbol), and returns the modified dictionary <span class="kwd">dict</span>.</p></div>

<p><a id="min-operator-id-dtype"></a>
<span class="reference-title">dtype</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns a string set to the type of <span class="kwd">dict</span> (empty if the dictionary has no type).</p></div>

<p><a id="min-operator-id-dvalues"></a>
<span class="reference-title">dvalues</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <strong>&rArr;</strong> (<span class="kwd">a<sub>*</sub></span>)</span></p>

<p>Returns a quotation containing all the values of dictionary <span class="kwd">dict</span>.</p></div>

<a id="<code>dstore</code>-Module"></a>
<h3><code>dstore</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-dsdelete"></a>
<span class="reference-title">dsdelete</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:datastore</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:datastore</span></span></p>

<p>Removes an item from the datastore <span class="kwd">dict:datastore</span>. The item is uniquely identified by <span class="kwd">&apos;sym</span>, which contains the collection containing the item and the item id, separated by a forward slash (/). Puts the reference to the modified datastore back on tbe stack.</p></div>

<p><a id="min-operator-id-dsget"></a>
<span class="reference-title">dsget</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:datastore</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Retrieves item <span class="kwd">dict</span> from datastore <span class="kwd">dict:datastore</span>. <span class="kwd">dict</span> is retrieved by specifying <span class="kwd">&apos;sym</span>, which contains the collection containing the item and the item id, separated by a forward slash (/).</p></div>

<p><a id="min-operator-id-dsinit"></a>
<span class="reference-title">dsinit</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:datastore</span></span></p>

<p>Initializes a bew datastore by creating the <span class="kwd">&apos;sym</span> JSON file. Puts the datastore instance on the stack.</p></div>

<p><a id="min-operator-id-dspost"></a>
<span class="reference-title">dspost</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:datastore</span> <span class="kwd">&apos;sym</span> <span class="kwd">dict</span> <strong>&rArr;</strong> <span class="kwd">dict:datastore</span></span></p>

<p>Adds the dictionary <span class="kwd">dict</span> to the datastore <span class="kwd">dict:datastore</span> inside collection <span class="kwd">&apos;sym</span>, generating and adding a unique <strong>id</strong> field to <span class="kwd">dict</span>. If the collection <span class="kwd">&apos;sym</span> does not exist it is created. Puts the reference to the modified datastore back on tbe stack.</p></div>

<p><a id="min-operator-id-dsput"></a>
<span class="reference-title">dsput</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:datastore</span> <span class="kwd">&apos;sym</span> <span class="kwd">dict</span> <strong>&rArr;</strong> <span class="kwd">dict:datastore</span></span></p>

<p>Adds the dictionary <span class="kwd">dict</span> to the datastore <span class="kwd">dict:datastore</span>. <span class="kwd">&apos;sym</span> contains the collection where <span class="kwd">dict</span> will be placed and the id of <span class="kwd">dict</span>, separated by a forward slash (/). If the collection <span class="kwd">&apos;sym</span> does not exist it is created. Puts the reference to the modified datastore back on tbe stack.</p></div>

<p><a id="min-operator-id-dsquery"></a>
<span class="reference-title">dsquery</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:datastore</span> <span class="kwd">&apos;sym</span> <span class="kwd">quot</span> <strong>&rArr;</strong> (<span class="kwd">dict<sub>*</sub></span>)</span></p>

<p>Retrieves a quotation of dictionaries from the collection <span class="kwd">&apos;sym</span> of datastore <span class="kwd">dict:datastore</span> obtained by applying <span class="kwd">quot</span> as a filter to each item of the collection, picking only the elements that match the filter.</p>

<div class="sidebar"><p>Example</p>

<p>Assuming that <strong>ds</strong> is a datastore, the following program retrieves all elements of teh collection <strong>posts</strong> whose author field is set to &ldquo;h3rald&rdquo;:</p>

<pre><code> ds "posts" (/author "h3rald" ==) dsquery
</code></pre></div></div>

<p><a id="min-operator-id-dsread"></a>
<span class="reference-title">dsread</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:datastore</span></span></p>

<p>Reads the previously-created datastore from the file <span class="kwd">&apos;sym</span> and puts the resulting datastore instance on the stack.</p></div>

<p><a id="min-operator-id-dswrite"></a>
<span class="reference-title">dswrite</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:datastore</span> <strong>&rArr;</strong> <span class="kwd">dict:datastore</span></span></p>

<p>Writes the contents of the datastore <span class="kwd">dict:datastore</span> to the filesystem.</p></div>

<a id="<code>io</code>-Module"></a>
<h3><code>io</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-ask"></a>
<span class="reference-title">ask</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">str<sub>2</sub></span></span></p>

<p>Prints <span class="kwd">str<sub>1</sub></span> (prompt), reads a line from STDIN and places it on top of the stack as a string.</p></div>

<p><a id="min-operator-id-choose"></a>
<span class="reference-title">choose</span></p>

<div class="operator"><p><span class="kwd"> ((<span class="kwd">str<sub>1</sub></span> <span class="kwd">quot<sub>1</sub></span>)<span class="kwd"><sub>+</sub></span>) <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">a<sub>*</sub></span></span></p>

<p>Prints <span class="kwd">str<sub>2</sub></span>, then prints all <span class="kwd">str<sub>1</sub></span> included in the quotation prepended with a number, and waits from valid input from the user.</p>

<p>If the user enters a number that matches one of the choices, then the corresponding quotation <span class="kwd">quot<sub>1</sub></span> is executed, otherwise the choice menu is displayed again until a valid choice is made.</p></div>

<p><a id="min-operator-id-clear"></a>
<span class="reference-title">clear</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> &#x2205;</span></p>

<p>Clears the screen.</p></div>

<p><a id="min-operator-id-column-print"></a>
<span class="reference-title">column-print</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints all elements of <span class="kwd">quot</span> to STDOUT, in <span class="kwd">int</span> columns.</p></div>

<p><a id="min-operator-id-confirm"></a>
<span class="reference-title">confirm</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Prints <span class="kwd">str</span> (prompt) appending <code>" [yes/no]: "</code>, reads a line from STDIN and:</p>

<ul>
<li>if it matches <code>/^y(es)?$/i</code>, puts <span class="kwd">true</span> on the stack.</li>
<li>if it matches <code>/^no?$/i</code>, puts <span class="kwd">false</span> on the stack.</li>
<li>Otherwise, it prints <code>Invalid answer. Please enter 'yes' or 'no':</code> and waits for a new answer.</li>
</ul>
</div>

<p><a id="min-operator-id-debug"></a>
<span class="reference-title">debug</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">a</span> and a new line to STDOUT, if logging level is set to <span class="kwd">debug</span> or lower.</p></div>

<p><a id="min-operator-id-error"></a>
<span class="reference-title">error</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">a</span> and a new line to STDERR, if logging level is set to <span class="kwd">error</span> or lower.</p></div>

<p><a id="min-operator-id-fappend"></a>
<span class="reference-title">fappend</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Appends <span class="kwd">str<sub>1</sub></span> to the end of file <span class="kwd">str<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-fatal"></a>
<span class="reference-title">fatal</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">a</span> and a new line to STDERR, and exists the program with error code <code>100</code>.</p></div>

<p><a id="min-operator-id-fread"></a>
<span class="reference-title">fread</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Reads the file <span class="kwd">str</span> and puts its contents on the top of the stack as a string.</p></div>

<p><a id="min-operator-id-fwrite"></a>
<span class="reference-title">fwrite</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Writes <span class="kwd">str<sub>1</sub></span> to the file <span class="kwd">str<sub>2</sub></span>, erasing all its contents first.</p></div>

<p><a id="min-operator-id-getchr"></a>
<span class="reference-title">getchr</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Reads single character from STDIN without waiting for ENTER key and places its ASCII code on top of the stack.</p></div>

<p><a id="min-operator-id-info"></a>
<span class="reference-title">info</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">a</span> and a new line to STDOUT, if logging level is set to <span class="kwd">info</span> or lower.</p></div>

<p><a id="min-operator-id-mapkey"></a>
<span class="reference-title">mapkey</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Maps the named key/key combination <span class="kwd">&apos;sym</span> to the quotation <span class="kwd">quot</span>, so that <span class="kwd">quot</span> is executed when key <span class="kwd">&apos;sym</span> is pressed.</p>

<div class="note"><p>Notes</p>

<ul>
<li>At present, only the key names and sequences defined in the <a href="https://h3rald.com/minline/minline.html">minline</a> library are supported.</li>
<li>The quotation will be executed by a copy of the min interpreter created when the mapping was defined. In other words, quotations executed by key bindings will not affect the current stack.</li>
</ul>
</div>

<div class="sidebar"><p>Example</p>

<p>The following program:</p>

<pre><code>(clear) 'ctrl+l mapkey
</code></pre>

<p>causes the <code>CTRL+L</code> key to clear the screen.</p></div></div>

<p><a id="min-operator-id-newline"></a>
<span class="reference-title">newline</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> &#x2205;</span></p>

<p>Prints a new line to STDOUT.</p></div>

<p><a id="min-operator-id-notice"></a>
<span class="reference-title">notice</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">a</span> and a new line to STDOUT, if logging level is set to <span class="kwd">notice</span> (default) or lower.</p></div>

<p><a id="min-operator-id-password"></a>
<span class="reference-title">password</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Reads a line from STDIN displaying * for each typed character, and places it on top of the stack as a string.</p></div>

<p><a id="min-operator-id-print"></a>
<span class="reference-title">print</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">a</span> to STDOUT.</p></div>

<p><a id="min-operator-id-putchr"></a>
<span class="reference-title">putchr</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">str</span> to STDOUT without printing a new line (<span class="kwd">str</span> must contain only one character).</p></div>

<p><span class="reference-title">read</span></p>

<div class="operator"><p><span class="kwd"> read <strong>&rArr;</strong> fread</span></p>

<p>See <a href="#min-operator-id-fread">fread</a>.</p></div>

<p><a id="min-operator-id-type"></a>
<span class="reference-title">type</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Puts the data type of <span class="kwd">a</span> on the stack. In cased of typed dictionaries, the type name is prefixed by <code>dict:</code>, e.g. <code>dict:module</code>, <code>dict:socket</code>, etc.</p></div>

<p><a id="min-operator-id-unmapkey"></a>
<span class="reference-title">unmapkey</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Unmaps a previously-mapped key or key-combination <span class="kwd">&apos;sym</span>, restoring the default mapping if available.</p>

<div class="note"><p>Notes</p>

<ul>
<li>At present, only the key names and sequences defined in the <a href="https://h3rald.com/minline/minline.html">minline</a> library are supported.</li>
<li>At present, all the default mappings of min are those provided by the <a href="https://h3rald.com/minline/minline.html">minline</a> library.</li>
</ul>
</div></div>

<p><a id="min-operator-id-warn"></a>
<span class="reference-title">warn</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">a</span></span></p>

<p>Prints <span class="kwd">a</span> and a new line to STDERR, if logging level is set to <span class="kwd">warn</span> or lower.</p></div>

<p><span class="reference-title">write</span></p>

<div class="operator"><p><span class="kwd"> write <strong>&rArr;</strong> fwrite</span></p>

<p>See <a href="#min-operator-id-fwrite">fwrite</a>.</p></div>

<a id="<code>fs</code>-Module"></a>
<h3><code>fs</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-absolute-path"></a>
<span class="reference-title">absolute-path</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the absolute path to <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-absolute-path?"></a>
<span class="reference-title">absolute-path?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">&apos;sym</span> is an absolute path.</p></div>

<p><a id="min-operator-id-atime"></a>
<span class="reference-title">atime</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">flt</span></span></p>

<p>Returns a timestamp corresponding to the time that file/directory <span class="kwd">&apos;sym</span> was last accessed.</p></div>

<p><a id="min-operator-id-ctime"></a>
<span class="reference-title">ctime</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">flt</span></span></p>

<p>Returns a timestamp corresponding to the time that file/directory <span class="kwd">&apos;sym</span> was created.</p></div>

<p><a id="min-operator-id-dirname"></a>
<span class="reference-title">dirname</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the path of the directory containing path <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-dir?"></a>
<span class="reference-title">dir?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the specified path <span class="kwd">&apos;sym</span> exists and is a directory.</p></div>

<p><a id="min-operator-id-exists?"></a>
<span class="reference-title">exists?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the specified file or directory <span class="kwd">&apos;sym</span> exists.</p></div>

<p><a id="min-operator-id-expand-filename"></a>
<span class="reference-title">expand-filename</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the absolute path to the file name <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-expand-symlink"></a>
<span class="reference-title">expand-symlink</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the absolute path to the symlink <span class="kwd">&apos;sym</span> (an error is raised if <span class="kwd">&apos;sym</span> is not a symlink).</p></div>

<p><a id="min-operator-id-file?"></a>
<span class="reference-title">file?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the specified path <span class="kwd">&apos;sym</span> exists and is a file.</p></div>

<p><a id="min-operator-id-filename"></a>
<span class="reference-title">filename</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the file name of path <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-fperms"></a>
<span class="reference-title">fperms</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the Unix permissions (expressed as a three-digit number) of file/directory <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-fsize"></a>
<span class="reference-title">fsize</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the size in bytes of file/directory <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-fstats"></a>
<span class="reference-title">fstats</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Returns a dictionary <span class="kwd">dict</span> containing information on file/directory <span class="kwd">&apos;sym</span>.</p>

<div class="sidebar"><p>Example</p>

<p>Assuming that <code>min</code> is a file, the following:</p>

<p><code>"min" fstats</code></p>

<p>produces:</p>

<pre><code> {
   "min" :name
   16777220 :device
   50112479 :file
   "file" :type
   617068 :size
   755 :permissions
   1 :nlinks
   1496583112.0 :ctime
   1496584370.0 :atime
   1496583112.0 :mtime
 }
</code></pre></div></div>

<p><a id="min-operator-id-ftype"></a>
<span class="reference-title">ftype</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the type of file/directory <span class="kwd">&apos;sym</span> (<code>"file"</code> or <code>"dir"</code>).</p></div>

<p><a id="min-operator-id-hidden?"></a>
<span class="reference-title">hidden?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if file/directory <span class="kwd">&apos;sym</span> is hidden, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-join-path"></a>
<span class="reference-title">join-path</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Joins the strings contained in <span class="kwd">quot</span> with <code>/</code>.</p></div>

<p><a id="min-operator-id-normalized-path"></a>
<span class="reference-title">normalized-path</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the normalized path to <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-mtime"></a>
<span class="reference-title">mtime</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">flt</span></span></p>

<p>Returns a timestamp corresponding to the time that file/directory <span class="kwd">&apos;sym</span> was last modified.</p></div>

<p><a id="min-operator-id-relative-path"></a>
<span class="reference-title">relative-path</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the path of <span class="kwd">&apos;sym<sub>1</sub></span> relative to <span class="kwd">&apos;sym<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-symlink?"></a>
<span class="reference-title">symlink?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the specified path <span class="kwd">&apos;sym</span> exists and is a symbolic link.</p></div>

<p><a id="min-operator-id-unix-path"></a>
<span class="reference-title">unix-path</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Converts all backslashes in <span class="kwd">&apos;sym</span> to slashes.</p></div>

<p><a id="min-operator-id-windows-path"></a>
<span class="reference-title">windows-path</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Converts all slashes in <span class="kwd">&apos;sym</span> to backslashes.</p></div>

<a id="<code>logic</code>-Module"></a>
<h3><code>logic</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-&amp;gt;"></a>
<span class="reference-title">&gt;</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is greater than <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p>

<div class="note"><p>Note</p>

<p>Only comparisons among two numbers or two strings are supported.</p></div></div>

<p><a id="min-operator-id-&amp;gt;="></a>
<span class="reference-title">&gt;=</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is greater than or equal to <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p>

<div class="note"><p>Note</p>

<p>Only comparisons among two numbers or two strings are supported.</p></div></div>

<p><a id="min-operator-id-&amp;lt;"></a>
<span class="reference-title">&lt;</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is smaller than <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p>

<div class="note"><p>Note</p>

<p>Only comparisons among two numbers or two strings are supported.</p></div></div>

<p><a id="min-operator-id-&amp;lt;="></a>
<span class="reference-title">&lt;=</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is smaller than or equal to <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p>

<div class="note"><p>Note</p>

<p>Only comparisons among two numbers or two strings are supported.</p></div></div>

<p><a id="min-operator-id-=="></a>
<span class="reference-title">==</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is equal to <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-!="></a>
<span class="reference-title">!=</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a<sub>1</sub></span> <span class="kwd">a<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a<sub>1</sub></span> is not equal to <span class="kwd">a<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p></div>

<p><span class="reference-title">&vert;&vert;</span></p>

<div class="operator"><p><span class="kwd"> &vert;&vert; <strong>&rArr;</strong> expect-any</span></p>

<p>See <a href="#min-operator-id-expect-any">expect-any</a>.</p></div>

<p><span class="reference-title">&amp;&amp;</span></p>

<div class="operator"><p><span class="kwd"> &amp;&amp; <strong>&rArr;</strong> expect-all</span></p>

<p>See <a href="#min-operator-id-expect-all">expect-all</a>.</p></div>

<p><a id="min-operator-id-and"></a>
<span class="reference-title">and</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">bool<sub>1</sub></span> <span class="kwd">bool<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool<sub>3</sub></span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">bool<sub>1</sub></span> is equal to <span class="kwd">bool<sub>2</sub></span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-boolean?"></a>
<span class="reference-title">boolean?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is a boolean, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-dictionary?"></a>
<span class="reference-title">dictionary?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is a dictionary, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-expect-all"></a>
<span class="reference-title">expect-all</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Assuming that <span class="kwd">quot</span> is a quotation of quotations each evaluating to a boolean value, it pushes <span class="kwd">true</span> on the stack if they all evaluate to <span class="kwd">true</span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-expect-any"></a>
<span class="reference-title">expect-any</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Assuming that <span class="kwd">quot</span> is a quotation of quotations each evaluating to a boolean value, it pushes <span class="kwd">true</span> on the stack if any evaluates to <span class="kwd">true</span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-float?"></a>
<span class="reference-title">float?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is a float, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-or"></a>
<span class="reference-title">or</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">bool<sub>1</sub></span> <span class="kwd">bool<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool<sub>3</sub></span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">bool<sub>1</sub></span> or <span class="kwd">bool<sub>2</sub></span> is <span class="kwd">true</span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-integer?"></a>
<span class="reference-title">integer?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is an integer, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-not"></a>
<span class="reference-title">not</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">bool<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">bool<sub>2</sub></span></span></p>

<p>Negates <span class="kwd">bool<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-null?"></a>
<span class="reference-title">null?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is <span class="kwd">null</span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-number?"></a>
<span class="reference-title">number?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is a number, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-quotation?"></a>
<span class="reference-title">quotation?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is a quotation, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-quoted-symbol?"></a>
<span class="reference-title">quoted-symbol?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is a quoted symbol, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-string?"></a>
<span class="reference-title">string?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is a string, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-stringlike?"></a>
<span class="reference-title">stringlike?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">a</span> is a string or a quoted symbol, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-type?"></a>
<span class="reference-title">type?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">a</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the data type of <span class="kwd">a</span> satisfies the specified type expression <span class="kwd">&apos;sym</span>, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-xor"></a>
<span class="reference-title">xor</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">bool<sub>1</sub></span> <span class="kwd">bool<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool<sub>3</sub></span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">bool<sub>1</sub></span> and <span class="kwd">bool<sub>2</sub></span> are different, <span class="kwd">false</span> otherwise.</p></div>

<a id="<code>str</code>-Module"></a>
<h3><code>str</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><span class="reference-title">%</span></p>

<div class="operator"><p><span class="kwd"> % <strong>&rArr;</strong> interpolate</span></p>

<p>See <a href="#min-operator-id-interpolate">interpolate</a>.</p></div>

<p><span class="reference-title">=%</span></p>

<div class="operator"><p><span class="kwd"> =% <strong>&rArr;</strong> apply-interpolate</span></p>

<p>See <a href="#min-operator-id-apply-interpolate">apply-interpolate</a>.</p></div>

<p><a id="min-operator-id-apply-interpolate"></a>
<span class="reference-title">apply-interpolate</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>The same as pushing <code>apply</code> and then <code>interpolate</code> on the stack.</p></div>

<p><a id="min-operator-id-capitalize"></a>
<span class="reference-title">capitalize</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns a copy of <span class="kwd">&apos;sym</span> with the first character capitalized.</p></div>

<p><a id="min-operator-id-chr"></a>
<span class="reference-title">chr</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the single character <span class="kwd">str</span> obtained by interpreting <span class="kwd">int</span> as an ASCII code.</p></div>

<p><a id="min-operator-id-escape"></a>
<span class="reference-title">escape</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns a copy of <span class="kwd">&apos;sym</span> with quotes and backslashes escaped with a backslash.</p></div>

<p><a id="min-operator-id-from-bin"></a>
<span class="reference-title">from-bin</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Parses <span class="kwd">&apos;sym</span> as a binary number.</p></div>

<p><a id="min-operator-id-from-dec"></a>
<span class="reference-title">from-dec</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Parses <span class="kwd">&apos;sym</span> as a decimal number.</p></div>

<p><a id="min-operator-id-from-hex"></a>
<span class="reference-title">from-hex</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Parses <span class="kwd">&apos;sym</span> as a hexadecimal number.</p></div>

<p><a id="min-operator-id-from-oct"></a>
<span class="reference-title">from-oct</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Parses <span class="kwd">&apos;sym</span> as a octal number.</p></div>

<p><a id="min-operator-id-from-semver"></a>
<span class="reference-title">from-semver</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Given a basic <a href="https://semver.org">SemVer</a>-compliant string (with no additional labels) <span class="kwd">str</span>,
it pushes a dictionary <span class="kwd">dict</span> on the stack containing a <strong>major</strong>, <strong>minor</strong>, and <strong>patch</strong> key/value pairs.</p></div>

<p><a id="min-operator-id-indent"></a>
<span class="reference-title">indent</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns <span class="kwd">str</span> containing <span class="kwd">&apos;sym</span> indented with <span class="kwd">int</span> spaces.</p></div>

<p><a id="min-operator-id-indexof"></a>
<span class="reference-title">indexof</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>If <span class="kwd">str<sub>2</sub></span> is contained in <span class="kwd">str<sub>1</sub></span>, returns the index of the first match or -1 if no match is found.</p></div>

<p><a id="min-operator-id-interpolate"></a>
<span class="reference-title">interpolate</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Substitutes the placeholders included in <span class="kwd">str</span> with the values in <span class="kwd">quot</span>.</p>

<div class="note"><p>Notes</p>

<ul>
<li>If <span class="kwd">quot</span> contains symbols or quotations, they are not interpreted. To do so, call <code>apply</code> before interpolating or use <code>apply-interpolate</code> instead.</li>
<li>You can use the <code>$#</code> placeholder to indicate the next placeholder that has not been already referenced in the string.</li>
<li>You can use named placeholders like <code>$pwd</code>, but in this case <span class="kwd">quot</span> must contain a quotation containing both the placeholder names (odd items) and the values (even items).</li>
</ul>
</div>

<div class="sidebar"><p>Example</p>

<p>The following code (executed in a directory called &lsquo;/Users/h3rald/Development/min&rsquo; containing 19 files):</p>

<p><code>"Directory '$1' includes $2 files." (. (. ls 'file? filter size)) apply interpolate</code></p>

<p>produces:</p>

<p><code>"Directory '/Users/h3rald/Development/min' includes 19 files."</code></p></div></div>

<p><a id="min-operator-id-join"></a>
<span class="reference-title">join</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Joins the elements of <span class="kwd">quot</span> using separator <span class="kwd">&apos;sym</span>, producing <span class="kwd">str</span>.</p></div>

<p><a id="min-operator-id-length"></a>
<span class="reference-title">length</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the length of <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-lowercase"></a>
<span class="reference-title">lowercase</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns a copy of <span class="kwd">&apos;sym</span> converted to lowercase.</p></div>

<p><a id="min-operator-id-match?"></a>
<span class="reference-title">match?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">str<sub>2</sub></span> matches <span class="kwd">str<sub>1</sub></span>, <span class="kwd">false</span> otherwise.</p>

<div class="tip"><p>Tip</p>

<p><span class="kwd">str<sub>2</sub></span> is a <a href="https://www.pcre.org/">Perl Compatible Regular Expression</a>.</p></div></div>

<p><a id="min-operator-id-ord"></a>
<span class="reference-title">ord</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the ASCII code <span class="kwd">int</span> corresponding to the single character <span class="kwd">str</span>.</p></div>

<p><a id="min-operator-id-parse-url"></a>
<span class="reference-title">parse-url</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">dict:url</span></span></p>

<p>Parses the url <span class="kwd">str</span> into its components and stores them into <span class="kwd">dict:url</span>.</p></div>

<p><a id="min-operator-id-prefix"></a>
<span class="reference-title">prefix</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Prepends <span class="kwd">&apos;sym<sub>2</sub></span> to <span class="kwd">&apos;sym<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-repeat"></a>
<span class="reference-title">repeat</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns <span class="kwd">str</span> containing <span class="kwd">&apos;sym</span> repeated <span class="kwd">int</span> times.</p></div>

<p><a id="min-operator-id-replace"></a>
<span class="reference-title">replace</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <span class="kwd">str<sub>3</sub></span> <strong>&rArr;</strong> <span class="kwd">str<sub>4</sub></span></span></p>

<p>Returns a copy of <span class="kwd">str<sub>1</sub></span> containing all occurrences of <span class="kwd">str<sub>2</sub></span> replaced by <span class="kwd">str<sub>3</sub></span></p>

<div class="tip"><p>Tip</p>

<p><span class="kwd">str<sub>2</sub></span> is a <a href="https://www.pcre.org/">Perl Compatible Regular Expression</a>.</p></div>

<div class="sidebar"><p>Example</p>

<p>The following:</p>

<p><code>"This is a stupid test. Is it really a stupid test?" " s[a-z]+" " simple" replace</code></p>

<p>produces:</p>

<p><code>"This is a simple test. Is it really a simple test?"</code></p></div></div>

<p><a id="min-operator-id-replace-apply"></a>
<span class="reference-title">replace-apply</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">str<sub>3</sub></span></span></p>

<p>Returns a copy of <span class="kwd">str<sub>1</sub></span> containing all occurrences of <span class="kwd">str<sub>2</sub></span> replaced by applying <span class="kwd">quot</span> to each quotation corresponding to each match.</p>

<div class="tip"><p>Tip</p>

<p><span class="kwd">str<sub>2</sub></span> is a <a href="https://www.pcre.org/">Perl Compatible Regular Expression</a>.</p></div>

<div class="sidebar"><p>Example</p>

<p>The following:</p>

<p><code>":1::2::3::4:" ":(\d):" (1 get :d "-$#-" (d) =%) replace-apply</code></p>

<p>produces:</p>

<p><code>"-1--2--3--4-"</code></p>

<p>Note that for each match the following quotations (each containing the full match and the captured matches) are produced as input for the replace quotation:
     (&ldquo;-1-&rdquo; &ldquo;1&rdquo;)
     (&ldquo;-2-&rdquo; &ldquo;2&rdquo;)
     (&ldquo;-3-&rdquo; &ldquo;3&rdquo;)
     (&ldquo;-4-&rdquo; &ldquo;4&rdquo;)</p></div></div>

<p><a id="min-operator-id-search"></a>
<span class="reference-title">search</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Returns a quotation containing the first occurrence of <span class="kwd">str<sub>2</sub></span> within <span class="kwd">str<sub>1</sub></span>. Note that:</p>

<ul>
<li>The first element of <span class="kwd">quot</span> is the matching substring.</li>
<li>Other elements (if any) contain captured substrings.</li>
<li>If no matches are found, the quotation contains empty strings.</li>
</ul>


<div class="tip"><p>Tip</p>

<p><span class="kwd">str<sub>2</sub></span> is a <a href="https://www.pcre.org/">Perl Compatible Regular Expression</a>.</p></div>

<div class="sidebar"><p>Example</p>

<p>The following:</p>

<p><code>"192.168.1.1, 127.0.0.1" "[0-9]+\.[0-9]+\.([0-9]+)\.([0-9]+)" search</code></p>

<p>produces: <code>("192.168.1.1", "1", "1")</code></p></div></div>

<p><a id="min-operator-id-search-all"></a>
<span class="reference-title">search-all</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Returns a quotation of quotations (like the one returned by the search operator) containing all occurrences of <span class="kwd">str<sub>2</sub></span> within <span class="kwd">str<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-semver-inc-major"></a>
<span class="reference-title">semver-inc-major</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">str<sub>2</sub></span></span></p>

<p>Increments the major digit of the <a href="https://semver.org">SemVer</a>-compliant string (with no additional labels) <span class="kwd">str<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-semver-inc-minor"></a>
<span class="reference-title">semver-inc-minor</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">str<sub>2</sub></span></span></p>

<p>Increments the minor digit of the <a href="https://semver.org">SemVer</a>-compliant string (with no additional labels) <span class="kwd">str<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-semver-inc-patch"></a>
<span class="reference-title">semver-inc-patch</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">str<sub>2</sub></span></span></p>

<p>Increments the patch digit of the <a href="https://semver.org">SemVer</a>-compliant string (with no additional labels) <span class="kwd">str<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-semver?"></a>
<span class="reference-title">semver?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Checks whether <span class="kwd">str</span> is a <a href="https://semver.org">SemVer</a>-compliant version or not.</p></div>

<p><a id="min-operator-id-split"></a>
<span class="reference-title">split</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Splits <span class="kwd">&apos;sym<sub>1</sub></span> using separator <span class="kwd">&apos;sym<sub>2</sub></span> (a <a href="https://www.pcre.org/">Perl Compatible Regular Expression</a>) and returns the resulting strings within the quotation <span class="kwd">quot</span>.</p></div>

<p><a id="min-operator-id-strip"></a>
<span class="reference-title">strip</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns <span class="kwd">str</span>, which is set to <span class="kwd">&apos;sym</span> with leading and trailing spaces removed.</p></div>

<p><a id="min-operator-id-substr"></a>
<span class="reference-title">substr</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">str<sub>2</sub></span></span></p>

<p>Returns a substring <span class="kwd">str<sub>2</sub></span> obtained by retrieving <span class="kwd">int<sub>2</sub></span> characters starting from index <span class="kwd">int<sub>1</sub></span> within <span class="kwd">str<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-suffix"></a>
<span class="reference-title">suffix</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Appends <span class="kwd">&apos;sym<sub>2</sub></span> to <span class="kwd">&apos;sym<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-titleize"></a>
<span class="reference-title">titleize</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns a copy of <span class="kwd">&apos;sym</span> in which the first character of each word is capitalized.</p></div>

<p><a id="min-operator-id-to-bin"></a>
<span class="reference-title">to-bin</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Converts <span class="kwd">int</span> to its binary representation.</p></div>

<p><a id="min-operator-id-to-dec"></a>
<span class="reference-title">to-dec</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Converts <span class="kwd">int</span> to its decimal representation.</p></div>

<p><a id="min-operator-id-to-hex"></a>
<span class="reference-title">to-hex</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Converts <span class="kwd">int</span> to its hexadecimal representation.</p></div>

<p><a id="min-operator-id-to-oct"></a>
<span class="reference-title">to-oct</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Converts <span class="kwd">int</span> to its octal representation.</p></div>

<p><a id="min-operator-id-to-semver"></a>
<span class="reference-title">to-semver</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Given a a dictionary <span class="kwd">dict</span> containing a <strong>major</strong>, <strong>minor</strong>, and <strong>patch</strong> key/value pairs , it pushes a basic <a href="https://semver.org">SemVer</a>-compliant string (with no additional labels) <span class="kwd">str</span> on the stack.</p></div>

<p><a id="min-operator-id-uppercase"></a>
<span class="reference-title">uppercase</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">&apos;sym<sub>2</sub></span></span></p>

<p>Returns a copy of <span class="kwd">&apos;sym</span> converted to uppercase.</p></div>

<a id="<code>sys</code>-Module"></a>
<h3><code>sys</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><span class="reference-title">$</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> $<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> get-env</span></p>

<p>See <a href="#min-operator-id-get-env">get-env</a>.</p></div>

<p><span class="reference-title">$</span></p>

<div class="operator"><p><span class="kwd"> $ <strong>&rArr;</strong> get-env</span></p>

<p>See <a href="#min-operator-id-get-env">get-env</a>.</p></div>

<p><span class="reference-title">&excl;</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> &excl;<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> system</span></p>

<p>See <a href="#min-operator-id-system">system</a>.</p></div>

<p><span class="reference-title">&excl;</span></p>

<div class="operator"><p><span class="kwd"> &excl; <strong>&rArr;</strong> system</span></p>

<p>See <a href="#min-operator-id-system">system</a>.</p></div>

<p><span class="reference-title">&amp;</span> <span class="sigil"></span></p>

<div class="operator"><p><span class="kwd"> &amp;<span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span> run</span></p>

<p>See <a href="#min-operator-id-run">run</a>.</p></div>

<p><span class="reference-title">&amp;</span></p>

<div class="operator"><p><span class="kwd"> &amp; <strong>&rArr;</strong> run</span></p>

<p>See <a href="#min-operator-id-run">run</a>.</p></div>

<p><a id="min-operator-id-."></a>
<span class="reference-title">.</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the full path to the current directory.</p></div>

<p><a id="min-operator-id-.."></a>
<span class="reference-title">..</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the full path to the parent directory.</p></div>

<p><a id="min-operator-id-admin?"></a>
<span class="reference-title">admin?</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if the program is being run with administrative privileges.</p></div>

<p><a id="min-operator-id-chmod"></a>
<span class="reference-title">chmod</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <span class="kwd">int</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Sets the permissions of file or directory <span class="kwd">&apos;sym</span> to <span class="kwd">int</span>. <span class="kwd">int</span> is a three-digit representation of user, group and other permissions. See the <a href="http://permissions-calculator.org/">Unix Permissions Calculator</a> for examples and conversions.</p>

<div class="sidebar"><p>Example</p>

<p>The following program makes the file <strong>/tmp/test.txt</strong> readable, writable and executable by its owner, and readable and executable by users of the same group and all other users:</p>

<p><code>/tmp/test.txt 755 chmod</code></p></div></div>

<p><a id="min-operator-id-cd"></a>
<span class="reference-title">cd</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Change the current directory to <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-cp"></a>
<span class="reference-title">cp</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Copies the file or directory <span class="kwd">&apos;sym<sub>1</sub></span> to <span class="kwd">&apos;sym<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-cpu"></a>
<span class="reference-title">cpu</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the host CPU. It can be one of the following strings i386, alpha, powerpc, powerpc64, powerpc64el, sparc, amd64, mips, mipsel, arm, arm64.</p></div>

<p><a id="min-operator-id-env?"></a>
<span class="reference-title">env?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if environment variable <span class="kwd">&apos;sym</span> exists, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-get-env"></a>
<span class="reference-title">get-env</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns environment variable <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-hardlink"></a>
<span class="reference-title">hardlink</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Creates hardlink <span class="kwd">&apos;sym<sub>2</sub></span> for file or directory <span class="kwd">&apos;sym<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-ls"></a>
<span class="reference-title">ls</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Returns a quotation <span class="kwd">quot</span> containing all children (files and directories) of the directory <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-ls-r"></a>
<span class="reference-title">ls-r</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">quot</span></span></p>

<p>Returns a quotation <span class="kwd">quot</span> containing all children (files and directories) of the directory <span class="kwd">&apos;sym</span>, recursively.</p></div>

<p><a id="min-operator-id-mkdir"></a>
<span class="reference-title">mkdir</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Creates the specified directory <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-mv"></a>
<span class="reference-title">mv</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Moves the file or directory <span class="kwd">&apos;sym<sub>1</sub></span> to <span class="kwd">&apos;sym<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-os"></a>
<span class="reference-title">os</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the host operating system. It can be one of the following strings: windows, macosx, linux, netbsd, freebsd, openbsd, solaris, aix, standalone.</p></div>

<p><a id="min-operator-id-put-env"></a>
<span class="reference-title">put-env</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Sets environment variable <span class="kwd">&apos;sym<sub>2</sub></span> to <span class="kwd">&apos;sym<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-rm"></a>
<span class="reference-title">rm</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Deletes the specified file <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-rmdir"></a>
<span class="reference-title">rmdir</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Deletes the specified directory <span class="kwd">&apos;sym</span> and all its subdirectories recursively.</p></div>

<p><a id="min-operator-id-run"></a>
<span class="reference-title">run</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict</span></span></p>

<p>Executes the external command <span class="kwd">&apos;sym</span> in the current directory without displaying its output. Returns a dictionary containing the command output and return code (in keys <strong>output</strong> and <strong>code</strong> respectively).</p></div>

<p><a id="min-operator-id-sleep"></a>
<span class="reference-title">sleep</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Halts program execution for <span class="kwd">int</span> milliseconds.</p></div>

<p><a id="min-operator-id-symlink"></a>
<span class="reference-title">symlink</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Creates symlink <span class="kwd">&apos;sym<sub>2</sub></span> for file or directory <span class="kwd">&apos;sym<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-system"></a>
<span class="reference-title">system</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Executes the external command <span class="kwd">&apos;sym</span> in the current directory and pushes its return code on the stack.</p></div>

<p><a id="min-operator-id-unzip"></a>
<span class="reference-title">unzip</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Decompresses zip file <span class="kwd">&apos;sym<sub>1</sub></span> to directory <span class="kwd">&apos;sym<sub>2</sub></span> (created if not present).</p></div>

<p><a id="min-operator-id-which"></a>
<span class="reference-title">which</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the full path to the directory containing executable <span class="kwd">&apos;sym</span>, or an empty string if the executable is not found in <strong>$PATH</strong>.</p></div>

<p><a id="min-operator-id-zip"></a>
<span class="reference-title">zip</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Compresses files included in quotation <span class="kwd">quot</span> into zip file <span class="kwd">&apos;sym</span>.</p></div>

<a id="<code>num</code>-Module"></a>
<h3><code>num</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-+"></a>
<span class="reference-title">+</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <span class="kwd">num<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>3</sub></span></span></p>

<p>Sums <span class="kwd">num<sub>1</sub></span> and <span class="kwd">num<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id--"></a>
<span class="reference-title">-</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <span class="kwd">num<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>3</sub></span></span></p>

<p>Subtracts <span class="kwd">num<sub>2</sub></span> from <span class="kwd">num<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id--inf"></a>
<span class="reference-title">-inf</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">num</span></span></p>

<p>Returns negative infinity.</p></div>

<p><a id="min-operator-id-&amp;ast;"></a>
<span class="reference-title">&ast;</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <span class="kwd">num<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>3</sub></span></span></p>

<p>Multiplies <span class="kwd">num<sub>1</sub></span> by <span class="kwd">num<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-/"></a>
<span class="reference-title">/</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <span class="kwd">num<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>3</sub></span></span></p>

<p>Divides <span class="kwd">num<sub>1</sub></span> by <span class="kwd">num<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-avg"></a>
<span class="reference-title">avg</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">num</span></span></p>

<p>Returns the average of the items of <span class="kwd">quot</span>.</p></div>

<p><a id="min-operator-id-base"></a>
<span class="reference-title">base</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&quot;dec&quot;&#124;&quot;hex&quot;&#124;&quot;oct&quot;&#124;&quot;bin&quot;</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Sets the numeric base used to represent integers.</p></div>

<p><a id="min-operator-id-base?"></a>
<span class="reference-title">base?</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">&quot;dec&quot;&#124;&quot;hex&quot;&#124;&quot;oct&quot;&#124;&quot;bin&quot;</span></span></p>

<p>Returns the numeric base currently used to represent integers (default: <span class="kwd">&quot;dec&quot;</span>).</p></div>

<p><a id="min-operator-id-bitand"></a>
<span class="reference-title">bitand</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>3</sub></span></span></p>

<p>Computes the bitwise <em>and</em> of integer <span class="kwd">int<sub>1</sub></span> and <span class="kwd">int<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-bitclear"></a>
<span class="reference-title">bitclear</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">int<sub>2</sub></span></span></p>

<p>Sets the bytes specified via their position in <span class="kwd">int<sub>1</sub></span> through <span class="kwd">quot</span> to 0.</p></div>

<p><a id="min-operator-id-bitflip"></a>
<span class="reference-title">bitflip</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">int<sub>2</sub></span></span></p>

<p>Flips the bytes specified via their position in <span class="kwd">int<sub>1</sub></span> through <span class="kwd">quot</span>.</p></div>

<p><a id="min-operator-id-bitnot"></a>
<span class="reference-title">bitnot</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>2</sub></span></span></p>

<p>Computes the bitwise <em>complement</em> of <span class="kwd">int<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-bitor"></a>
<span class="reference-title">bitor</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>3</sub></span></span></p>

<p>Computes the bitwise <em>or</em> of integers <span class="kwd">int<sub>1</sub></span> and <span class="kwd">int<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-bitparity"></a>
<span class="reference-title">bitparity</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>2</sub></span></span></p>

<p>Calculate the bit parity in <span class="kwd">int<sub>1</sub></span>. If the number of 1-bits is odd, the parity is 1, otherwise 0.</p></div>

<p><a id="min-operator-id-bitset"></a>
<span class="reference-title">bitset</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">int<sub>2</sub></span></span></p>

<p>Sets the bytes specified via their position in <span class="kwd">int<sub>1</sub></span> through <span class="kwd">quot</span> to 0.</p></div>

<p><a id="min-operator-id-bitxor"></a>
<span class="reference-title">bitxor</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>3</sub></span></span></p>

<p>Computes the bitwise <em>xor</em> of integers <span class="kwd">int<sub>1</sub></span> and <span class="kwd">int<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-even?"></a>
<span class="reference-title">even?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">int</span> is even, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-div"></a>
<span class="reference-title">div</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>3</sub></span></span></p>

<p>Divides <span class="kwd">int<sub>1</sub></span> by <span class="kwd">int<sub>2</sub></span> (integer division).</p></div>

<p><a id="min-operator-id-inf"></a>
<span class="reference-title">inf</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">num</span></span></p>

<p>Returns infinity.</p></div>

<p><a id="min-operator-id-med"></a>
<span class="reference-title">med</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">num</span></span></p>

<p>Returns the median of the items of <span class="kwd">quot</span>.</p></div>

<p><a id="min-operator-id-mod"></a>
<span class="reference-title">mod</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>3</sub></span></span></p>

<p>Returns the integer module of <span class="kwd">int<sub>1</sub></span> divided by <span class="kwd">int<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-nan"></a>
<span class="reference-title">nan</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> nan</span></p>

<p>Returns <strong>NaN</strong> (not a number).</p></div>

<p><a id="min-operator-id-odd?"></a>
<span class="reference-title">odd?</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">bool</span></span></p>

<p>Returns <span class="kwd">true</span> if <span class="kwd">int</span> is odd, <span class="kwd">false</span> otherwise.</p></div>

<p><a id="min-operator-id-pred"></a>
<span class="reference-title">pred</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>2</sub></span></span></p>

<p>Returns the predecessor of <span class="kwd">int<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-product"></a>
<span class="reference-title">product</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the product of all items of <span class="kwd">quot</span>. <span class="kwd">quot</span> is a quotation of integers.</p></div>

<p><a id="min-operator-id-random"></a>
<span class="reference-title">random</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>2</sub></span></span></p>

<p>Returns a random number <span class="kwd">int<sub>2</sub></span> between 0 and <span class="kwd">int<sub>1</sub></span>-1.</p>

<div class="note"><p>Note</p>

<p>You must call <code>randomize</code> to initialize the random number generator, otherwise the same sequence of numbers will be returned.</p></div></div>

<p><a id="min-operator-id-randomize"></a>
<span class="reference-title">randomize</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> {{null}</span></p>

<p>Initializes the random number generator using a seed based on the current timestamp.</p></div>

<p><a id="min-operator-id-range"></a>
<span class="reference-title">range</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">quot<sub>2</sub></span></span></p>

<p>Takes a quotation <span class="kwd">quot<sub>1</sub></span> of two or three integers in the form of <em>start</em>, <em>end</em> and an optional <em>step</em> (1 if not specified) and generates the sequence and returns the resulting quotation of integers <span class="kwd">quot<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-shl"></a>
<span class="reference-title">shl</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>3</sub></span></span></p>

<p>Computes the <em>shift left</em> operation of <span class="kwd">int<sub>1</sub></span> and <span class="kwd">int<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-shr"></a>
<span class="reference-title">shr</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <span class="kwd">int<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>3</sub></span></span></p>

<p>Computes the <em>shift right</em> operation of <span class="kwd">int<sub>1</sub></span> and <span class="kwd">int<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-succ"></a>
<span class="reference-title">succ</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">int<sub>2</sub></span></span></p>

<p>Returns the successor of <span class="kwd">int<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-sum"></a>
<span class="reference-title">sum</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">quot</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the sum of all items of <span class="kwd">quot</span>. <span class="kwd">quot</span> is a quotation of integers.</p></div>

<a id="<code>time</code>-Module"></a>
<h3><code>time</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-now"></a>
<span class="reference-title">now</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">flt</span></span></p>

<p>Returns the current time as Unix timestamp with microseconds.</p></div>

<p><a id="min-operator-id-timestamp"></a>
<span class="reference-title">timestamp</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the current time as Unix timestamp.</p></div>

<p><a id="min-operator-id-timeinfo"></a>
<span class="reference-title">timeinfo</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">dict:timeinfo</span></span></p>

<p>Returns a timeinfo dictionary from timestamp <span class="kwd">int</span>.</p></div>

<p><a id="min-operator-id-to-timestamp"></a>
<span class="reference-title">to-timestamp</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:timeinfo</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Converts the timeinfo dictionary <span class="kwd">dict:timeinfo</span> to the corresponding Unix timestamp.</p></div>

<p><a id="min-operator-id-datetime"></a>
<span class="reference-title">datetime</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns an ISO 8601 string representing the combined date and time in UTC of timestamp <span class="kwd">int</span>.</p></div>

<p><a id="min-operator-id-tformat"></a>
<span class="reference-title">tformat</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">int</span> <span class="kwd">str</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Formats timestamp <span class="kwd">int</span> using string <span class="kwd">str</span>.</p>

<div class="tip"><p>Tip</p>

<p>For information on special characters in the format string, see the <a href="https://nim-lang.org/docs/times.html#format,TimeInfo,string">format</a> nim method.</p></div></div>

<a id="<code>crypto</code>-Module"></a>
<h3><code>crypto</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-aes"></a>
<span class="reference-title">aes</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym<sub>1</sub></span> <span class="kwd">&apos;sym<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Encrypts or decrypts <span class="kwd">&apos;sym<sub>1</sub></span> using the Advanced Encryption Standard (AES) in CTR mode, using <span class="kwd">&apos;sym<sub>2</sub></span> as password.</p></div>

<p><a id="min-operator-id-decode"></a>
<span class="reference-title">decode</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Decodes the Base64-encoded string <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-encode"></a>
<span class="reference-title">encode</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Base64-encodes <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-md4"></a>
<span class="reference-title">md4</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the MD4 hash of <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-md5"></a>
<span class="reference-title">md5</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the MD5 hash of <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-sha1"></a>
<span class="reference-title">sha1</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the SHA1 hash of <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-sha224"></a>
<span class="reference-title">sha224</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the SHA224 hash of <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-sha256"></a>
<span class="reference-title">sha256</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the SHA256 hash of <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-sha384"></a>
<span class="reference-title">sha384</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the SHA384 hash of <span class="kwd">&apos;sym</span>.</p></div>

<p><a id="min-operator-id-sha512"></a>
<span class="reference-title">sha512</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns the SHA512 hash of <span class="kwd">&apos;sym</span>.</p></div>

<a id="<code>math</code>-Module"></a>
<h3><code>math</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-abs"></a>
<span class="reference-title">abs</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates tbe absolute value of <span class="kwd">num<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-acos"></a>
<span class="reference-title">acos</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the arc cosine of <span class="kwd">num<sub>1</sub></span> (in radians).</p></div>

<p><a id="min-operator-id-asin"></a>
<span class="reference-title">asin</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the arc sine of <span class="kwd">num<sub>1</sub></span> (in radians).</p></div>

<p><a id="min-operator-id-atan"></a>
<span class="reference-title">atan</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the arc tangent of <span class="kwd">num<sub>1</sub></span> (in radians).</p></div>

<p><a id="min-operator-id-ceil"></a>
<span class="reference-title">ceil</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the smallest integer <span class="kwd">int</span> that is not smaller than <span class="kwd">num</span>.</p></div>

<p><a id="min-operator-id-cos"></a>
<span class="reference-title">cos</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the cosine of <span class="kwd">num<sub>1</sub></span> (in radians).</p></div>

<p><a id="min-operator-id-cosh"></a>
<span class="reference-title">cosh</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the hyperbolic cosine of <span class="kwd">num<sub>1</sub></span> (in radians).</p></div>

<p><a id="min-operator-id-d2r"></a>
<span class="reference-title">d2r</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Converts <span class="kwd">num<sub>1</sub></span> from degrees to radians.</p></div>

<p><a id="min-operator-id-e"></a>
<span class="reference-title">e</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">num</span></span></p>

<p>Returns the value of the <em>e</em> constant (Euler&rsquo;s number).</p></div>

<p><a id="min-operator-id-floor"></a>
<span class="reference-title">floor</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num</span> <strong>&rArr;</strong> <span class="kwd">int</span></span></p>

<p>Returns the largest integer <span class="kwd">int</span> that is not greater than <span class="kwd">num</span>.</p></div>

<p><a id="min-operator-id-ln"></a>
<span class="reference-title">ln</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the natural logarithm of <span class="kwd">num<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-log10"></a>
<span class="reference-title">log10</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the common logarithm of <span class="kwd">num<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-log2"></a>
<span class="reference-title">log2</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the binary logarithm of <span class="kwd">num<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-pi"></a>
<span class="reference-title">pi</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">num</span></span></p>

<p>Returns the value of the &pi; constant.</p></div>

<p><a id="min-operator-id-pow"></a>
<span class="reference-title">pow</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <span class="kwd">num<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>3</sub></span></span></p>

<p>Computes <span class="kwd">num<sub>1</sub></span> to power raised of <span class="kwd">num<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-r2d"></a>
<span class="reference-title">r2d</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Converts <span class="kwd">num<sub>1</sub></span> from radians to degrees.</p></div>

<p><a id="min-operator-id-round"></a>
<span class="reference-title">round</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Rounds <span class="kwd">num<sub>1</sub></span> to the <span class="kwd">int</span><sup>th</sup> decimal place.</p></div>

<p><a id="min-operator-id-sin"></a>
<span class="reference-title">sin</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the sine of <span class="kwd">num<sub>1</sub></span> (in radians).</p></div>

<p><a id="min-operator-id-sinh"></a>
<span class="reference-title">sinh</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the hyperbolic sine of <span class="kwd">num<sub>1</sub></span> (in radians).</p></div>

<p><a id="min-operator-id-sqrt"></a>
<span class="reference-title">sqrt</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Returns square root of <span class="kwd">num<sub>1</sub></span>.</p></div>

<p><a id="min-operator-id-tan"></a>
<span class="reference-title">tan</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the tangent of <span class="kwd">num<sub>1</sub></span> (in radians).</p></div>

<p><a id="min-operator-id-tanh"></a>
<span class="reference-title">tanh</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Calculates the hyperbolic tangent of <span class="kwd">num<sub>1</sub></span> (in radians).</p></div>

<p><a id="min-operator-id-tau"></a>
<span class="reference-title">tau</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> <span class="kwd">num</span></span></p>

<p>Returns the value of the &tau; constant (2&pi;).</p></div>

<p><a id="min-operator-id-trunc"></a>
<span class="reference-title">trunc</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">num<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">num<sub>2</sub></span></span></p>

<p>Truncates <span class="kwd">num</span> to the decimal point.</p></div>

<a id="<code>net</code>-Module"></a>
<h3><code>net</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-accept"></a>
<span class="reference-title">accept</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:socket<sub>1</sub></span> <span class="kwd">dict:socket<sub>2</sub></span> <strong>&rArr;</strong> <span class="kwd">dict:socket<sub>1</sub></span></span></p>

<p>Makes <span class="kwd">dict:socket<sub>2</sub></span> (server) accept a connection from <span class="kwd">dict:socket<sub>1</sub></span> (client). Returns the client socket <span class="kwd">dict:socket<sub>1</sub></span> from which it will be possible to receive data from.</p></div>

<p><a id="min-operator-id-close"></a>
<span class="reference-title">close</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:socket</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Closes a previously-opened socket.</p></div>

<p><a id="min-operator-id-connect"></a>
<span class="reference-title">connect</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:socket</span> <span class="kwd">str</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">dict:socket</span></span></p>

<p>Connects socket <span class="kwd">dict:socket</span> to address <span class="kwd">str</span> and port <span class="kwd">int</span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following code shows how to send a message to a server running on localhost:7777. The message is passed as the first argument to the program.</p>

<pre><code>{} socket "localhost" 7777 connect :cli

args 1 get :msg

"Sending message \"$1\" to localhost:7777..." (msg) =&gt; % puts!

cli "$1\n" (msg) =&gt; % send

"Done." puts!

cli close
</code></pre></div></div>

<p><a id="min-operator-id-listen"></a>
<span class="reference-title">listen</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <span class="kwd">dict:socket<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">dict:socket<sub>2</sub></span></span></p>

<p>Makes socket <span class="kwd">dict:socket<sub>1</sub></span> listen to the specified address and port. <span class="kwd">dict</span> can be empty or contain any of the following properties, used to specify the address and port to listen to respectively.</p>

<dl>
<dt>address</dt>
<dd>The address to listen to (default: <strong>0.0.0.0</strong>).</dd>
<dt>port</dt>
<dd>The port to listen to (default: <strong>80</strong>).</dd>
</dl>

<div class="sidebar"><p>Example</p>

<p>The following code shows how to create a simple server that listens on port 7777, prints data received from clients, and exits when it receives the string <code>exit</code>:</p>

<pre><code>{} socket {"127.0.0.1" :address 7777 :port} listen :srv

"Server listening on localhost:7777" puts!

{} socket :cli
"" :line
(line "exit" !=)
(
  srv cli accept #cli
  cli recv-line @line
  "Received: $1" (line) =&gt; % puts!
) while

"Exiting..." puts!

srv close
</code></pre></div></div>

<p><a id="min-operator-id-recv"></a>
<span class="reference-title">recv</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:socket</span> <span class="kwd">int</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Waits to receive <span class="kwd">int</span> characters from <span class="kwd">dict:socket</span> and returns the resulting data <span class="kwd">str</span>.</p></div>

<p><a id="min-operator-id-recv-line"></a>
<span class="reference-title">recv-line</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:socket</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Waits to receive a line of data from <span class="kwd">dict:socket</span> and returns the resulting data <span class="kwd">str</span>. <code>""</code> is returned if <span class="kwd">dict:socket</span> is disconnected.</p>

<div class="sidebar"><p>Example</p>

<p>The following code shows how to make a simple GET request to <a href="http://httpbin.org/uuid">http://httpbin.org/uuid</a> to receive a random UUID and display its response:</p>

<pre><code>{} socket "httpbin.org" 80 connect :cli

cli "GET /uuid HTTP/1.1\r\nHost: httpbin.org\r\n\r\n" send

cli recv-line puts :line
(line "}" match not) 
(
  cli recv-line puts @line
) while
</code></pre></div></div>

<p><a id="min-operator-id-send"></a>
<span class="reference-title">send</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:socket</span> <span class="kwd">str</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Sends <span class="kwd">str</span> to the connected socket <span class="kwd">dict:socket</span>.</p></div>

<p><a id="min-operator-id-socket"></a>
<span class="reference-title">socket</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <strong>&rArr;</strong> <span class="kwd">dict:socket</span></span></p>

<p>Opens a new socket.</p>

<p><span class="kwd">dict</span> can be empty or contain any of the following properties, used to specify the domain, type and protocol of the socket respectively.</p>

<dl>
<dt>domain</dt>
<dd><p>The socket domain. It can be set to one of the following values:</p>

<ul>
<li><strong>ipv4</strong> (default): Internet Protocol version 4.</li>
<li><strong>ipv6</strong>: Internet Protocol version 6.</li>
<li><strong>unix</strong>: local Unix file (not supported on Windows systems).</li>
</ul>
</dd>
<dt>type</dt>
<dd><p>The socket type. It can be set to one of the following values:</p>

<ul>
<li><strong>stream</strong> (default): Reliable stream-oriented service or Stream Socket.</li>
<li><strong>dgram</strong>: Datagram service or Datagram Socket.</li>
<li><strong>raw</strong>: Raw protocols atop the network layer.</li>
<li><strong>seqpacket</strong>: Reliable sequenced packet service.</li>
</ul>
</dd>
<dt>protocol</dt>
<dd><p>The socket protocol. It can be set to one of the following values:</p>

<ul>
<li><strong>tcp</strong> (default): Transmission Control Protocol.</li>
<li><strong>udp</strong>: User Datagram Protocol.</li>
<li><strong>ipv4</strong>: Internet Protocol version 4 (not supported on Windows systems).</li>
<li><strong>ipv6</strong>: Internet Protocol version 6 (not supported on Windows systems).</li>
<li><strong>raw</strong>: Raw IP Packets protocol (not supported on Windows systems).</li>
<li><strong>icmp</strong>: Internet Control Message Protocol (not supported on Windows systems).</li>
</ul>
</dd>
</dl></div>

<a id="<code>http</code>-Module"></a>
<h3><code>http</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-download"></a>
<span class="reference-title">download</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <span class="kwd">str<sub>2</sub></span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Downloads the contents of URL <span class="kwd">str<sub>1</sub></span> to the local file <span class="kwd">str<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-get-content"></a>
<span class="reference-title">get-content</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">str<sub>1</sub></span> <strong>&rArr;</strong> <span class="kwd">str<sub>2</sub></span></span></p>

<p>Retrieves the contents of URL <span class="kwd">str<sub>1</sub></span> as <span class="kwd">str<sub>2</sub></span>.</p></div>

<p><a id="min-operator-id-request"></a>
<span class="reference-title">request</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <strong>&rArr;</strong> <span class="kwd">dict:http-response</span></span></p>

<p>Performs an HTTP request. Note that <span class="kwd">dict</span> is can be a standard (untyped) dictionary but its fields will be validated like if it was a <span class="kwd">dict:http-request</span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following code constructs <span class="kwd">dict</span> and passes it to the <strong>request</strong> operator to perform an HTTP GET request to <a href="http://httpbin.org/ip">http://httpbin.org/ip</a>:</p>

<pre><code>{}
  "GET" %method
  "http://httpbin.org/ip" %url
request
</code></pre></div></div>

<p><a id="min-operator-id-start-server"></a>
<span class="reference-title">start-server</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict</span> <strong>&rArr;</strong> &#x2205;</span></p>

<p>Starts an HTTP server based on the configuration provided in <span class="kwd">dict</span>.</p>

<p><span class="kwd">dict</span> is a dictionary containing the following keys:</p>

<dl>
<dt>address</dt>
<dd>The address to bind the server to (default: <strong>127.0.0.1</strong>).</dd>
<dt>port</dt>
<dd>The port to bind the server to.</dd>
<dt>handler</dt>
<dd>A quotation with the following signature, used to handle all incoming requests: <span class="kwd"><span class="kwd">dict:http-request</span> &rArr; <span class="kwd">dict:http-response</span></span></dd>
</dl>

<div class="sidebar"><p>Example</p>

<p>The following program starts a very simple HTTP server that can display the current timestamp or date and time in ISO 8601 format:</p>

<pre><code>; Define the request handler
(
  ; Assume there is a request on the stack, take it off and give it the name req
  :req
  ; Let's see what we got (print req to standard out)
  "THE REQUEST:" puts! req puts!
  ; The request is a dictionary, we retrieve the value for the key url, and give it the name url
  req /url :url
  "THE URL is '$1'." url quote % puts!
  ; Constuct response body
  (
    (("/datetime" url ==) (timestamp datetime))
    (("/timestamp" url ==) (timestamp string))
    (("/shutdown" url ==) ("Stopping server..." puts! stop-server))
    (("/" url ==) (
      ; this is a bit short, but works with Chrome, IE, Edge, Safari
      "&lt;a href='/datetime'&gt;datetime&lt;/a&gt;, &lt;a href='/timestamp'&gt;timestamp&lt;/a&gt;, &lt;a href='/shutdown'&gt;stop&lt;/a&gt;"
    ))
    ((true) ("Invalid Request: $1" url quote %))
  ) case
  :body
  ; Prepare the response
  {} body %body
  dup puts!
)
; The request handler is ready, give it the name handler
:handler

; Create the parameter dictionary for the server
{}
handler %handler
5555 %port

; Start server
"Server started on port 5555." puts!
"Press Ctrl+C to stop." puts!
start-server
</code></pre></div></div>

<p><a id="min-operator-id-stop-server"></a>
<span class="reference-title">stop-server</span></p>

<div class="operator"><p><span class="kwd"> &#x2205; <strong>&rArr;</strong> &#x2205;</span></p>

<p>Stops the currently-running HTTP server. This operator should be used within an HTTP server handler quotation.</p></div>

<a id="<code>xml</code>-Module"></a>
<h3><code>xml</code> Module<a href="#document-top" title="Go to top"></a></h3>

<p><a id="min-operator-id-from-xml"></a>
<span class="reference-title">from-xml</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">xml-node</span></span></p>

<p>Returns an <span class="kwd">xml-node</span> representing an XML string representing an element or fragment.</p>

<div class="sidebar"><p>Example</p>

<p>The following program:</p>

<pre><code>"&lt;a href='https://min-lang.org'&gt;min web site&lt;/a&gt;" from-xml
</code></pre>

<p>returns the following:</p>

<pre><code>{
  {"https://min-lang.org" :href} :attributes
 ({"min web site" :text ;xml-text}) :children
 "a" :tag
 ;xml-element
}
</code></pre></div></div>

<p><a id="min-operator-id-to-xml"></a>
<span class="reference-title">to-xml</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">xml-node</span> <strong>&rArr;</strong> <span class="kwd">str</span></span></p>

<p>Returns a <span class="kwd">str</span> representing an XML node.</p></div>

<p><a id="min-operator-id-xcdata"></a>
<span class="reference-title">xcdata</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:xml-cdata</span></span></p>

<p>Returns a <span class="kwd">dict:xml-cdata</span> representing an XML CDATA section.</p></div>

<p><a id="min-operator-id-xcomment"></a>
<span class="reference-title">xcomment</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:xml-comment</span></span></p>

<p>Returns a <span class="kwd">dict:xml-comment</span> representing an XML comment.</p></div>

<p><a id="min-operator-id-xelement"></a>
<span class="reference-title">xelement</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:xml-element</span></span></p>

<p>Returns a <span class="kwd">dict:xml-element</span> representing an XML element (it will be an empty element with no attributes or children).</p></div>

<p><a id="min-operator-id-xentity"></a>
<span class="reference-title">xentity</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:xml-entity</span></span></p>

<p>Returns a <span class="kwd">dict:xml-entity</span> representing an XML entity.</p></div>

<p><a id="min-operator-id-xquery"></a>
<span class="reference-title">xquery</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:xml-element</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:xml-element</span></span></p>

<p>Returns an <span class="kwd">dict:xml-element</span> representing the first element matching CSS the selector <span class="kwd">&apos;sym</span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program:</p>

<pre><code>"&lt;ul&gt;
   &lt;li class='test'&gt;first&lt;/li&gt;
   &lt;li class='other'&gt;second&lt;/li&gt;
   &lt;li class='test'&gt;third&lt;/li&gt;
&lt;/ul&gt;" 
from-xml ".test" xquery
</code></pre>

<p>Returns the following:</p>

<pre><code>{
  {"test" :class} :attributes 
  ({"first" :text ;xml-text}) :children 
  "li" :tag 
  ;xml-element
}
</code></pre></div></div>

<p><a id="min-operator-id-xqueryall"></a>
<span class="reference-title">xqueryall</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">dict:xml-element</span> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:xml-element</span></span></p>

<p>Returns a list of <span class="kwd">dict:xml-element</span> dictionaries representing all the elements matching CSS the selector <span class="kwd">&apos;sym</span>.</p>

<div class="sidebar"><p>Example</p>

<p>The following program:</p>

<pre><code>"&lt;ul&gt;
   &lt;li class='test'&gt;first&lt;/li&gt;
   &lt;li class='other'&gt;second&lt;/li&gt;
   &lt;li class='test'&gt;third&lt;/li&gt;
&lt;/ul&gt;" 
from-xml ".test" xqueryall
</code></pre>

<p>Returns the following:</p>

<pre><code>({
  {"test" :class} :attributes 
  ({"first" :text ;xml-text}) :children 
  "li" :tag 
  ;xml-element
}
{
  {"test" :class} :attributes 
  ({"third" :text ;xml-text}) :children 
  "li" :tag 
  ;xml-element
})
</code></pre></div></div>

<p><a id="min-operator-id-xtext"></a>
<span class="reference-title">xtext</span></p>

<div class="operator"><p><span class="kwd"> <span class="kwd">&apos;sym</span> <strong>&rArr;</strong> <span class="kwd">dict:xml-text</span></span></p>

<p>Returns a <span class="kwd">dict:xml-text</span> representing an XML text node.</p></div>
    </div>
    <div id="footer">
      <p><span class="copy"></span> Fabio Cevasco &ndash; October 8, 2023</p>
      <p><span>Powered by</span> <a href="https://h3rald.com/hastyscribe" class="hastyscribe-logo">  <img src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20width='350.755'%20height='102.312'%3E%3Cg%20font-family='Mr%20Bedfort'%20font-size='72'%20font-weight='400'%20letter-spacing='0'%20style='line-height:125%25;-inkscape-font-specification:Mr%20Bedfort'%20word-spacing='0'%3E%3Cpath%20d='m17.352%2044.784-1.296-5.616c-3.552-1.2-7.2-2.52-10.944-3.96-.048%200-.072.024-.072.072.048%201.008%204.152%204.176%2012.312%209.504m6.12-3.24c.96%204.224%201.56%206.96%201.8%208.208%2011.424%206.96%2018.744%2010.464%2021.96%2010.512l-3.888-13.896c-6.432-1.248-13.056-2.856-19.872-4.824M18%204.752l-.288%204.608c0%204.464%201.512%2013.32%204.536%2026.568%206.24%201.92%2012.792%203.576%2019.656%204.968-1.968-7.44-3.408-13.848-4.32-19.224-.912-5.424-1.368-11.208-1.368-17.352.096-.528%201.032-1.368%202.808-2.52C40.848.6%2042.144%200%2042.912%200c.384%200%20.576.264.576.792l-.36%205.04c0%207.776%202.016%2019.872%206.048%2036.288%205.664.864%2010.944%201.368%2015.84%201.512.336%200%20.504.168.504.504%200%20.288-1.056%201.008-3.168%202.16-2.112%201.152-3.36%201.728-3.744%201.728-2.256%200-4.944-.192-8.064-.576l2.808%2010.08c0%20.816-1.704%202.208-5.112%204.176-3.84%200-11.376-3.336-22.608-10.008.48%202.688.768%205.04.864%207.056-.096.096-1.056.576-2.88%201.44-1.824.864-2.856%201.296-3.096%201.296-.624%200-.936-.456-.936-1.368-.432-4.56-1.056-9-1.872-13.32-4.896-3.168-9.072-6.048-12.528-8.64C1.728%2035.52%200%2033.912%200%2033.336c0-.768%201.584-2.088%204.752-3.96l.216-.144c3.264%201.536%206.48%202.88%209.648%204.032-2.736-10.416-4.104-17.496-4.104-21.24%200-1.68.192-3%20.576-3.96.096-.144%201.152-.816%203.168-2.016%202.016-1.2%203.168-1.8%203.456-1.8.192%200%20.288.168.288.504M78.01%2040.104c.144-.288%201.44-.432%203.888-.432%202.496%200%203.744.36%203.744%201.08%200%20.144-.144.432-.432.864-1.68%202.304-2.52%204.704-2.52%207.2%200%202.496.576%204.56%201.728%206.192%201.2%201.584%202.712%202.376%204.536%202.376%202.976%200%206-2.112%209.072-6.336l.504.864c-3.744%205.952-7.872%208.928-12.384%208.928-3.408%200-6.024-1.752-7.848-5.256-.768%201.152-2.016%202.232-3.744%203.24-1.728%201.008-3.36%201.512-4.896%201.512-4.176%200-6.264-1.752-6.264-5.256%200-2.736%201.152-5.592%203.456-8.568%202.352-3.024%204.656-4.536%206.912-4.536.192%200%20.288.072.288.216%200%20.144-.096.312-.288.504-1.008.528-1.872%201.632-2.592%203.312a13.12%2013.12%200%200%200-1.008%205.04c0%203.504%201.344%205.256%204.032%205.256.768%200%201.488-.192%202.16-.576.72-.432%201.152-1.032%201.296-1.8a14.973%2014.973%200%200%201-.936-5.256c0-1.824.072-3.36.216-4.608.384-2.64.744-3.96%201.08-3.96'/%3E%3Cpath%20d='m119.772%2051.048.504.864c-2.016%203.216-4.44%205.664-7.272%207.344-2.832%201.728-5.52%202.592-8.064%202.592-5.136%200-8.544-2.208-10.224-6.624%200-.24.552-1.032%201.656-2.376%201.104-1.344%201.824-2.016%202.16-2.016.384%200%20.6.12.648.36.288%201.536%201.08%203.168%202.376%204.896%201.344%201.728%202.568%202.592%203.672%202.592%201.728%200%202.616-.48%202.664-1.44%200-1.488-1.752-3.744-5.256-6.768-1.296-1.152-2.496-2.616-3.6-4.392-1.056-1.824-1.584-3.696-1.584-5.616%200-.384.072-.648.216-.792%202.112-1.92%203.504-2.88%204.176-2.88.528%200%20.792.408.792%201.224.048%201.776.792%203.624%202.232%205.544%201.488%201.872%202.928%203.672%204.32%205.4%201.44%201.728%202.16%203.456%202.16%205.184%200%201.68-.84%203.192-2.52%204.536%203.936-.096%207.584-2.64%2010.944-7.632'/%3E%3Cpath%20d='M122.633%2024.264c.768%2022.56%204.248%2033.84%2010.44%2033.84%202.64%200%205.808-2.352%209.504-7.056l.504.864c-4.512%206.72-8.832%2010.08-12.96%2010.08-4.08%200-7.392-3.12-9.936-9.36-2.544-6.288-3.888-14.64-4.032-25.056%200%200-.347-5.071%200-4.827.096-3.648.264-5.229.504-8.493%200-.432.216-.72.648-.864%202.88-1.152%204.488-1.728%204.824-1.728.384%200%20.576.216.576.648a165.13%20165.13%200%200%200-.144%206.552'/%3E%3Cpath%20d='M157.87%2082.728c0%203.984%201.176%207.728%203.528%2011.232%202.352%203.504%204.536%205.256%206.552%205.256%201.728%200%202.592-1.536%202.592-4.608%200-2.256-.84-5.712-2.52-10.368a1998.05%201998.05%200%200%200-2.808-7.704%20452.798%20452.798%200%200%201-2.952-8.136c-2.928%204.464-4.392%209.24-4.392%2014.328m15.84%205.544c0%204.704-.792%208.208-2.376%2010.512-1.584%202.352-3.6%203.528-6.048%203.528-3.12%200-6-1.68-8.64-5.04-2.592-3.312-3.888-7.44-3.888-12.384.336-3.408%201.248-6.552%202.736-9.432%201.536-2.88%203.576-5.856%206.12-8.928-1.632-4.464-2.76-7.992-3.384-10.584-2.064%202.64-4.44%203.96-7.128%203.96-2.688%200-5.04-1.368-7.056-4.104-2.016-2.736-3.024-6.672-3.024-11.808%200-.528.384-.888%201.152-1.08%202.304-.48%203.624-.72%203.96-.72.576%200%20.864.288.864.864%200%204.368.984%207.8%202.952%2010.296%201.248%201.536%202.808%202.304%204.68%202.304%201.008%200%202.064-.456%203.168-1.368-.72-3.216-1.08-5.904-1.08-8.064%200-2.208.504-3.816%201.512-4.824%202.064-1.2%203.216-1.8%203.456-1.8.48%200%20.72.36.72%201.08%200%205.232.96%2010.752%202.88%2016.56l1.224%203.816c3.6-3.888%206.336-7.224%208.208-10.008l.504.864c-1.152%201.824-2.208%203.312-3.168%204.464a161.359%20161.359%200%200%201-3.096%203.6%20676.433%20676.433%200%200%201-2.016%202.376c3.504%2010.032%205.424%2015.912%205.76%2017.64.672%203.408%201.008%206.168%201.008%208.28'/%3E%3Cpath%20d='M178.334%2012.888c0%204.608%202.736%208.904%208.208%2012.888%202.544-6.528%203.816-11.712%203.816-15.552%200-1.68-.552-3.24-1.656-4.68-1.104-1.44-2.352-2.16-3.744-2.16-1.344%200-2.568.72-3.672%202.16-1.056%201.44-1.824%202.88-2.304%204.32-.432%201.392-.648%202.4-.648%203.024m-9.36%2046.944c-.336.336-.624.504-.864.504-.384%200-.576-.192-.576-.576%200-.384.096-.696.288-.936%202.16-2.4%204.704-6.024%207.632-10.872a162.099%20162.099%200%200%200%208.064-15.12c-6.144-4.272-9.216-8.64-9.216-13.104%200-2.976.696-6%202.088-9.072%201.44-3.072%203.336-5.616%205.688-7.632%202.4-2.016%204.68-3.024%206.84-3.024%202.208%200%203.696.528%204.464%201.584.816%201.008%201.224%202.496%201.224%204.464%200%203.696-2.232%2010.608-6.696%2020.736%201.584%201.056%203.696%202.352%206.336%203.888a295.464%20295.464%200%200%201%206.84%203.888%2056.857%2056.857%200%200%201%205.76%203.816c3.936%203.024%205.904%206.312%205.904%209.864%200%203.504-1.824%206.792-5.472%209.864-3.648%203.024-7.344%204.536-11.088%204.536-5.904%200-11.16-3.072-15.768-9.216-.528-.72-.792-1.32-.792-1.8%200-.528.6-1.272%201.8-2.232%201.2-1.008%202.136-1.512%202.808-1.512.144%200%20.264.072.36.216%201.296%202.256%203.624%204.656%206.984%207.2%203.36%202.544%206.648%203.816%209.864%203.816%203.984-.288%205.976-2.256%205.976-5.904%200-3.072-1.752-5.952-5.256-8.64-2.592-1.968-5.784-4.032-9.576-6.192-3.792-2.208-6.408-3.792-7.848-4.752-5.808%2012.192-11.064%2020.928-15.768%2026.208M230.382%2041.688c0-1.44-.912-2.16-2.736-2.16-1.824%200-3.336.816-4.536%202.448-1.2%201.632-1.8%203.72-1.8%206.264%200%202.496.96%204.776%202.88%206.84%201.968%202.016%204.896%203.024%208.784%203.024%202.448%200%204.824-.576%207.128-1.728%202.352-1.2%204.344-2.976%205.976-5.328l.504.864c-1.728%203.12-4.392%205.544-7.992%207.272-3.552%201.728-7.152%202.592-10.8%202.592-3.6%200-6.552-.768-8.856-2.304-2.256-1.488-3.384-3.648-3.384-6.48%200-3.6%201.416-7.008%204.248-10.224%202.88-3.216%206.456-4.824%2010.728-4.824%201.488%200%202.592.384%203.312%201.152.72.72%201.08%201.704%201.08%202.952%200%201.2-.432%202.4-1.296%203.6-.864%201.152-1.848%201.728-2.952%201.728-.576%200-1.176-.216-1.8-.648-.576-.48-.864-.864-.864-1.152%200-.336.12-.6.36-.792.24-.24.528-.456.864-.648.768-.384%201.152-1.2%201.152-2.448'/%3E%3Cpath%20d='m251.359%2047.088-1.368-.072c-.48%200-.816.216-1.008.648-.576%201.44-1.488%203.072-2.736%204.896l-.576-.792c.96-1.296%201.704-2.928%202.232-4.896%200-.384-.168-.648-.504-.792-2.16-.72-3.24-2.616-3.24-5.688%200-.672.576-1.296%201.728-1.872%201.152-.624%202.112-.936%202.88-.936.768%200%201.152.336%201.152%201.008%200%203.6%201.68%205.4%205.04%205.4.816%200%201.464-.072%201.944-.216.528-.192.816-.288.864-.288.48%200%20.72.36.72%201.08%200%20.672-.192%201.152-.576%201.44-.336.24-.72.792-1.152%201.656-.432.816-.648%201.776-.648%202.88%200%202.16.624%203.864%201.872%205.112%201.296%201.2%202.88%201.8%204.752%201.8%201.92%200%203.816-.552%205.688-1.656%201.872-1.104%203.504-2.688%204.896-4.752l.504.864c-1.68%202.928-4.008%205.28-6.984%207.056-2.976%201.776-5.64%202.664-7.992%202.664-4.8%200-7.2-2.184-7.2-6.552%200-.816.288-1.92.864-3.312.576-1.392%201.152-2.568%201.728-3.528l.864-1.44c0-.192-.072-.288-.216-.288-1.536.384-2.712.576-3.528.576'/%3E%3Cpath%20d='M273.24%2042.84c-.24%202.016-.36%203.672-.36%204.968%200%204.56.864%208.112%202.592%2010.656%201.776%202.496%203.912%203.744%206.408%203.744%202.544%200%205.064-.888%207.56-2.664%202.496-1.728%204.824-4.272%206.984-7.632l-.504-.864c-3.744%205.136-7.2%207.704-10.368%207.704-2.016%200-3.648-1.08-4.896-3.24-1.248-2.16-1.872-5.088-1.872-8.784%200-1.92.168-3.864.504-5.832%200-.432-.192-.648-.576-.648-.336%200-1.944.576-4.824%201.728-.432.144-.648.432-.648.864m5.976-15.48c.768.816%201.152%201.8%201.152%202.952s-.384%202.136-1.152%202.952c-.72.816-1.608%201.224-2.664%201.224-1.008%200-1.872-.408-2.592-1.224-.72-.816-1.08-1.8-1.08-2.952s.36-2.136%201.08-2.952c.72-.816%201.584-1.224%202.592-1.224%201.056%200%201.944.408%202.664%201.224'/%3E%3Cpath%20d='M310.14%2045.36c-.576%200-.864.576-.864%201.728%200%201.152.456%202.52%201.368%204.104.96%201.536%202.16%202.76%203.6%203.672.048-.24.072-.6.072-1.08%200-2.112-.408-4.032-1.224-5.76-.816-1.776-1.8-2.664-2.952-2.664m-13.464-24.912c0%209.6%201.104%2017.76%203.312%2024.48%202.16-5.904%203.24-13.8%203.24-23.688%200-4.272-.264-7.8-.792-10.584s-1.248-4.176-2.16-4.176c-1.2%200-2.112%201.296-2.736%203.888-.576%202.544-.864%205.904-.864%2010.08m11.448-6.84c0%204.704-.816%2010.32-2.448%2016.848-1.584%206.528-3.312%2011.832-5.184%2015.912%201.488%204.224%203.192%207.488%205.112%209.792%201.92%202.256%203.672%203.384%205.256%203.384s2.64-.984%203.168-2.952c-2.16-.96-4.008-2.496-5.544-4.608-1.488-2.112-2.232-4.224-2.232-6.336%200-1.104.264-1.992.792-2.664.528-.672%201.296-1.008%202.304-1.008%202.496%200%204.416.96%205.76%202.88%201.392%201.872%202.088%204.128%202.088%206.768%200%201.488-.24%202.904-.72%204.248.48.144%201.032.216%201.656.216%202.64%200%204.992-1.68%207.056-5.04l.576.72c-2.16%203.696-4.872%205.544-8.136%205.544-.384%200-.96-.048-1.728-.144-1.68%203.12-4.224%204.68-7.632%204.68-3.936%200-7.536-2.352-10.8-7.056-1.584-2.352-2.856-5.568-3.816-9.648-1.008-4.128-1.512-8.712-1.512-13.752%200-5.04.432-9.6%201.296-13.68.816-4.08%202.064-7.44%203.744-10.08%201.68-2.64%203.6-3.96%205.76-3.96%203.456%200%205.184%203.312%205.184%209.936'/%3E%3Cpath%20d='m332.694%2037.656.072-.936c0-.576-.648-.864-1.944-.864a5.858%205.858%200%200%200-3.528%201.152c-1.008.768-1.512%201.8-1.512%203.096%200%202.304%201.656%203.456%204.968%203.456.528%200%201.056-.072%201.584-.216a5.437%205.437%200%200%201%201.728-.288c.576%200%20.864.192.864.576%200%20.048-.192.168-.576.36-.384.144-.864.384-1.44.72-.528.336-1.08.768-1.656%201.296-1.344%201.248-2.016%202.952-2.016%205.112s.648%203.816%201.944%204.968c1.296%201.104%202.976%201.656%205.04%201.656s4.176-.6%206.336-1.8a14.695%2014.695%200%200%200%205.256-4.896l.504.864c-1.824%203.168-4.368%205.664-7.632%207.488-3.216%201.872-6.168%202.808-8.856%202.808-2.64%200-4.68-.552-6.12-1.656-1.392-1.104-2.088-2.52-2.088-4.248%200-1.776.432-3.408%201.296-4.896.864-1.488%201.608-2.544%202.232-3.168.672-.672%201.152-1.128%201.44-1.368.336-.288.504-.48.504-.576%200-.144-.024-.216-.072-.216-1.536.576-3.024.864-4.464.864-2.544%200-3.816-1.032-3.816-3.096%200-2.784%201.584-5.184%204.752-7.2%203.168-2.016%205.928-3.024%208.28-3.024%202.4%200%203.6.576%203.6%201.728%200%20.72-.384%201.488-1.152%202.304-.768.816-1.464%201.224-2.088%201.224-.96%200-1.44-.408-1.44-1.224'/%3E%3C/g%3E%3Ctext%20xml:space='preserve'%20x='280.368'%20y='13.976'%20font-family='Mr%20Bedfort'%20font-size='40'%20font-weight='400'%20letter-spacing='0'%20style='line-height:125%25;-inkscape-font-specification:Mr%20Bedfort'%20transform='translate(-177.39%20-82.362)'%20word-spacing='0'/%3E%3Cpath%20fill-rule='evenodd'%20d='M99.36%2029.25c-.061-.106.474-.57%201.596-1.31%201.123-.74%202.835-1.75%205.15-2.876%202.313-1.127%205.233-2.365%208.729-3.583%203.496-1.218%207.573-2.41%2012.103-3.567%205.291-1.357%2011.259-2.645%2017.812-3.778%206.554-1.133%2013.693-2.108%2021.297-2.923%2013.686-1.47%2028.926-2.381%2045.127-2.565%207.483-.085%2015.175-.02%2023.015.229%207.834.248%2015.51.67%2022.968%201.25%2014.92%201.156%2028.998%202.957%2041.703%205.435%206.104%201.186%2011.931%202.505%2017.35%204.046%205.42%201.541%2010.433%203.303%2014.965%205.263%204.145%201.79%207.906%203.808%2011.06%206.11%201.442%201.044%202.772%202.171%203.92%203.37%201.146%201.199%202.11%202.469%202.864%203.785a13.434%2013.434%200%200%201%201.512%203.986c.295%201.494.276%202.914.074%204.176a14.011%2014.011%200%200%201-1.3%203.977%2016.406%2016.406%200%200%201-1.587%202.577c-.977%201.305-1.626%201.855-1.732%201.773-.106-.082.333-.802%201.064-2.196a22.47%2022.47%200%200%200%201.191-2.616c.393-1.05.749-2.284.853-3.7a10.664%2010.664%200%200%200-.315-3.59c-.293-1.107-.799-2.24-1.502-3.34-.713-1.123-1.625-2.201-2.717-3.229-1.092-1.027-2.363-2.005-3.75-2.943-3.044-2.044-6.684-3.82-10.755-5.44-4.459-1.771-9.383-3.354-14.721-4.736-5.338-1.383-11.09-2.564-17.15-3.648-12.586-2.244-26.524-3.873-41.336-4.949a561.489%20561.489%200%200%200-22.791-1.181%20602.786%20602.786%200%200%200-22.847-.285c-16.088.1-31.21.836-44.806%202.057-7.56.68-14.646%201.492-21.154%202.44-6.509.95-12.44%202.035-17.714%203.176-4.53.984-8.59%201.971-12.085%202.975a106.17%20106.17%200%200%200-8.788%202.925c-2.358.907-4.145%201.7-5.364%202.228-1.22.527-1.876.783-1.938.677z'/%3E%3C/svg%3E
" width="80" height="23" alt="HastyScribe">
  </a></p>
    </div>
  </div>
  
</body>